<?xml version="1.0" encoding="UTF-8"?>
<!-- ***************************************************************** -->
<!--                                                                   -->
<!-- Licensed Materials - Property of IBM and/or HCL                   -->
<!--                                                                   -->
<!-- L-GHUS-B5DJYY, L-GHUS-B5DJS2                                      -->
<!--                                                                   -->
<!-- Copyright IBM Corp. 1999, 2017  All Rights Reserved.              -->
<!-- (c) Copyright HCL Technologies Ltd. 2018.  All Rights Reserved.  -->
<!--                                                                   -->
<!-- Note to U.S. Government Users Restricted Rights:                  -->
<!-- Use, duplication or disclosure restricted by GSA ADP Schedule     -->
<!--                                                                   -->
<!--                                                                   -->
<!-- ***************************************************************** -->

<!-- **********************************************************************
     * 
     * domino_10_0_1.xsd
     *
     * This schema describes the structure of DXL, the Domino XML Language, 
     * for IBM Notes/Domino version 10.0.1.
-->
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
					 xmlns="http://www.lotus.com/dxl" 
					 targetNamespace="http://www.lotus.com/dxl" 
					 elementFormDefault="qualified">

<!-- **********************************************************************
     *	
     * The following is the list of valid root elements in a DXL document. 
     * Their content models are represented in separate <xsd:complexType> 
     * elements by the same name throughout the rest of the document.
     *
     *********************************************************************** -->
	<xsd:element name="note" type="note"/>
	<xsd:element name="document" type="document"/>
	<xsd:element name="form" type="form"/>
	<xsd:element name="helpaboutdocument" type="helpaboutdocument"/>
	<xsd:element name="helpusingdocument" type="helpusingdocument"/>
	<xsd:element name="imageresource" type="imageresource"/>
	<xsd:element name="sharedfield" type="sharedfield"/>
	<xsd:element name="subform" type="subform"/>
	<xsd:element name="page" type="page"/>
	<xsd:element name="view" type="view"/>
	<xsd:element name="folder" type="folder"/>
	<xsd:element name="database" type="database"/>
	<xsd:element name="acl" type="acl"/>
	<xsd:element name="agent" type="agent"/>
	<xsd:element name="webservice" type="webservice"/>
	<xsd:element name="sharedactions" type="sharedactions"/>
	<xsd:element name="sharedcolumn" type="sharedcolumn"/>
	<xsd:element name="scriptlibrary" type="scriptlibrary"/>
	<xsd:element name="outline" type="outline"/>
	<xsd:element name="profiledocument" type="profiledocument"/>
	<xsd:element name="appletresource" type="appletresource"/>
	<xsd:element name="dataconnection" type="dataconnection"/>
	<xsd:element name="frameset" type="frameset"/>
	<xsd:element name="databasescript" type="databasescript"/>
	<xsd:element name="agentdata" type="agentdata"/>
	<xsd:element name="fileresource" type="fileresource"/>
	<xsd:element name="stylesheetresource" type="stylesheetresource"/>
	<xsd:element name="db2accessview" type="db2accessview"/>
	
    <!-- **********************************************************************
     * Group:        design.elements
     * Description:  Lists all design elements
     *********************************************************************** -->
	<xsd:group name="design.elements">
		<xsd:choice>
			<xsd:element name="form" type="form"/>
			<xsd:element name="subform" type="subform"/>
			<xsd:element name="page" type="page"/>
			<xsd:element name="frameset" type="frameset"/>
			<xsd:element name="view" type="view"/>
			<xsd:element name="folder" type="folder"/>
			<xsd:element name="sharedfield" type="sharedfield"/>
			<xsd:element name="sharedactions" type="sharedactions"/>
			<xsd:element name="imageresource" type="imageresource"/>
			<xsd:element name="appletresource" type="appletresource"/>
			<xsd:element name="agent" type="agent"/>
			<xsd:element name="webservice" type="webservice"/>
			<xsd:element name="agentdata" type="agentdata"/>
			<xsd:element name="scriptlibrary" type="scriptlibrary"/>
			<xsd:element name="sharedcolumn" type="sharedcolumn"/>
			<xsd:element name="outline" type="outline"/>
			<xsd:element name="databasescript" type="databasescript"/>
			<xsd:element name="helpusingdocument" type="helpusingdocument"/>
			<xsd:element name="helpaboutdocument" type="helpaboutdocument"/>
			<xsd:element name="dataconnection" type="dataconnection"/>
			<xsd:element name="fileresource" type="fileresource"/>
			<xsd:element name="stylesheetresource" type="stylesheetresource"/>
			<xsd:element name="db2accessview" type="db2accessview"/>
		</xsd:choice>
	</xsd:group>

    <!-- **********************************************************************
     * Group:        note.types
     * Description:  Lists all note types
     *********************************************************************** -->
	<xsd:group name="note.types">
		<xsd:choice>
			<xsd:element name="note" type="note"/>
			<xsd:element name="document" type="document"/>
			<xsd:element name="profiledocument" type="profiledocument"/>
			<xsd:group ref="design.elements"/>
		</xsd:choice>
	</xsd:group>

    <!-- **********************************************************************
     * Group:        note.prolog
     * Description:  Lists elements required at the beginning of all notes
     *********************************************************************** -->
	<xsd:group name="note.prolog">
		<xsd:sequence>
			<xsd:element name="noteinfo" type="noteinfo" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="updatedby" type="updatedby" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="revisions" type="revisions" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="wassignedby" type="wassignedby" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="textproperties" type="textproperties" minOccurs="0" maxOccurs="1"/>
		</xsd:sequence>
	</xsd:group>

    <!-- **********************************************************************
     * Group:        note.epilog
     * Description:  Lists elements required at the end of all notes
     *********************************************************************** -->
	<xsd:group name="note.epilog">
		<xsd:sequence>
			<xsd:element name="item" type="item" minOccurs="0" maxOccurs="unbounded"/>
		</xsd:sequence>
	</xsd:group>

    <!-- **********************************************************************
     * Group:        simple.types
     * Description:  Simple types that can occur in an item, fieldchoice, 
     *               or entrydata element
     *********************************************************************** -->
	<xsd:group name="simple.types">
		<xsd:choice>
			<xsd:element name="text" type="text"/>
			<xsd:element name="number" type="xsd:string"/>
			<xsd:element name="datetime" type="datetime"/>
			<xsd:element name="textlist" type="textlist"/>
			<xsd:element name="numberlist" type="numberlist"/>
			<xsd:element name="datetimelist" type="datetimelist"/>
			<xsd:element name="itemdata" type="itemdata"/>
			<xsd:element name="rawitemdata" type="rawitemdata"/>
		</xsd:choice>
	</xsd:group>

    <!-- **********************************************************************
     * Color Attributes in DXL.
     *
     * Many elements in DXL have attributes that specify a color.  Colors in DXL
     * are as in CSS2.  The value for a color attribute may be any of the
     * following:
     *
     *   A specific color name; one of the following:
     *     aqua
     *     black
     *     blue
     *     fuchsia
     *     gray
     *     green
     *     lime
     *     maroon
     *     navy
     *     olive
     *     purple
     *     red
     *     silver
     *     teal
     *     white
     *     yellow
     *     none
     *     system
     *
     *   RGB value specified in #rgb or #rrggbb format, where r, g, and b
	 *   are RGB values in hex (e.g., '#ff0000' or '#f00' for red).
     *
     *   RGB value specified in rgb(r,g,b), where r, g, b are RGB decimal
     *   or percentage values (e.g., 'rgb(255,0,0)' or 'rgb(100%,0%,0%)' for
     *   red).
     *********************************************************************** -->

    <!-- **********************************************************************
     * Group:        item.complex.types
     * Description:  Complex types that can occur in an item, or fieldchoice 
     *               element
     *********************************************************************** -->
	<xsd:group name="item.complex.types">
		<xsd:choice>
			<xsd:element name="formula" type="formula"/>
			<xsd:element name="richtext" type="richtext"/>
			<xsd:element name="object" type="object"/>
		</xsd:choice>
	</xsd:group>

	<xsd:group name="image.formats">
		<xsd:choice>
			<xsd:element name="gif" type="gif"/>
			<xsd:element name="jpeg" type="jpeg"/>
			<xsd:element name="png" type="png"/>
			<xsd:element name="notesbitmap" type="xsd:base64Binary"/>
			<xsd:element name="cgm" type="cgm"/>
		</xsd:choice>
	</xsd:group>
	
   <!-- **********************************************************************
     * Things that can appear at the paragraph level.
     * formregionbegin and formregionend have additional restrictions:
     * - They only occur within a form body
     * - A formregionbegin must be matched by a formregionend with the same type
     * - They cannot nest
     * - All of the rest of the richtext content should be between a
     *   formregionbegin/formregionend pair
     *********************************************************************** -->	
	<xsd:group name="richtext.block">
		<xsd:choice>
			<xsd:element name="par" type="par"/>
			<xsd:element name="pardef" type="pardef"/>
			<xsd:element name="table" type="table"/>
			<xsd:element name="subformref" type="subformref"/>
			<xsd:element name="section" type="section"/>
			<xsd:element name="block" type="block"/>
			<xsd:element name="formregionbegin" type="formregionbegin"/>
			<xsd:element name="formregionend" type="formregionend"/>
			<xsd:element name="compositedata" type="compositedata"/>
		</xsd:choice>
	</xsd:group>
	
	<xsd:group name="richtext.nonhot.inline">
		<xsd:choice>
			<xsd:element name="run" type="run"/>
			<xsd:element name="break" type="break"/>
			<xsd:element name="field" type="field"/>
			<xsd:element name="sharedfieldref" type="sharedfieldref"/>
			<xsd:element name="picture" type="picture"/>
			<xsd:element name="horizrule" type="horizrule"/>
			<xsd:element name="anchor" type="anchor"/>
			<xsd:element name="embeddeddatepicker" type="embeddeddatepicker"/>
			<xsd:element name="embeddedfileuploadcontrol" type="embeddedfileuploadcontrol"/>
			<xsd:element name="embeddedfolderpane" type="embeddedfolderpane"/>
			<xsd:element name="embeddednavigator" type="embeddednavigator"/>
			<xsd:element name="embeddedoutline" type="embeddedoutline"/>
			<xsd:element name="embeddedview" type="embeddedview"/>
			<xsd:element name="imagemap" type="imagemap"/>
			<xsd:element name="span" type="span"/>
			<xsd:element name="namedelementref" type="namedelementref"/>
			<xsd:element name="nonxmlchar" type="nonxmlchar"/>
			<xsd:element name="embeddedcontrol" type="embeddedcontrol"/>
			<xsd:element name="richtextdata" type="richtextdata"/>
			<xsd:element name="layer" type="layer"/>
			<xsd:element name="compositedata" type="compositedata"/>
		</xsd:choice>
	</xsd:group>
	<xsd:group name="richtext.links">
		<xsd:choice>
			<xsd:element name="doclink" type="doclink"/>
			<xsd:element name="viewlink" type="viewlink"/>
			<xsd:element name="databaselink" type="databaselink"/>
			<xsd:element name="urllink" type="urllink"/>
			<xsd:element name="namedelementlink" type="namedelementlink"/>
		</xsd:choice>
	</xsd:group>
	<xsd:group name="richtext.hot.inline">
		<xsd:choice>
			<xsd:group ref="richtext.links"/>
			<xsd:element name="attachmentref" type="attachmentref"/>
			<xsd:element name="button" type="button"/>
			<xsd:element name="computedtext" type="computedtext"/>
			<xsd:element name="popup" type="popup"/>
			<xsd:element name="javaapplet" type="javaapplet"/>
			<xsd:element name="actionhotspot" type="actionhotspot"/>
			<xsd:element name="objectref" type="objectref"/>
			<xsd:element name="region" type="region"/>
		</xsd:choice>
	</xsd:group>
	<xsd:group name="richtext.inline">
		<xsd:choice>
			<xsd:group ref="richtext.nonhot.inline"/>
			<xsd:group ref="richtext.hot.inline"/>
		</xsd:choice>
	</xsd:group>
	<xsd:group name="design.note.prolog">
		<xsd:sequence>
			<xsd:group ref="note.prolog"/>
		</xsd:sequence>
	</xsd:group>
	<xsd:group name="named.design.note.prolog">
		<xsd:sequence>
			<xsd:group ref="design.note.prolog"/>
		</xsd:sequence>
	</xsd:group>
	<xsd:group name="send.value.types">
		<xsd:choice>
			<xsd:element name="text" type="text"/>
			<xsd:element name="textlist" type="textlist"/>
			<xsd:element name="formula" type="formula"/>
		</xsd:choice>
	</xsd:group>
	<xsd:complexType name="created">
		<xsd:sequence>
			<xsd:element name="datetime" type="datetime"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="modified">
		<xsd:sequence>
			<xsd:element name="datetime" type="datetime"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="datetime">
		<xsd:simpleContent>
			<xsd:extension base="xsd:string">
				<xsd:attribute name="dst" type="xsd:boolean" use="optional" default="false"/>
			</xsd:extension>
		</xsd:simpleContent>
	</xsd:complexType>

    <!-- **********************************************************************
     * ComplexType:  nonxmlchar
     * Description:  Specifies a character outside of these valid XML values:
     *               Char := #x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] |
     *                       [#x10000-#x10FFFF]
     *               Valid XML characters are any Unicode character, excluding
     *               the surrogate blocks, FFFE, and FFFF.
     *               See http://www.w3.org/TR/REC-xml#charsets
     *
     * Attributes:
     * value:
     *     The hexadecimal value for the character.
     *********************************************************************** -->
	<xsd:complexType name="nonxmlchar">
		<xsd:attribute name="value" type="noteshex" use="optional"/>
	</xsd:complexType>

<!-- **********************************************************************
     * SimpleType:   database.types
     * Description:  Enumerates all possible values for the database 
     *               element's type attribute
     *********************************************************************** -->
	<xsd:simpleType name="database.types">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="standard"/>
			<xsd:enumeration value="library"/>
			<xsd:enumeration value="addressbook"/>
			<xsd:enumeration value="lightaddressbook"/>
			<xsd:enumeration value="multidbsearch"/>
			<xsd:enumeration value="portfolio"/>
			<xsd:enumeration value="imapproxy"/>
			<xsd:enumeration value="newsproxy"/>
			<xsd:enumeration value="subscriptions"/>
			<xsd:enumeration value="mailbox"/>
			<xsd:enumeration value="personaljournal"/>
			<xsd:enumeration value="mailfile"/>
		</xsd:restriction>
	</xsd:simpleType>

  <xsd:simpleType name="replicateunread.options">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="never"/>
      <xsd:enumeration value="cluster"/>
      <xsd:enumeration value="all"/>
    </xsd:restriction>
  </xsd:simpleType>
  
<!-- **********************************************************************
     * ComplexType:      database
     * Description:  Represents a complete Notes database.
     *
     * Attributes:
     * version, maintenanceversion, milestonebuild, replicaid:
     *     See comments for attributeGroup root.attrs.
     * fromtemplate:   
     *     The name of the template this database inherits from.
     * showinopendialog: 
     *     When true, database appears in database open's database 
     *     dialogbox.
     * advancedtemplate:
     *     If true, list as an advanced template in the New Database 
     *     dialog.  
     * markmodifiedunread:
     *     If true, modified documents appear unread
     * multidbindexed:
     *     If true, database is included in the multi database indexing
     * multilingual:
     *     If true, database is multilingual.  Associated attributes: 
     *     defaultlanguage, defaultregion, defaultsortorder
     * defaultlanguage:
     *     Will not appear if there is no default language even when 
     *     multilingual is true
     * defaultregion:
     *     Not present when null, even when multilingual is true.
     * defaultsortorder:
     *     Not present when null, even when multilingual is true
     * maintainunread:
     *     Unread marks are maintained
     * increasemaxfields:
     *     Allow more fields in the database
     * maxupdatedbyentries:
     *     No max if set to zero or missing
     * maxrevisionentries:
     *     Max if set to zero or ommited
     * softdeletionsexpirein:
     *     Number of hours to keep soft deletions for undelete.
     * nourlopen:
     *     Do not allow this database to be opened via a URL.
     * copyprofiledocswithdesign:
     *     For use with templates
     * uselz1:
     *     Use LZ1 compression for attachments in the database.
     * allowrestdbapi:
     *     allow REST API if true
     *********************************************************************** -->
	<xsd:complexType name="database">
		<xsd:sequence>
			<xsd:element name="databaseinfo" type="databaseinfo" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="acl" type="acl" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="fulltextsettings" type="fulltextsettings" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="launchsettings" type="launchsettings" minOccurs="0" maxOccurs="1"/>
			<xsd:choice minOccurs="0" maxOccurs="unbounded">
				<xsd:group ref="note.types"/>
			</xsd:choice>
		</xsd:sequence>
		<xsd:attributeGroup ref="root.attrs"/>
		<xsd:attribute name="path" type="xsd:string" use="optional"/>
		<xsd:attribute name="title" type="xsd:string" use="optional"/>
		<xsd:attribute name="categories" type="xsd:string" use="optional"/>
		<xsd:attribute name="templatename" type="xsd:string" use="optional"/>
		<xsd:attribute name="fromtemplate" type="xsd:string" use="optional"/>
		<xsd:attribute name="type" type="database.types" use="optional" default="standard"/>
		<xsd:attribute name="allowstoredforms" type="xsd:boolean" use="optional" default="true"/>
		<xsd:attribute name="allowbackgroundagents" type="xsd:boolean" use="optional" default="true"/>
		<xsd:attribute name="imageloadsdeferred" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="usejavascriptinpages" type="xsd:boolean" use="optional" default="true"/>
		<xsd:attribute name="requiressl" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="allowdesignlocking" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="allowexternalconnections" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="showinopendialog" type="xsd:boolean" use="optional" default="true"/>
		<xsd:attribute name="advancedtemplate" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="markmodifiedunread" type="xsd:boolean" use="optional" default="true"/>
		<xsd:attribute name="multidbindexed" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="multilingual" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="defaultlanguage" type="xsd:string" use="optional"/>
		<xsd:attribute name="defaultregion" type="xsd:string" use="optional"/>
		<xsd:attribute name="defaultsortorder" type="xsd:string" use="optional"/>
		<xsd:attribute name="maintainunread" type="xsd:boolean" use="optional" default="true"/>
		<xsd:attribute name="optimizetablebitmaps" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="overwritefreespace" type="xsd:boolean" use="optional" default="true"/>
		<xsd:attribute name="solrsearch" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="savelastaccessed" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="logtransactions" type="xsd:boolean" use="optional" default="true"/>
		<xsd:attribute name="allowsoftdeletion" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="allowspecialhierarchy" type="xsd:boolean" use="optional" default="true"/>
		<xsd:attribute name="allowheadlinemonitors" type="xsd:boolean" use="optional" default="true"/>
		<xsd:attribute name="increasemaxfields" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="maxupdatedbyentries" type="xsd:integer" use="optional"/>
		<xsd:attribute name="maxrevisionentries" type="xsd:integer" use="optional"/>
		<xsd:attribute name="softdeletionsexpirein" type="xsd:integer" use="optional"/>
		<xsd:attribute name="nourlopen" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="unicodestandardsorting" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="allowdocumentlocking" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="copyprofiledocswithdesign" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="singlecopytemplate" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="uselz1" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="allowrestdbapi" type="xsd:boolean" use="optional"/>
    <xsd:attribute name="compressdesign" type="xsd:boolean" use="optional" default="false"/>
    <xsd:attribute name="compressdata" type="xsd:boolean" use="optional" default="false"/>
    <xsd:attribute name="supportrespthread" type="xsd:boolean" use="optional" default="false"/>
    <xsd:attribute name="noautoviewupdate" type="xsd:boolean" use="optional" default="false"/>
    <xsd:attribute name="inheritostheme" type="xsd:boolean" use="optional" default="false"/>
    <xsd:attribute name="trackreplyfwd" type="xsd:boolean" use="optional" default="false"/>
    <xsd:attribute name="nosimplesearch" type="xsd:boolean" use="optional" default="false"/>
    <xsd:attribute name="replicateunread" type="replicateunread.options" use="optional" default="never"/>
	</xsd:complexType>

    <!-- **********************************************************************
     * AttributeGroup: root.attrs
     * Description:    Attributes that occur on all root elements
     *
     * Attributes:
     * version:
     *     The major and minor Notes version numbers.
     *     Example: The Exporter on the first release of Domino 6 would output
     *     version='6.0'.
     * maintenanceversion:
     *     The maintenance and update Notes version numbers,
     *     Example: The Exporter on Domino maintenance release 6.0.1b would
     *     output version='6.0' maintenanceversion='1.2', where the 'b' is
     *     represented by '.2'.
     * milestonebuild:
     *     The milestone build number for pre-release versions.
     *     Example: The Exporter on the seventh milestone build of Domino 6.0
     *     would output version='6.0' milestonebuild='7'.
     * replicaid:
     *     DXL can be tagged with the replica ID of the original database in
     *     one of two ways: by a replicaid attribute on the root element or by
     *     a replicaid on a databaseinfo element.  When using the DXL Importer
     *     to replace existing elements, DXL may require (by default) that this
     *     replicaid matches that of the import database.  This behavior can be
     *     overridden - see the API documentation for further details.
     *********************************************************************** -->
	<xsd:attributeGroup name="root.attrs">
		<xsd:attribute name="version" type="xsd:float" use="optional"/>
		<xsd:attribute name="maintenanceversion" type="xsd:float" use="optional"/>
		<xsd:attribute name="milestonebuild" type="xsd:float" use="optional"/>
		<xsd:attribute name="replicaid" type="noteshex" use="optional"/>
	</xsd:attributeGroup>

    <!-- **********************************************************************
     * ComplexType:      databaseinfo
     * Description:  Stores standard database information
     *********************************************************************** -->
	<xsd:complexType name="databaseinfo">
		<xsd:sequence>
			<xsd:element name="datamodified" type="datamodified" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="designmodified" type="designmodified" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="created" type="created" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="modified" type="modified" minOccurs="0" maxOccurs="1"/>
		</xsd:sequence>
		<xsd:attribute name="dbid" type="noteshex" use="optional"/>
		<xsd:attribute name="replicaid" type="noteshex" use="optional"/>
		<xsd:attribute name="odsversion" type="xsd:integer" use="optional"/>
		<xsd:attribute name="diskspace" type="xsd:integer" use="optional"/>
		<xsd:attribute name="numberofdocuments" type="xsd:integer" use="optional"/>
		<xsd:attribute name="percentused" type="xsd:float" use="optional"/>
	</xsd:complexType>
	<xsd:complexType name="datamodified">
		<xsd:sequence>
			<xsd:element name="datetime" type="datetime"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="designmodified">
		<xsd:sequence>
			<xsd:element name="datetime" type="datetime"/>
		</xsd:sequence>
	</xsd:complexType>

    <!-- **********************************************************************
     * ComplexType:  acl
     * Description:  The Access Control List of a Domino database.  Content is:
     *               - Zero or more role elements.  Roles provide a way to
     *               define a group within a database.  You can assign users
     *               and groups to roles (in aclentrys) to reflect access to
     *               particular constructs.
     *               - One or more aclentry elements.  Each aclentry defines
     *               the access level (and optionally roles) for a server,
     *               user, or group.
     *               - Zero or more logentry elements.  Notes writes an entry
     *               whenever the ACL is modified.
     *
     * Attributes:
     * version, maintenanceversion, milestonebuild, replicaid:
     *     See comments for attributeGroup root.attrs.
     * adminserver:
     *     The administration server for the database.  The server's
     *     Administration Process will update names in the ACL (and Readers
     *     and Authors items) as those names are updated in the server's
     *     Domino Directory.
     * adminservermaymodify:
     *     Describes which items an administration server may modify.  This
     *     attribute replaces adminreaderauthor and will override it unless
     *     adminreaderauthor is 'true' and adminservermaymodify is 'none'
     * adminreaderauthor:
     *     Deprecated.  Please use the adminservermaymodify attribute.
     * consistentacl:
     *     Set this true to enforce a consistent ACL on all replicas of the
     *     database, including local replicas.
     * maxinternetaccess:
     *     Specifies the maximum access that Internet or intranet browser users
     *     have to the database.
     *********************************************************************** -->
	<xsd:complexType name="acl">
		<xsd:sequence>
			<xsd:element name="role" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/>
			<xsd:element name="aclentry" type="aclentry" minOccurs="1" maxOccurs="unbounded"/>
			<xsd:element name="logentry" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/>
		</xsd:sequence>
		<xsd:attributeGroup ref="root.attrs"/>
		<xsd:attribute name="adminserver" type="xsd:string" use="optional" default=""/>
		<xsd:attribute name="adminservermaymodify" type="acl.adminservermaymodify" use="optional" default="none"/>
		<xsd:attribute name="adminreaderauthor" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="consistentacl" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="maxinternetaccess" type="acl.levels" use="optional" default="editor"/>
	</xsd:complexType>

	<xsd:simpleType name="acl.adminservermaymodify">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="none"/>
			<xsd:enumeration value="authorreaderfields"/>
			<xsd:enumeration value="namesfields"/>
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:simpleType name="acl.levels">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="noaccess"/>
			<xsd:enumeration value="depositor"/>
			<xsd:enumeration value="reader"/>
			<xsd:enumeration value="author"/>
			<xsd:enumeration value="editor"/>
			<xsd:enumeration value="designer"/>
			<xsd:enumeration value="manager"/>
		</xsd:restriction>
	</xsd:simpleType>

    <!-- **********************************************************************
     * ComplexType:  aclentry
     * Description:  Defines the access level (and optionally roles) for a
     *               server, user, or group.
     *
     * Attributes:
     * name:
     *     The canonical name of the server, user, or group.  Required.
     * level:
     *     The access level.  One of the following values.  Refer to the online
     *     help or documentation for a description of the access allowed by each
     *     level.  Required.
     *       noaccess    
     *       depositor
     *       reader
     *       author
     *       editor
     *       designer
     *       manager
     *     The level implies a specific combination of the "privilege"
     *     attributes (beginning with createdocs below).  The implied setting
     *     for a level might be 'true' or 'false'.  For each level, only some
     *     subset of these privilege attributes can be overridden.  For example,
     *     if level='manager', the only privilege that can be overridden is
     *     deletedocs.  The others all are 'true' for 'manager' access and
     *     cannot be set to 'false' for that level. This is evident from the
     *     Notes Client UI for Database - Access Control.
     * default:
     *     Indicates that this is the default ACL entry. The name attribute can
     *     be any value, including the empty string.
     * type:
     *     The type of aclentry.  Indicates whether the name represents a user,
     *     server, or a group of users and/or servers.  One of the following:
     *       unspecified  
     *       person
     *       server
     *       mixedgroup
     *       persongroup
     *       servergroup
     * Privilege attributes - a value of 'true' means entities specified in this
     * aclentry can:
     * createdocs:            Create documents
     * deletedocs:            Delete documents
     * createpersonalagents:  Create personal agents
     * createpersonalviews:   Create personal folders/views
     * createsharedviews:     Create shared folders/views
     * createlsjavaagents:    Create LotusScript/Java agents
     * readpublicdocs:        Read public documents
     * writepublicdocs:       Write public documents
     * noreplicate:           Replicate or copy documents
     *********************************************************************** -->
	<xsd:complexType name="aclentry">
		<xsd:sequence>
			<xsd:element name="role" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/>
		</xsd:sequence>
		<xsd:attribute name="name" type="xsd:string" use="required"/>
		<xsd:attribute name="level" type="acl.levels" use="required"/>
		<xsd:attribute name="default" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="type" type="aclentry.types" use="optional" default="unspecified"/>
		<xsd:attribute name="createdocs" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="deletedocs" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="createpersonalagents" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="createpersonalviews" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="createsharedviews" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="createlsjavaagents" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="readpublicdocs" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="writepublicdocs" type="xsd:boolean" use="optional"/>
        <xsd:attribute name="noreplicate" type="xsd:boolean" use="optional"/>
	</xsd:complexType>

	<xsd:simpleType name="aclentry.types">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="unspecified"/>
			<xsd:enumeration value="person"/>
			<xsd:enumeration value="server"/>
			<xsd:enumeration value="mixedgroup"/>
			<xsd:enumeration value="persongroup"/>
			<xsd:enumeration value="servergroup"/>
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:complexType name="fulltextsettings">
		<xsd:sequence>
			<xsd:element name="lastindexed" type="lastindexed" minOccurs="0" maxOccurs="1"/>
		</xsd:sequence>
		<xsd:attribute name="size" type="xsd:integer" use="optional"/>
		<xsd:attribute name="update" type="fulltextsettings.updatetypes" use="optional"/>
		<xsd:attribute name="unindexeddocumentcount" type="xsd:integer" use="optional"/>
		<xsd:attribute name="casesensitive" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="breakat" type="fulltextsettings.breaktypes" use="optional" default="words"/>
		<xsd:attribute name="includeattachments" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="attachmenttype" type="fulltextsettings.attachment.type" use="optional" default="rawtextonly"/>
		<xsd:attribute name="includeencryptedfields" type="xsd:boolean" use="optional" default="true"/>
	</xsd:complexType>
	<xsd:simpleType name="fulltextsettings.updatetypes">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="daily"/>
			<xsd:enumeration value="hourly"/>
			<xsd:enumeration value="immediate"/>
			<xsd:enumeration value="scheduled"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="fulltextsettings.breaktypes">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="words"/>
			<xsd:enumeration value="wordssentencesparagraphs"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="fulltextsettings.attachment.type">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="rawtextonly"/>
			<xsd:enumeration value="includebinary"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:complexType name="lastindexed">
		<xsd:sequence>
			<xsd:element name="datetime" type="datetime"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="launchsettings">
		<xsd:sequence>
			<xsd:element name="noteslaunch" type="noteslaunch" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="weblaunch" type="weblaunch" minOccurs="0" maxOccurs="1"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="noteslaunch">
		<xsd:attributeGroup ref="launch.common.attrs"/>
		<xsd:attribute name="restorelastview" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="showaboutdocument" type="launch.notes.showaboutdocument" use="optional"/>
		<xsd:attribute name="previewdefault" type="launch.notes.previewdefault" use="optional"/>
		<xsd:attribute name="navigatortype" type="launch.navigatortypes" use="optional"/>
    <xsd:attribute name="compapp" type="xsd:string" use="optional"/>
    <xsd:attribute name="compapppage" type="xsd:string" use="optional"/>
  </xsd:complexType>
	<xsd:attributeGroup name="launch.common.attrs">
		<xsd:attribute name="whenopened" use="optional">
			<xsd:simpleType>
				<xsd:restriction base="xsd:string">
					<xsd:enumeration value="openaboutdocument"/>
					<xsd:enumeration value="openframeset"/>
					<xsd:enumeration value="opennavigatorinwindow"/>
					<xsd:enumeration value="openfirstdoclink"/>
					<xsd:enumeration value="restorelastview"/>
					<xsd:enumeration value="opennavigator"/>
					<xsd:enumeration value="openfirstaboutattachment"/>
					<xsd:enumeration value="usenotesoptions"/>
					<xsd:enumeration value="openpage"/>
					<xsd:enumeration value="openspecifieddoclink"/>
					<xsd:enumeration value="openfirstdocumentinview"/>
					<xsd:enumeration value="openxpage"/>
					<xsd:enumeration value="opencompapp"/>
				</xsd:restriction>
			</xsd:simpleType>
		</xsd:attribute>
		<xsd:attribute name="frameset" type="xsd:string" use="optional"/>
		<xsd:attribute name="navigator" type="xsd:string" use="optional"/>
		<xsd:attribute name="xpage" type="xsd:string" use="optional"/>
	</xsd:attributeGroup>
	<xsd:simpleType name="launch.notes.showaboutdocument">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="firstopen"/>
			<xsd:enumeration value="firstopenandchanged"/>
			<xsd:enumeration value="never"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="launch.notes.previewdefault">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="bottomright"/>
			<xsd:enumeration value="bottom"/>
			<xsd:enumeration value="right"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="launch.navigatortypes">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="page"/>
			<xsd:enumeration value="standard"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:complexType name="weblaunch">
		<xsd:sequence>
			<xsd:element name="doclink" type="doclink" minOccurs="0" maxOccurs="1"/>
		</xsd:sequence>
		<xsd:attributeGroup ref="launch.common.attrs"/>
		<xsd:attribute name="page" type="xsd:string" use="optional"/>
		<xsd:attribute name="view" type="xsd:string" use="optional"/>
	</xsd:complexType>

    <!-- **********************************************************************
     * ComplexType:  note
     * Description:  Any note in a Domino database.  This represents a note in
     *               its most basic, or "raw", form, which is primarily some
     *               basic properties and a number of items.  Most note classes
     *               have a more abstract DXL element, such as document or form.
     *               There are API options to force any note to be emitted by
     *               the DXL Exporter as a note element instead of its more
     *               abstract format which is used by default.
     *
     * Attributes:
     * version, maintenanceversion, milestonebuild, replicaid:
     *     See comments for attributeGroup root.attrs.
     * key:
     *     See comments for attributeGroup note.attrs.
     * class:
     *     The class of the note.  One of the following values.
     *       Value:              Represents these types of notes:
     *       document            document (data note).
     *       helpaboutdocument   Help About document.
     *       form                form, subform, page, frameset, shared actions,
     *                           image resource, applet resource, file resource,
     *                           style sheet resource.
     *       view                view, folder, navigator.
     *       icon                database icon.
     *       helpindex           help index document.
     *       helpusingdocument   Help Using document.
     *       filter              agent, agent data note, JavaScript library,
     *                           database script, outline, data connection
     *                           resource.
     *       sharedfield         shared field.
     *       replicationformula  replication formula.
     * default:
     *     Is this the default note of its class?
     * private:
     *     Is this a private design note?
     *********************************************************************** -->
	<xsd:complexType name="note">
		<xsd:sequence>
			<xsd:group ref="note.prolog"/>
			<xsd:group ref="note.epilog"/>
		</xsd:sequence>
		<xsd:attributeGroup ref="note.attrs"/>
		<xsd:attribute name="class" type="note.classes" use="required"/>
		<xsd:attribute name="default" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="private" type="xsd:boolean" use="optional"/>
	</xsd:complexType>

    <!-- **********************************************************************
     * attributeGroup:  note.attrs
     * Description:  Attributes common to all elements that represent notes in
     *               a Domino database.
     *
     * Attributes: (see also root.attrs)
     * key:
     *     User-specified unique ID that can be used to refer to this note.  May
     *     be the string representation of an UNID, or any other unique string.
     *     Used in situations where one note refers to another, e.g. for
     *     document links.
     *********************************************************************** -->
	<xsd:attributeGroup name="note.attrs">
		<xsd:attributeGroup ref="root.attrs"/>
		<xsd:attribute name="key" type="xsd:ID" use="optional"/>
	</xsd:attributeGroup>

	<xsd:simpleType name="note.classes">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="document"/>
			<xsd:enumeration value="helpaboutdocument"/>
			<xsd:enumeration value="form"/>
			<xsd:enumeration value="view"/>
			<xsd:enumeration value="icon"/>
			<xsd:enumeration value="helpindex"/>
			<xsd:enumeration value="helpusingdocument"/>
			<xsd:enumeration value="filter"/>
			<xsd:enumeration value="sharedfield"/>
			<xsd:enumeration value="replicationformula"/>
		</xsd:restriction>
	</xsd:simpleType>

    <!-- **********************************************************************
     * ComplexType:  noteinfo
     * Description:  Contains basic information that applies to all notes.
     *
     * Attributes:
     * noteid:
     *     On export, this is the note's NOTEID.  On import, this attribute is
     *     ignored.  A note created by the Importer will NOT be assigned this
     *     noteid.
     * unid:
     *     On export, the UNIVERSALNOTEID (or UNID) of the note.  On import,
     *     this attribute may be used to uniquely identify a note so it can be
     *     referenced elsewhere in the DXL.  It also is used in the process of
     *     locating existing notes for replace and update operations.  The
     *     Importer will NOT assign the unid to a newly created note (this is
     *     not a mechanism for forcing a note to have a specific UNID).
     * sequence:
     *     Domino and Notes increment the sequence number when a note is updated.
     *     The sequence number helps to distinguish different revisions of the
     *     same note from one another and is used by the Replicator.
     *********************************************************************** -->
	<xsd:complexType name="noteinfo">
		<xsd:sequence>
			<xsd:element name="created" type="created" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="modified" type="modified" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="revised" type="revised" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="lastaccessed" type="lastaccessed" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="addedtofile" type="addedtofile" minOccurs="0" maxOccurs="1"/>
		</xsd:sequence>
		<xsd:attribute name="noteid" type="noteshex" use="optional"/>
		<xsd:attribute name="unid" type="unidhex" use="optional"/>
		<xsd:attribute name="sequence" type="xsd:integer" use="optional"/>
	</xsd:complexType>

	<xsd:complexType name="revised">
		<xsd:sequence>
			<xsd:element name="datetime" type="datetime"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="lastaccessed">
		<xsd:sequence>
			<xsd:element name="datetime" type="datetime"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="addedtofile">
		<xsd:sequence>
			<xsd:element name="datetime" type="datetime"/>
		</xsd:sequence>
	</xsd:complexType>

    <!-- **********************************************************************
     * ComplexType:  textproperties
     * Description:  Contains sets of text properties that can be referenced by
     *               a unique ID elsewhere within the note.
     *********************************************************************** -->
	<xsd:complexType name="textproperties">
		<xsd:sequence>
			<xsd:element name="textproperty" type="textproperty" minOccurs="0" maxOccurs="unbounded"/>
		</xsd:sequence>
	</xsd:complexType>

    <!-- **********************************************************************
     * ComplexType:  textproperty
     * Description:  Contains sets of text properties that can be referenced by
     *               a unique ID elsewhere within the note.  Currently the only
     *               feature implemented via this mechanism is language tagging.
     *               Future versions of Notes may add additional properties.
     *
     * Attributes:
     * propid:
     *     A unique ID used to reference this particular textproperty set.
     * language:
     *     The identifier of a specific language.  This is used within richtext.
     *     Using elements such as span or block, you can specify any amount of
     *     richtext content and tag it as a specific language.  For example, if
     *     you write a document that includes English text and Italian text, you
     *     can refer to a textproperty with language='EN-US' for the English
     *     text and to a textproperty with language='IT' for the Italian text.
     *     One of the advantages of associating a language to a selection of
     *     text is for spell checking.  When you perform a spell check in the
     *     document, Notes knows to use the English (United States) dictionary
     *     and the Italian dictionary.
     *********************************************************************** -->
	<xsd:complexType name="textproperty">
		<xsd:attribute name="propid" type="xsd:integer" use="required"/>
		<xsd:attributeGroup ref="language.attrs"/>
	</xsd:complexType>

	<xsd:attributeGroup name="language.attrs">
		<xsd:attribute name="language" type="xsd:string" use="optional"/>
	</xsd:attributeGroup>
	<xsd:complexType name="wassignedby">
		<xsd:sequence>
			<xsd:element name="name" type="xsd:string"/>
		</xsd:sequence>
	</xsd:complexType>

    <!-- **********************************************************************
     * ComplexType:  document
     * Description:  A document (data note) in a Domino database.
     *     The DXL representation of a native Domino document does not contain <mime>;
     *     most of the document's data is represented as <item>s.  The DXL representation
     *     of a native MIME document is primarily within a <mime> element.
     *
     *     <mime> contains the entire MIME stream for a document that stores native MIME.
     *     The DXL Exporter will Content-Transfer-Encode MIME parts as base64 or quoted-
     *     printable if necessary to assure that the MIME stream can be represented
     *     entirely in the DXL document's character encoding and that it does not contain
     *     characters (e.g. noprintables) that are not allowed by XML.  Note that a DXL
     *     document that contains <mime> will contain few or no <item>s because the MIME
     *     stream itself represents that data.
     *
     * Attributes:
     * version, maintenanceversion, milestonebuild, replicaid:
     *     See comments for attributeGroup root.attrs.
     * key:
     *     See comments for attributeGroup note.attrs.
     * form:
     *     The name of the form used to display this document.
     * parent:
     *     The parent's universal ID or key, if this is a response or conflict
     *     document.
     * response:
     *     Is this a response document?
     * conflict:
     *     Is this a replication or save conflict response document?
     * truncated:
     *     Was this document truncated during replication?
     *********************************************************************** -->
	<xsd:complexType name="document">
		<xsd:sequence>
			<xsd:group ref="note.prolog"/>
			<xsd:element name="mime" type="xsd:string" minOccurs="0" maxOccurs="1"/>
			<xsd:group ref="note.epilog"/>
		</xsd:sequence>
		<xsd:attributeGroup ref="note.attrs"/>
		<xsd:attribute name="form" type="xsd:string" use="optional"/>
		<xsd:attribute name="parent" type="xsd:string" use="optional"/>
		<xsd:attribute name="response" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="conflict" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="truncated" type="xsd:boolean" use="optional"/>
	</xsd:complexType>

    <!-- **********************************************************************
     * ComplexType:  profiledocument
     * Description:  A profile document in a Domino database.  Profile documents
     *               store user-specific or database-specific values.
     *
     * Attributes:
     * version, maintenanceversion, milestonebuild, replicaid:
     *     See comments for attributeGroup root.attrs.
     * name:
     *     The unique name of the profile document.  If no username is provided,
     *     the profile document of this name applies database-wide.
     * username:
     *     An additional key value which allows for multiple profile documents
     *     with the same name but with different usernames.  This is generally
     *     a canonical user name to facilitate storing user-specific values.
     *********************************************************************** -->
	<xsd:complexType name="profiledocument">
		<xsd:sequence>
			<xsd:group ref="note.prolog"/>
			<xsd:group ref="note.epilog"/>
		</xsd:sequence>
		<xsd:attributeGroup ref="root.attrs"/>
		<xsd:attribute name="name" type="xsd:string" use="required"/>
		<xsd:attribute name="username" type="xsd:string" use="optional"/>
	</xsd:complexType>

    <!-- **********************************************************************
     * ComplexType:  item
     * Description:  An item within a note, document, or any other element in
     *               note.types.  Note and document elements consist primarily
     *               of items.  Design elements generally contain no or few
     *               items because those items contain the low-level details of
     *               how Domino stores their data, and DXL has defined a more
     *               abstract and convenient representation for them.
     *
     * Attributes:
     * name:
     *     The item name.
     * sign:
     *     The item's data is used as part of the signature computation when
     *     signing the containing note.
     * seal:
     *     The item is to be encrypted if/when the containing note is encrypted.
     * sealed:
     *     The item contains data encrypted by Notes.
     * summary:
     *     The item is a summary item, meaning it is stored in the summary
     *     buffer of the note for optimized access and may be used in view
     *     columns, selection formulas, etc.  See API documentation for details.
     *     Implied defaults: text item: true, number item: true,
     *     time(date) item: true.  Other items do not have a default.
     * authors:
     *     The item specifies a list of names who have author access to the
     *     containing note.
     * names:
     *     The item is a distinguished name or a list of distinguished names.
     * readers:
     *     The item specifies a list of names who have read access to the
     *     containing note.
     * placeholder:
     *     The item is a placeholder field in a form note.
     * protected:
     *     A user requires editor access to change this item.
     * unchanged:
     *     Item is same as on-disk.
     *********************************************************************** -->
	<xsd:complexType name="item">
		<xsd:choice>
			<xsd:group ref="simple.types"/>
			<xsd:group ref="item.complex.types"/>
		</xsd:choice>
		<xsd:attribute name="name" type="xsd:string" use="required"/>
		<xsd:attribute name="sign" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="seal" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="sealed" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="summary" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="authors" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="names" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="readers" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="placeholder" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="protected" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="unchanged" type="xsd:boolean" use="optional"/>
	</xsd:complexType>

	<xsd:complexType name="text" mixed="true">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="break" type="break"/>
			<xsd:element name="nonxmlchar" type="nonxmlchar"/>
		</xsd:choice>
	</xsd:complexType>
	<xsd:complexType name="textlist">
		<xsd:sequence>
			<xsd:element name="text" type="text" minOccurs="0" maxOccurs="unbounded"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="numberlist">
		<xsd:sequence>
			<xsd:element name="number" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="datetimelist">
		<xsd:sequence>
			<xsd:element name="datetime" type="datetime" minOccurs="0" maxOccurs="unbounded"/>
			<xsd:element name="datetimepair" type="datetimepair" minOccurs="0" maxOccurs="unbounded"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="datetimepair">
		<xsd:sequence>
			<xsd:element name="datetime" type="datetime" minOccurs="2" maxOccurs="2"/>
		</xsd:sequence>
	</xsd:complexType>

    <!-- **********************************************************************
     * ComplexType:  itemdata
     * Description:  **NOTE**: <itemdata> is deprecated in 7.0 - use
     *               <rawitemdata> instead.
     *
     *               For the types listed in the table below, itemdata contains
     *               raw, uninterpreted, data in HOST format (the native
     *               platform's format and layout of data structures in memory).
     *               Because host format differs from platform to platform, an
     *               application using itemdata with these types should do all
     *               of its processing on platforms with the same host format.
     *               This situation has been rectified in 7.0 with the
     *               rawitemdata element, whose contents are always in Domino
     *               CANONICAL format.  Please note that the use of <itemdata>
     *               with the types below is very rare in DXL and thus is
     *               unlikely to cause an interoperability issue for your
     *               applications.  Also note that, for any types other than the
     *               ones listed below, the itemdata contents are in CANONICAL
     *               format and thus do NOT pose any interoperability problem in
     *               any version of Notes/Domino supporting DXL.
     *
     *               As of 7.0, the DXL Exporter never emits <itemdata>, only
     *               <rawitemdata>.  The DXL Importer continues to support
     *               <itemdata> for backward-compatibility.
     *
     *                value of       corresponding
     *                itemdata       NSF data type
     *                 type           (see C API
     *               attribute           SDK)             Note
     *               _________     __________________     ____
     *                    7        TYPE_NOTELINK_LIST     (1)
     *                    c        TYPE_HIGHLIGHTS
     *                   16        TYPE_SCHED_LIST        (2)
     *                  100        TYPE_ERROR
     *                  300        TYPE_NUMBER            (1)
     *                  301        TYPE_NUMBER_RANGE      (1)
     *                  400        TYPE_TIME              (1)
     *                  401        TYPE_TIME_RANGE        (1)
     *                  501        TYPE_TEXT_LIST         (1)
     *                  502        TYPE_RFC822_TEXT
     *                  700        TYPE_USERID            (3)
     *
     *               (1) These types normally lead to specific DXL elements and
     *                   were not usually emitted as itemdata by the 6.x DXL
     *                   Exporter.  For example, items of TYPE_TIME generally
     *                   map to <datetime> elements in DXL and thus most often
     *                   will not be emitted as itemdata.
     *               (2) This type is normally only used in busytime databases.
     *               (3) This type was only used by Notes V1 and V2.
     *********************************************************************** -->
	<xsd:complexType name="itemdata">
		<xsd:simpleContent>
			<xsd:extension base="xsd:string">
				<xsd:attribute name="type" type="noteshex" use="required"/>
			</xsd:extension>
		</xsd:simpleContent>
	</xsd:complexType>

    <!-- **********************************************************************
     * ComplexType:  rawitemdata
     * Description:  The <rawitemdata> element contains the raw data
     *               (uninterpreted and unchanged by DXL) for a construct of a
     *               specific Domino data type, in Domino CANONICAL format,
     *               encoded in Base64.  Its primary purpose is to represent
     *               Domino data types that are not yet specifically supported
     *               by DXL, which is to say that they do not have a more
     *               abstract representation in DXL (e.g. TYPE_TIME usually
     *               leads to a datetime element).  Rawitemdata is always
     *               guaranteed to perfectly "round-trip", i.e. if it is
     *               exported from a database and subsequently imported into
     *               another database, the data will be identical.  Its obvious
     *               down side is that it is not an abstract representation of
     *               the data and thus it does not lend itself to manipulation
     *               by XML processors.  Most constructs in Domino DO have a
     *               more abstract representation and thus will NOT appear as
     *               rawitemdata.
     *
     *               The DXL Exporter may emit a richtext (TYPE_COMPOSITE) item
     *               as <rawitemdata type='1'> if it diagnoses an unrecoverable
     *               error while attempting to create the <richtext>
     *               representation of the item.
     *
     * Attributes:
     * type:
     *     The type attribute is required and identifes the Domino data type of
     *     the data.  Please note that this value is in hexadecimal.  These
     *     values correspond to TYPE_xxx values which are documented in the
     *     C API SDK and can be found in the file nsfdata.h from the SDK.
     *********************************************************************** -->
	<xsd:complexType name="rawitemdata">
		<xsd:simpleContent>
			<xsd:extension base="xsd:string">
				<xsd:attribute name="type" type="noteshex" use="required"/>
			</xsd:extension>
		</xsd:simpleContent>
	</xsd:complexType>

    <!-- **********************************************************************
     * ComplexType:  file
     * Description:  A file stored in Domino.
     *
     * Attributes:
     * compression:
     *     Indicates the compression format of the DXL file content.
     * desiredcompression:
     *     When the Exporter uncompresses a file (which is does by default), it
     *     emits this attribute to indicate the original compression (huffman
     *     or lz1).  In these cases compression='none' always.
     *     When the Importer sees the combination of a valid desiredcompression
     *     value and compression='none', it compresses the DXL file data using
     *     the desiredcompression format before storing in the database.
     *     An Exporter option may be used to leave the file content compressed.
     * flags:
     *     A list of keywords taken from %file.flags.tokens;    
     * attribute:
     *     A list of keywords taken from %file.attributes.tokens;                
     * size:
     *     The original file size.
     * storagesize:
     *     The size of the file as stored in Domino.  This holds the compressed
     *     file size for compressed attachments, and the encrypted file size
     *     for encrypted attachments.  The Exporter suppresses this attribute
     *     if it is equal to size.
     *********************************************************************** -->
	<xsd:complexType name="file">
		<xsd:sequence>
			<xsd:element name="created" type="created"/>
			<xsd:element name="modified" type="modified"/>
			<xsd:element name="filedata" type="xsd:base64Binary" minOccurs="0" maxOccurs="1"/>
		</xsd:sequence>
		<xsd:attribute name="hosttype" type="file.hosttype" use="optional" default="unknown"/>
		<xsd:attribute name="compression" type="file.compression" use="optional" default="none"/>
		<xsd:attribute name="desiredcompression" type="xsd:string" use="optional"/>
		<xsd:attribute name="attribute" type="file.attributeslist" use="optional"/>
		<xsd:attribute name="flags" type="file.flagslist" use="optional"/>
		<xsd:attribute name="encoding" type="file.encoding" use="optional" default="none"/>
		<xsd:attribute name="name" type="xsd:string" use="optional"/>
		<xsd:attribute name="application" type="xsd:string" use="optional"/>
		<xsd:attribute name="type" type="xsd:string" use="optional"/>
		<xsd:attribute name="resourcestart" type="xsd:integer" use="optional"/>
		<xsd:attribute name="resourcesize" type="xsd:integer" use="optional"/>
		<xsd:attribute name="size" type="xsd:nonNegativeInteger" use="optional"/>
		<xsd:attribute name="storagesize" type="xsd:nonNegativeInteger" use="optional"/>
	</xsd:complexType>
	<xsd:simpleType name="file.hosttype">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="cdstorage"/>
			<xsd:enumeration value="msdos"/>
			<xsd:enumeration value="mac"/>
			<xsd:enumeration value="hpfs"/>
			<xsd:enumeration value="bytearrayext"/>
			<xsd:enumeration value="bytearraypage"/>
			<xsd:enumeration value="stream"/>
			<xsd:enumeration value="link"/>
			<xsd:enumeration value="unknown"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="file.compression">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="none"/>
			<xsd:enumeration value="huffman"/>
			<xsd:enumeration value="lz1"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="file.flags">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="sign"/>
			<xsd:enumeration value="storedindoc"/>
			<xsd:enumeration value="mime"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="file.flagslist">
		<xsd:list itemType="file.flags"/>
	</xsd:simpleType>	
	<xsd:simpleType name="file.attributes">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="readonly"/>
			<xsd:enumeration value="private"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="file.attributeslist">
		<xsd:list itemType="file.attributes"/>
	</xsd:simpleType>
	<xsd:simpleType name="file.encoding">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="none"/>
			<xsd:enumeration value="base64"/>
			<xsd:enumeration value="quotedprintable"/>
			<xsd:enumeration value="uuencode"/>
			<xsd:enumeration value="unknown"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:complexType name="object">
		<xsd:sequence>
			<xsd:element name="file" type="file"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="formula" mixed="true">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="nonxmlchar" type="nonxmlchar"/>
		</xsd:choice>
		<xsd:attribute name="compiled" type="xsd:boolean" use="optional"/>
	</xsd:complexType>
	<xsd:complexType name="background">
		<xsd:choice minOccurs="0" maxOccurs="1">
			<xsd:element name="gif" type="gif"/>
			<xsd:element name="jpeg" type="jpeg"/>
			<xsd:element name="notesbitmap" type="xsd:base64Binary"/>
			<xsd:element name="cgm" type="cgm"/>
			<xsd:element name="imageref" type="imageref"/>
		</xsd:choice>
		<xsd:attribute name="allowoverride" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="hide" type="background.hide.tokens" use="optional" default="none"/>
		<xsd:attribute name="tile" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="repeat" type="cellbackground.repeats" use="optional" default="tile"/>
	</xsd:complexType>
	<xsd:simpleType name="background.hide.tokens">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="none"/>
			<xsd:enumeration value="editdesign"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="cellbackground.repeats">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="once"/>
			<xsd:enumeration value="vrepeat"/>
			<xsd:enumeration value="hrepeat"/>
			<xsd:enumeration value="tile"/>
			<xsd:enumeration value="center"/>
			<xsd:enumeration value="resize"/>
		</xsd:restriction>
	</xsd:simpleType>
<!-- **********************************************************************
	 * ComplexType:		border
	 * Description:		Specifies border characteristics on contructs that
	 *					have a border.
	 * Attributes:	
	 *	style:			border style, see border.styles, default is none.
     *                  If style='image', the child imageref element specifies
     *                  the border image.
	 *	width:			the width of the border, always pixels 
	 *	insidewidth:	the width of the gutter between the border and the
	 *					object, always pixels
	 *	outsidewidth:	the width of the gutter between the border and 
	 *					surrounding objects, always pixels
	 *	color:			color of the border, default is black
	 *	dropshadow:		signifies if the border has drop shadowing or not, 
	 *					default is false
	 *	dropshadowwidth:the thickness of the drop shadow, always pixels,
	 *					default is 12 pixels
	 *
	 ********************************************************************** -->
	<xsd:complexType name="border">
		<xsd:sequence>
			<xsd:element name="imageref" type="imageref" minOccurs="0" maxOccurs="1"/>
		</xsd:sequence>
		<xsd:attribute name="style" type="border.styles" use="optional" default="none"/>
		<xsd:attribute name="width" type="xsd:string" use="optional" default="0"/>
		<xsd:attribute name="insidewidth" type="xsd:string" use="optional" default="0"/>
		<xsd:attribute name="outsidewidth" type="xsd:string" use="optional" default="0"/>
		<xsd:attribute name="color" type="xsd:string" use="optional" default="black"/>
		<xsd:attribute name="dropshadow" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="dropshadowwidth" type="xsd:string" use="optional" default="12px"/>
	</xsd:complexType>
<!-- **************************************************************************
	 * SimpleType:	border.styles
	 * Description:	Enumerates all possible values for border styles
	 ************************************************************************** -->
	<xsd:simpleType name="border.styles">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="none"/>
			<xsd:enumeration value="solid"/>
			<xsd:enumeration value="double"/>
			<xsd:enumeration value="dot"/>
			<xsd:enumeration value="dash"/>
			<xsd:enumeration value="inset"/>
			<xsd:enumeration value="outset"/>
			<xsd:enumeration value="ridge"/>
			<xsd:enumeration value="groove"/>
			<xsd:enumeration value="picture"/>
			<xsd:enumeration value="image"/>
		</xsd:restriction>
	</xsd:simpleType>

    <!-- **********************************************************************
     * ComplexType:  richtext
     * Description:  Represents Notes rich text data.  Rich text is a series of
     *               paragraphs, sections, etc.
     *********************************************************************** -->
	<xsd:complexType name="richtext">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:group ref="richtext.block"/>
		</xsd:choice>
	</xsd:complexType>

    <!-- **********************************************************************
     * ComplexType:  block
     * Description:  A block contains other block-level richtext elements and
     *               enables you to apply various formatting properties to its
     *               contents, rather than having to explicitly specify them on
     *               numerous of its contained elements.  For example, run
     *               elements will by default inherit properties from block.
     *
     * Attributes:
     * html:
     *     Is all of the text in the block pass-through HTML?
     * readingorder:
     *     The reading order in Notes of certain contained constructs.  For
     *     some languages, the appropriate readingorder is righttoleft.  The
     *     default is lefttoright.
     * keepindentation:
     *     The keepindentation value on a <block> becomes the default for any
     *     <block>s or <par>s within that block.  Because the default can be
     *     inherited from an outer element, there is no defined default value
     *     for this attribute.  However, implicitly the default is 'false' for
     *     outermost blocks.
     *     See the keepindentation description for <par> for further details.
     * textpropid:
     *     The propid of a textproperty that specifies text properties for the
     *     entire block.
     *********************************************************************** -->
	<xsd:complexType name="block">
		<xsd:sequence>
			<xsd:element name="font" type="font" minOccurs="0" maxOccurs="1"/>
			<xsd:choice minOccurs="0" maxOccurs="unbounded">
				<xsd:group ref="richtext.block"/>
			</xsd:choice>
		</xsd:sequence>
		<xsd:attribute name="html" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attributeGroup ref="reading.order.attrs"/>
		<xsd:attributeGroup ref="space.attrs"/>
		<xsd:attribute name="textpropid" type="xsd:integer" use="optional"/>
	</xsd:complexType>

	<xsd:attributeGroup name="reading.order.attrs">
		<xsd:attribute name="readingorder" use="optional" default="lefttoright">
			<xsd:simpleType>
				<xsd:restriction base="xsd:string">
					<xsd:enumeration value="righttoleft"/>
					<xsd:enumeration value="lefttoright"/>
				</xsd:restriction>
			</xsd:simpleType>
		</xsd:attribute>
	</xsd:attributeGroup>
	<xsd:attributeGroup name="space.attrs">
		<xsd:attribute name="keepindentation" type="xsd:boolean" use="optional"/>
	</xsd:attributeGroup>

    <!-- **********************************************************************
     * ComplexType:  run
     * Description:  A series of richtext inline content that shares common
     *               formatting characteristics.
     *
     * Attributes:
     * html:
     *     Is the content of the run pass-through HTML?
     * highlight:
     *     Highlighting options for the run.  Value is one of the following:
     *       none    (default)
     *       yellow
     *       pink
     *       blue
     * readingorder:
     *     The reading order of the run in Notes.  For some languages, the
     *     appropriate readingorder is righttoleft.  The default is lefttoright.
     * keepindentation:
     *     Note that if this attribute is not specified on <run>, the
     *     keepindentation value from the closest outer <par> or <block>, if any,
     *     is inherited by the run.
     *     Because the default can be inherited from an outer element, there is
     *     no defined default value for this attribute.  However, implicitly the
     *     default is 'false' if not inherited as 'true'.
     *     See the keepindentation description for <par> for further details.
     *********************************************************************** -->
	<xsd:complexType name="run" mixed="true">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="font" type="font"/>
			<xsd:group ref="richtext.inline"/>
		</xsd:choice>
		<xsd:attribute name="html" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="highlight" type="highlights" use="optional" default="none"/>
		<xsd:attributeGroup ref="reading.order.attrs"/>
		<xsd:attributeGroup ref="space.attrs"/>
	</xsd:complexType>

	<xsd:simpleType name="highlights">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="none"/>
			<xsd:enumeration value="yellow"/>
			<xsd:enumeration value="pink"/>
			<xsd:enumeration value="blue"/>
		</xsd:restriction>
	</xsd:simpleType>

    <!-- **********************************************************************
     * ComplexType:  compositedata
     * Description:  Captures the ODS canonical data for a CD record that is not
     *               handled in the DXL Exporter.  The attributes provide
     *               context to the DXL Importer to insert the CD record in the
     *               proper place.  Applications should not generate
     *               <compositedata> elements, only the DXL Exporter.
     *********************************************************************** -->
	<xsd:complexType name="compositedata">
		<xsd:simpleContent>
			<xsd:extension base="xsd:base64Binary">
				<xsd:attribute name="type" type="xsd:integer" use="optional"/>
				<xsd:attribute name="prevtype" type="xsd:integer" use="optional"/>
				<xsd:attribute name="nexttype" type="xsd:integer" use="optional"/>
				<xsd:attribute name="containertype" type="xsd:integer" use="optional"/>
				<xsd:attribute name="aftercontainercount" type="xsd:integer" use="optional"/>
				<xsd:attribute name="afterbegincount" type="xsd:integer" use="optional"/>
				<xsd:attribute name="afterparcount" type="xsd:integer" use="optional"/>
			</xsd:extension>
		</xsd:simpleContent>
	</xsd:complexType>

    <!-- **********************************************************************
     * ComplexType:  font
     * Description:  Describes text font and properties.  font is not a
     *               container as it is in HTML. It is associated with other
     *               content by being a child of a container.  For example, to
     *               make a run of text red:
     *                 <run><font color='red'/>This is red text.</run>
     *
     * Attributes:
     * name:
     *     The font name.
     * color:
     *     The font color.  See Color Attributes in DXL.
     * size:
     *     The size of the font, in points.
     * style:
     *     A list of zero or more values delimited by white space or commas
     *     that specify the font style, e.g. style='bold italic'.
     *       normal
     *       bold
     *       italic
     *       underline
     *       strikethrough
     *       superscript
     *       subscript
     *       shadow
     *       emboss
     *       extrude
     * pitch:
     * truetype:
     * familyid:
     *     On Notes Client platforms, these attributes can most often be deduced
     *     on import from the font name.  Specify them if you might be importing
     *     on non-Notes, Domino platforms and you want to guarantee consistency
     *     of the resulting data independent of the platform.
     *     pitch may be 'fixed' or 'variable'.
     *     truetype indicates whether this is a TrueType font.
     *     familyid is a hexadecimal value for the font family.  Common possible
     *     values are:
     *       10  Roman
     *       20  Swiss
     *       30  Modern
     *       40  Script
     *       50  Decorative
     *********************************************************************** -->
	<xsd:complexType name="font">
		<xsd:attribute name="name" type="xsd:string" use="optional"/>
		<xsd:attribute name="color" type="xsd:string" use="optional"/>
		<xsd:attribute name="size" type="xsd:string" use="optional"/>
		<xsd:attribute name="style" type="xsd:NMTOKENS" use="optional"/>
		<xsd:attribute name="pitch" type="font.pitches" use="optional"/>
		<xsd:attribute name="truetype" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="familyid" type="noteshex" use="optional"/>
	</xsd:complexType>

	<xsd:simpleType name="font.pitches">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="fixed"/>
			<xsd:enumeration value="variable"/>
		</xsd:restriction>
	</xsd:simpleType>

    <!-- **********************************************************************
     * ComplexType:  par
     * Description:  A paragraph within richtext.
     *
     * Attributes:
     * def:
     *     The id of the pardef element that specifies the format of this
     *     paragraph.  Defaults to the last par def value used at the current
     *     block level.
     * keepindentation:
     *     Note that if this attribute is not specified on <par>, the
     *     keepindentation value from the closest outer <block>, if any, is
     *     inherited by the par.
     *     Because the default can be inherited from an outer element, there is
     *     no defined default value for this attribute.  However, implicitly the
     *     default is 'false' if not inherited as 'true'.
     *     The keepindentation attribute is valid on certain elements that can
     *     contain mixed content, i.e. a combination of
     *     elements and parsed character data.  In a mixed content model,
     *     normally all character data is retained, including extra white
     *     space that may have been intended for readability but not as content.
     *     The purpose of the keepindentation attribute is to allow some
     *     control over how white space within character data is handled.
     *     Namely, it is intended to allow one to introduce extra white space at
     *     the beginning of lines to retain structure and readability of the
     *     source XML, without keeping all of the white space as actual data.
     *     A value of true will keep all of the whitespace.
     *     Specify 'true' for this attribute if you don't want any white
     *     space stripping.  In that case you have to be aware that all white
     *     space (including a newline after the end of one element and before
     *     the start of another element) becomes significant character data.
     *     A value of false (the implied default) specifies to the DXL Importer
     *     to trim whitespace at and after newlines within text according to the
     *     following rules.
     *     White space characters are space, tab, and newline.
     *     Whitespace sequences consist of only white space characters.
     *     Character data is scanned for newlines.  When a newline is found,
     *     the "newline whitespace sequence" consisting of the newline, plus
     *     any contiguous white space AFTER the newline (which might include
     *     additional newlines) is handled as follows:
     *     - If the newline whitespace sequence occurs at the very start of
     *       the character data (i.e. no characters, not even spaces or tabs,
     *       precede it),
     *       the newline whitespace sequence is completely removed.
     *     - If the newline whitespace sequence occurs at the very end of
     *       the character data (i.e. no more characters follow it),
     *       the newline whitespace sequence is completely removed.
     *     - If the newline whitespace sequence is immediately preceded by one
     *       or more spaces and/or tabs,
     *       the newline whitespace sequence is completely removed.
     *     - Otherwise,
     *       the newline whitespace sequence is replaced by a single space.
     *     In all cases, spaces and tabs immediately BEFORE the newline
     *     whitespace sequence are retained, and remain part of the character
     *     data.  In other words, this feature strips white space at the
     *     beginning of lines, but NOT before the end of lines.
     *     Since it always strips newlines, use a <break/> element instead
     *     where you want a newline to be retained in the character data.
     *     Note that character data can contain more than one newline
     *     whitespace sequence.  The behavior above is applied to each newline
     *     whitespace sequence within the character data (although the first
     *     two bullets, by definition, only apply to the first and last newline
     *     whitespace sequences, respectively).
     *********************************************************************** -->
	<xsd:complexType name="par" mixed="true">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="border" type="border"/>
			<xsd:group ref="richtext.inline"/>
		</xsd:choice>
		<xsd:attribute name="def" type="xsd:NMTOKEN" use="optional"/>
		<xsd:attribute name="regionid" type="xsd:integer" use="optional"/>
		<xsd:attributeGroup ref="space.attrs"/>
	</xsd:complexType>

    <!-- **********************************************************************
     * ComplexType:  pardef
     * Description:  This element specifies a format for paragraphs and other
     *               block-level elements within richtext.  There may be no
     *               more than one pardef with the same id in a richtext
     *               element.  pardef ids are referenced via the par def
     *               and sectiontitle pardef attributes.
     * Notes:        Optional code content with event='hidewhen' specifies a
     *               "hide-when" formula for the paragraph.
     *
     * Attributes:
     * id:
     *     The integer ID of this pardef, unique within a richtext element.
     * align:
     *     Paragraph alignment - one of the following values:
     *       left    Aligns text on the left margin (default).
     *       right   Aligns text on the right margin.
     *       center  Centers text.
     *       full    Aligns text proportionally between the left and right
     *               margins.
     *       none    Turns off word wrapping and displays text on one line.
     * linespacing:
     * spacebefore:
     * spaceafter:
     *     The number of lines of space between paragraphs, before the
     *     paragraph, and after the paragraph, respectively.
     *     Limited to the values 1, 1.5, or 2.
     * leftmargin:
     * rightmargin:
     * firstlineleftmargin:
     *     The left margin of all lines in the paragraph except the first line,
     *     the right margin, and the left margin of the first line in the
     *     paragraph, respectively.
     *     The value is an nonnegative integer immediately followed by an
     *     optional units designator which is required for all values except 0.
     *     The units designator can be one of the following:
     *        in  Inches.
     *        cm  Centimeters.
     *        mm  Millimeters.
     *        pt  Points.
     *        pc  Picas.
     *        %	  Percentage.
     *     Percentages are used for margins that are relative to the current
     *     screen size when displayed; the other units are absolute.
     * tabs:
     *     A list of zero or more values delimited by white space or commas,
     *     each of which is an integer character location optionally prefixed
     *     with an alignment character:
     *       L	left-aligned: text is left justified after tab position
     *                        (this is also the default).
     *       R  right-aligned: text is right justified before tab position.
     *       C  centered: text is centered around tab position.
     *       D  decimal: text is placed so that decimal point is aligned with
     *                   tab position.
     * hide:
     *     A list of zero or more values delimited by white space or commas,
     *     which indicate conditions under which the paragraph should be hidden.
     *       Condition:    Document is:
     *       read          Opened for reading.
     *       edit          Opened for editing.
     *       print         Printed.
     *       copy          Copied to the clipboard.
     *       preview       Previewed for reading.
     *       previewedit   Previewed for editing.
     *       notes         Viewed in any Notes client later than Release 4.6.
     *       web           Viewed through a Web browser.
     *       mobile        Viewed on a mobile device, such as a mobile phone or
     *                     hand-held computer.
     *       embedded      Embedded.
     * newpage:
     *     A value of true causes a page break before the paragraph.
     * keepwithnext:
     *     Should this paragraph and the next be kept on the same page?  This
     *     is not an option for tables in paragraphs, where it is always true.
     * keeptogether:
     *     Should this paragraph be kept unbroken on one page?  This is not an
     *     option for paragraphs in tables, where it is always true.
     * list:
     *     The paragraph uses one of the following list styles:
     *       none        The paragraph does not represent a list (default).
     *       bullet      Bullet.
     *       number      Number.
     *       check       Checkmark.
     *       uncheck     Checkmark.
     *       circle      Circle.
     *       square      Square.
     *       alphaupper  Uppercase alphabetic character.
     *       alphalower  Lowercase alphabetic character.
     *       romanupper  Uppercase Roman numeral.
     *       romanlower  Lowercase Roman numeral.
     * readingorder:
     *     The reading order of the paragraph in Notes.  For some languages,
     *     the appropriate readingorder is righttoleft.  The default is
     *     lefttoright.
     *********************************************************************** -->
	<xsd:complexType name="pardef">
		<xsd:sequence>
			<xsd:element name="code" type="code" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="parstyle" type="parstyle" minOccurs="0" maxOccurs="1"/>
		</xsd:sequence>
		<xsd:attribute name="id" type="xsd:NMTOKEN" use="required"/>
		<xsd:attribute name="align" type="pardef.aligns" use="optional" default="left"/>
		<xsd:attribute name="linespacing" type="pardef.linespacings" use="optional" default="1"/>
		<xsd:attribute name="spacebefore" type="pardef.linespacings" use="optional" default="1"/>
		<xsd:attribute name="spaceafter" type="pardef.linespacings" use="optional" default="1"/>
		<xsd:attribute name="leftmargin" type="xsd:string" use="optional"/>
		<xsd:attribute name="rightmargin" type="xsd:string" use="optional"/>
		<xsd:attribute name="firstlineleftmargin" type="xsd:string" use="optional"/>
		<xsd:attribute name="tabs" type="xsd:token" use="optional"/>
		<xsd:attribute name="hide" type="pardef.hide.token" use="optional" default=""/>
		<xsd:attribute name="newpage" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="keepwithnext" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="keeptogether" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="list" type="pardef.list.styles" use="optional" default="none"/>
		<xsd:attributeGroup ref="reading.order.attrs"/>
	</xsd:complexType>

	<xsd:simpleType name="pardef.hide.tokens">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="read"/>
			<xsd:enumeration value="edit"/>
			<xsd:enumeration value="print"/>
			<xsd:enumeration value="copy"/>
			<xsd:enumeration value="preview"/>
			<xsd:enumeration value="previewedit"/>
			<xsd:enumeration value="notes"/>
			<xsd:enumeration value="web"/>
			<xsd:enumeration value="mobile"/>
			<xsd:enumeration value="embedded"/>
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:simpleType name="pardef.hide.token">
		<xsd:list itemType="pardef.hide.tokens"/>
	</xsd:simpleType>

	<xsd:simpleType name="pardef.aligns">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="left"/>
			<xsd:enumeration value="right"/>
			<xsd:enumeration value="center"/>
			<xsd:enumeration value="full"/>
			<xsd:enumeration value="none"/>
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:simpleType name="pardef.linespacings">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="1"/>
			<xsd:enumeration value="1.5"/>
			<xsd:enumeration value="2"/>
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:simpleType name="pardef.list.styles">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="none"/>
			<xsd:enumeration value="bullet"/>
			<xsd:enumeration value="number"/>
			<xsd:enumeration value="check"/>
			<xsd:enumeration value="uncheck"/>
			<xsd:enumeration value="circle"/>
			<xsd:enumeration value="square"/>
			<xsd:enumeration value="alphaupper"/>
			<xsd:enumeration value="alphalower"/>
			<xsd:enumeration value="romanupper"/>
			<xsd:enumeration value="romanlower"/>
		</xsd:restriction>
	</xsd:simpleType>

    <!-- **********************************************************************
     * ComplexType:  parstyle
     * Description:  Paragraph styles are a mechanism to save combinations of
     *               paragraph and text properties that are used regularly.
     *               They are used within pardefs which define paragraph
     *               formatting.
     *
     * Attributes:
     * name:
     *     The style name.
     * incyclekey:
     *     Assign style to cycle key (F11)?
     * alldocuments:
     *     Make style available for all documents?
     * username:
     *     If alldocuments is true, this is the username (abbreviated common
     *     name) who created the style.
     *********************************************************************** -->
	<xsd:complexType name="parstyle">
		<xsd:sequence>
			<xsd:element name="font" type="font" minOccurs="0" maxOccurs="1"/>
		</xsd:sequence>
		<xsd:attribute name="name" type="xsd:string" use="required"/>
		<xsd:attribute name="incyclekey" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="alldocuments" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="username" type="xsd:string" use="optional"/>
	</xsd:complexType>

    <!-- **********************************************************************
     * ComplexType:  table
     * Description:  Represents a rich text table.
     *
     * Attributes:
     * widthtype:
     *  The table's width type property. See table.widthtypes for a description
     *  of possible values.
     * minrowheight:
     *  The minimum height of each cell.
     * rowspacing:
     *  The extra space between rows. 
     * columnspacing:
     *  The extra space between columns.
     * cellborderstyle:
     *  The style of the cell borders. See table.cellborderstyles for a
     *  description of possible values.
     * cellbordercolor:
     *  The color of the cell borders.
     * colorstyle:
     *  The table's color style. See table.colorstyles for a description of
     *  possible values.
     * bgcolor:
     *  The background color of the table.
     * altbgcolor:
     *  The alternate background color of the table. Used when the table's color
     *  style is set to anything besides none and solid.
     * leftmargin:
     *  The left margin of the table.
     * rightmargin:
     *  The right margin of the table.
     * refwidth:
     *  Specifies the absolute width of the table. Table margins and column
     *  widths can be specified as absolute values or percentages. The Notes
     *  client always calculates absolute values from the percentages for
     *  display purposes and uses the current screen size as a reference. The
     *  refwidth attribute specifies a reference width for the table that aids 
     *  in making an imported table display exactly the same as one created
     *  with the client.
     * refrightmargin:
     *  The right margin of the page or screen (e.g. when the table was last
     *  saved in the Notes Client).  Assures that if a table is exported and
     *  re-imported, it will be visually identical to the original.  Only used
     *  for non-nested, fixed width tables with percentage left margins.
     * r4spacing:
     *  DEPRECATED.  Replaced in 7.0 by the table attribute user4spacing.
     *  7.0+ Exporter no longer emits this attribute, and no longer does any
     *  conversion of pardef margins to absolute values as described below.
     *  7.0+ Importer still supports this attribute for backward compatibility.
     *  When true, specifies that the table uses R4 spacing rules.
     *  When r4spacing='true', the margins of all <pardef>s contained within the table
     *  are ABSOLUTE values (i.e. relative to the left edge of the entire document).
     *  Normally, the margins of all <pardef>s contained within tables are RELATIVE
     *  values which are offsets from the left edge of the table cell.
     *  r4spacing affects <tablecolumn>s as well - see the refwidth attribute.
     *  r4spacing is ignored for fixedright or fixedcenter tables, which did not exist in
     *  R4.
     * user4spacing:
     *  Make your tables compatible with Notes R4.  Tables in R6 or later are
     *  smaller than tables in R4.
     * rowdisplay:
     *  The table's row display property. See table.rowdisplays for a
     *  description of possible values.
     * rowtimer:
     *  The number of milliseconds each row should be displayed. Only valid if
     *  the rowdisplay attribute is set to timer, onclicktimer, or onopentimer. 
     * sizetabsequally:
     *  Size tabs in a tabular table equally?
     * firsttabindent:
     *  The indentation of the first tab in pixels.
     * tablocation:
     *  The location of the tabs in a table. See table.tablocations for a
     *  description of possible values. 
     * outsidewrap:
     *  Wrap text around the outside of the table? Only valid for fixed width
     *  tables.
     * insidewrap:
     *  Wrap text between cells?
     * insidewrapheight:
     *  The height at which text flows between the columns.
     *********************************************************************** -->
	<xsd:complexType name="table">
		<xsd:sequence>
			<xsd:element name="tablerowstyle" type="tablerowstyle" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="border" type="border" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="tablecolumn" type="tablecolumn" minOccurs="0" maxOccurs="unbounded"/>
			<xsd:element name="tablerow" type="tablerow" minOccurs="0" maxOccurs="unbounded"/>
		</xsd:sequence>
		<xsd:attribute name="widthtype" type="table.widthtypes" use="optional"/>
		<xsd:attribute name="minrowheight" type="xsd:string" use="optional" default="0"/>
		<xsd:attribute name="rowspacing" type="xsd:string" use="optional" default="0"/>
		<xsd:attribute name="columnspacing" type="xsd:string" use="optional" default="0"/>
		<xsd:attribute name="cellborderstyle" type="table.cellborderstyles" use="optional" default="solid"/>
		<xsd:attribute name="cellbordercolor" type="xsd:string" use="optional" default="none"/>
		<xsd:attribute name="colorstyle" type="table.colorstyles" use="optional" default="none"/>
		<xsd:attribute name="bgcolor" type="xsd:string" use="optional"/>
		<xsd:attribute name="altbgcolor" type="xsd:string" use="optional"/>
		<xsd:attribute name="leftmargin" type="xsd:string" use="optional" default="1in"/>
		<xsd:attribute name="rightmargin" type="xsd:string" use="optional" default="100%"/>
		<xsd:attribute name="refwidth" type="xsd:string" use="optional"/>
		<xsd:attribute name="refrightmargin" type="xsd:string" use="optional"/>
		<xsd:attribute name="r4spacing" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="user4spacing" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="rowdisplay" type="table.rowdisplays" use="optional" default="all"/>
		<xsd:attribute name="rowtimer" type="xsd:integer" use="optional"/>
		<xsd:attribute name="sizetabsequally" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="firsttabindent" type="xsd:string" use="optional"/>
		<xsd:attribute name="tablocation" type="table.tablocations" use="optional"/>
		<xsd:attribute name="outsidewrap" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="insidewrap" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="insidewrapheight" type="xsd:string" use="optional"/>
		<xsd:attributeGroup ref="html.core.attrs"/>
		<xsd:attributeGroup ref="direction.attrs"/>
	</xsd:complexType>

<!-- **********************************************************************
     * SimpleType:   table.widthtypes
     * Description:  Enumerates all possible values for the table 
     *               element's widthtype attribute.
     *********************************************************************** -->
	<xsd:simpleType name="table.widthtypes">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="fixedleft"/>
			<xsd:enumeration value="fixedcenter"/>
			<xsd:enumeration value="fixedright"/>
			<xsd:enumeration value="fitmargins"/>
			<xsd:enumeration value="fitwindow"/>
		</xsd:restriction>
	</xsd:simpleType>

<!-- **********************************************************************
     * SimpleType:   table.cellborderstyles
     * Description:  Enumerates all possible values for the table 
     *               element's cellborderstyle attribute.
     *********************************************************************** -->
	<xsd:simpleType name="table.cellborderstyles">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="solid"/>
			<xsd:enumeration value="ridge"/>
			<xsd:enumeration value="groove"/>
		</xsd:restriction>
	</xsd:simpleType>

<!-- **********************************************************************
     * SimpleType:   table.colorstyles
     * Description:  Enumerates all possible values for the table 
     *               element's colorstyle attribute.
     *********************************************************************** -->
	<xsd:simpleType name="table.colorstyles">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="none"/>
			<xsd:enumeration value="solid"/>
			<xsd:enumeration value="altrows"/>
			<xsd:enumeration value="altcolumns"/>
			<xsd:enumeration value="lefttop"/>
			<xsd:enumeration value="left"/>
			<xsd:enumeration value="righttop"/>
			<xsd:enumeration value="right"/>
			<xsd:enumeration value="top"/>
		</xsd:restriction>
	</xsd:simpleType>

<!-- **********************************************************************
     * SimpleType:   table.rowdisplays
     * Description:  Enumerates all possible values for the table 
     *               element's rowdisplay attribute.
     *********************************************************************** -->
	<xsd:simpleType name="table.rowdisplays">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="all"/>
			<xsd:enumeration value="tabs"/>
			<xsd:enumeration value="timer"/>
			<xsd:enumeration value="onclick"/>
			<xsd:enumeration value="compute"/>
			<xsd:enumeration value="tabscompute"/>
			<xsd:enumeration value="onclicktimer"/>
			<xsd:enumeration value="onopentimer"/>
			<xsd:enumeration value="captions"/>
		</xsd:restriction>
	</xsd:simpleType>

<!-- **********************************************************************
     * SimpleType:   table.tablocations
     * Description:  Enumerates all possible values for the table 
     *               element's tablocation attribute.
     *********************************************************************** -->
	<xsd:simpleType name="table.tablocations">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="top"/>
			<xsd:enumeration value="left"/>
			<xsd:enumeration value="bottom"/>
			<xsd:enumeration value="right"/>
		</xsd:restriction>
	</xsd:simpleType>

    <!-- **********************************************************************
     * attributeGroup:  html.core.attrs
     * Description:  These attributes appear on many elements. If you are
     *               designing a Web application and are using HTML 4.0, these
     *               let you apply core attributes that are common to a number
     *               of Web objects, such as Cascading Style Sheet (CSS),
     *               easily. Domino incorporates the values of these attributes
     *               in the HTML that it creates at runtime. 
     *
     * Attributes:
     * htmlid:
     *     References an object using JavaScript or CSS.
     * htmlclass:
     *     Applies a CSS class for a defined object. For example, if the
     *     object's name is ZipCode, the class could be Numeric. CSS styles are
     *     defined in the HTML Head Content event for a form or page.
     * htmlstyle:
     *     Applies a specific CSS style to an object using in-line CSS. For
     *     example, if the object's name is ZipCode, the class is Numeric, the
     *     style could be font-size:10pt. If you have more then one value,
     *     separate them with a semi-colon; for example, font-size:10pt;
     *     color:blue.
     * htmltitle:
     *     A tip or prompt displayed by the Web browser. For example, if the
     *     object's name is ZipCode, the class is Numeric, the title could be
     *     Enter your Zip Code. The title displays differently on different
     *     browsers.
     * extrahtmlattrs:
     *     Adds other HTML tag attributes, and must be written as pure HTML
     *     code. For example, instead of using htmlid='ZipCode', you use
     *     extrahtmlattrs='ID="ZipCode"'.
     *********************************************************************** -->
	<xsd:attributeGroup name="html.core.attrs">
		<xsd:attribute name="htmlid" type="xsd:string" use="optional"/>
		<xsd:attribute name="htmlclass" type="xsd:string" use="optional"/>
		<xsd:attribute name="htmlstyle" type="xsd:string" use="optional"/>
		<xsd:attribute name="htmltitle" type="xsd:string" use="optional"/>
		<xsd:attribute name="extrahtmlattrs" type="xsd:string" use="optional"/>
	</xsd:attributeGroup>

	<xsd:attributeGroup name="direction.attrs">
		<xsd:attribute name="direction" use="optional" default="lefttoright">
			<xsd:simpleType>
				<xsd:restriction base="xsd:string">
					<xsd:enumeration value="righttoleft"/>
					<xsd:enumeration value="lefttoright"/>
				</xsd:restriction>
			</xsd:simpleType>
		</xsd:attribute>
	</xsd:attributeGroup>
	<xsd:complexType name="tablerowstyle">
		<xsd:sequence>
			<xsd:element name="font" type="font"/>
		</xsd:sequence>
	</xsd:complexType>

    <!-- **********************************************************************
     * ComplexType:  tablecolumn
     * Description:  Describes characteristics of a single table column.
     *
     * Attributes:
     * sizetofit:
     *     Size column to fit content.
     * refwidth:
     *     DEPRECATED.  Replaced in 7.0 by the table attribute refwidth.
     *     7.0+ Exporter no longer emits this attribute.
     *     7.0+ Importer still supports this attribute for backward compatibility.
     *     This attribute only applies to a table with r4spacing='true' and with a
     *     widthtype other than fixedright or fixedcenter.  Further, it only applies if the
     *     tablecolumn width attribute is expressed as a percentage.  See the comment on
     *     the table r4spacing attribute.  Because <pardef>s within R4 spacing tables use
     *     absolute margin values, the table column needs a "reference width" that is
     *     consistent with those values.  This allows the DXL Importer to make the
     *     necessary adjustments.  This is analagous to the Notes Client, which has a frame
     *     of reference which is the current screen size to use as a basis for the table
     *     cell widths, and adjusts the values when the screen size changes.
     *********************************************************************** -->
	<xsd:complexType name="tablecolumn">
		<xsd:attribute name="width" type="xsd:string" use="optional"/>
		<xsd:attribute name="sizetofit" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="refwidth" type="xsd:string" use="optional"/>
	</xsd:complexType>

	<!-- **********************************************************************
     * ComplexType:  tablerow
     * Description:  Describes a row in the table.
     *
     * Attributes:
	 * name: TBS
	 * tablabel: TBS
	 *********************************************************************** -->
	<xsd:complexType name="tablerow">
		<xsd:sequence>
			<xsd:element name="tablecell" type="tablecell" minOccurs="0" maxOccurs="unbounded"/>
		</xsd:sequence>
		<xsd:attribute name="name" type="xsd:string" use="optional"/>
		<xsd:attribute name="tablabel" type="xsd:string" use="optional"/>
	</xsd:complexType>

	<!-- **********************************************************************
	 * ComplexType: tablecell
	 * Description: describes the characteristics of a cell in the table
	 *
	 * Attributes:
	 * bgcolor: TBS
	 * rowspan: TBS
	 * columnspan: TBS
	 * colorstyle: TBS
	 * altbgcolor: TBS
	 * valign: TBS
	 * borderwidth: TBS
	 * rowheader:
	 *		true indicates that this table acts as the header for one or more rows.	  
	 * columnheader:
	 *		true indicates that this table acts as the header for one or more columns.	  
	 * transition: TBS
	 *********************************************************************** -->
	<xsd:complexType name="tablecell">
		<xsd:sequence>
			<xsd:element name="cellbackground" type="cellbackground" minOccurs="0" maxOccurs="1"/>
			<xsd:choice minOccurs="0" maxOccurs="unbounded">
				<xsd:group ref="richtext.block"/>
			</xsd:choice>
		</xsd:sequence>
		<xsd:attribute name="bgcolor" type="xsd:string" use="optional"/>
		<xsd:attribute name="rowspan" type="xsd:integer" use="optional" default="1"/>
		<xsd:attribute name="columnspan" type="xsd:integer" use="optional" default="1"/>
		<xsd:attribute name="colorstyle" type="tablecell.color.styles" use="optional"/>
		<xsd:attribute name="altbgcolor" type="xsd:string" use="optional"/>
		<xsd:attribute name="valign" type="vertical.aligns" use="optional"/>
		<xsd:attribute name="borderwidth" type="xsd:string" use="optional" default="1px"/>
		<xsd:attribute name="rowheader" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="columnheader" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="transition" type="tablecell.transitions" use="optional" default="none"/>
		<xsd:attributeGroup ref="html.core.attrs"/>
	</xsd:complexType>
	<xsd:simpleType name="tablecell.color.styles">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="solid"/>
			<xsd:enumeration value="vgradient"/>
			<xsd:enumeration value="hgradient"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="vertical.aligns">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="top"/>
			<xsd:enumeration value="center"/>
			<xsd:enumeration value="bottom"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="tablecell.transitions">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="none"/>
			<xsd:enumeration value="rolling"/>
			<xsd:enumeration value="lefttoright"/>
			<xsd:enumeration value="toptobottom"/>
			<xsd:enumeration value="wipe"/>
			<xsd:enumeration value="boxes"/>
			<xsd:enumeration value="explode"/>
			<xsd:enumeration value="dissolve"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:complexType name="cellbackground">
		<xsd:choice minOccurs="0" maxOccurs="1">
			<xsd:element name="gif" type="gif"/>
			<xsd:element name="jpeg" type="jpeg"/>
			<xsd:element name="notesbitmap" type="xsd:base64Binary"/>
			<xsd:element name="cgm" type="cgm"/>
			<xsd:element name="imageref" type="imageref"/>
		</xsd:choice>
		<xsd:attribute name="repeat" type="cellbackground.repeats" use="optional"/>
	</xsd:complexType>

    <!-- **********************************************************************
     * ComplexType:  section
     * Description:  You can use sections in richtext to collapse one or more
     *               block-level richtext elements into a single line.  When
     *               editing the richtext, you can expand the section when
     *               necessary by clicking on the triangle, or twistie, that
     *               appears to the left of a collapsed section.  Sections are
     *               useful for organizing documents that contain a lot of
     *               information.
     * Notes:        Optional code content with event='defaultvalue' specifies
     *               a formula to compute the names of users who can edit the
     *               fields in a controlled-access section. Other users only
     *               have reader access to the section. However, this
     *               specification does not override the access control list for
     *               the database.  The formula must evaluate to a name or a
     *               list of names.
     *
     * Attributes:
     * onread:
     * onedit:
     * onpreview:
     * onprint:
     *     A list of zero or more values delimited by white space or commas,
     *     which indicate how to render the section when reading, editing,
     *     previewing, and printing, respectively.  By default, a section will
     *     display as it was saved.
     *       expand         Expand the section.
     *       collapse       Collapse the section.
     *       editorexpand   For section editors in controlled-access sections
     *                      only: Expand the section.
     *       editorcollape  For section editors in controlled-access sections
     *                      only: Collapse the section.
     * expanded:
     *     Is this section currently expanded?
     * showastext:
     *     Show as text when not previewing.
     * accessfieldkind:
     *     Type of field specified by accessfieldname.  For controlled-access
     *     sections only.
     * accessfieldname:
     *     Access list field name for R3 compatibility.  For controlled-access
     *     sections only.  On import operations, if this is not specified, a
     *     name will be generated based on the sectiontitle text.
     *********************************************************************** -->
	<xsd:complexType name="section">
		<xsd:sequence>
			<xsd:element name="sectiontitle" type="sectiontitle" minOccurs="1" maxOccurs="unbounded"/>
			<xsd:element name="code" type="code" minOccurs="0" maxOccurs="1"/>
			<xsd:choice minOccurs="0" maxOccurs="unbounded">
				<xsd:group ref="richtext.block"/>
			</xsd:choice>
		</xsd:sequence>
		<xsd:attribute name="onread" type="xsd:token" use="optional" default=""/>
		<xsd:attribute name="onedit" type="xsd:token" use="optional" default=""/>
		<xsd:attribute name="onpreview" type="xsd:token" use="optional" default=""/>
		<xsd:attribute name="onprint" type="xsd:token" use="optional" default=""/>
		<xsd:attribute name="expanded" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="showastext" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="accessfieldkind" type="field.kinds" use="optional"/>
		<xsd:attribute name="accessfieldname" type="xsd:string" use="optional"/>
	</xsd:complexType>
	<xsd:simpleType name="field.kinds">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="editable"/>
			<xsd:enumeration value="computed"/>
			<xsd:enumeration value="computedfordisplay"/>
			<xsd:enumeration value="computedwhencomposed"/>
		</xsd:restriction>
	</xsd:simpleType>

    <!-- **********************************************************************
     * ComplexType:  sectiontitle
     * Description:  Specifies the title of a section and its display
     *               characteristics.
     * Notes:        Contains either text content for the section title or
     *               code content with event='value' which specifies a formula
     *               from which the section title is computed.
     *
     * Attributes:
     * pardef:
     *     The id of the pardef element that specifies the format of the section
     *     title.  Defaults to the last par def value used at the current block
     *     level.
     * color:
     *     The color of the section title border.  If not specified, Notes
     *     defaults to dark cyan.  Note that the section title text color is
     *     specified via a font child element.
     * borderstyle:
     *     Style of the border around the section title.  One of:
     *       none           No border.
     *       single         Single width line.
     *       double         Double width line.
     *       triple         Triple width line.
     *       shadow         Square border with shadow effect.
     *       twoline        Two single width lines.
     *       windowcaption  Similar to the title bar on a window.
     *       gradient       Gradient from specified color to white.
     *       tab            Similar to a page from a tabbed dialog.
     *       tabdiag        As above, but with a diagonal edge on the tab.
     * hidewhenexpanded:
     *     Hide title of section when the section is expanded.
     * textpropid:
     *********************************************************************** -->
	<xsd:complexType name="sectiontitle">
		<xsd:sequence>
			<xsd:element name="font" type="font" minOccurs="0" maxOccurs="1"/>
			<xsd:choice>
				<xsd:element name="text" type="text"/>
				<xsd:element name="code" type="code"/>
			</xsd:choice>
		</xsd:sequence>
		<xsd:attribute name="pardef" type="xsd:NMTOKEN" use="optional"/>
		<xsd:attribute name="color" type="xsd:string" use="optional"/>
		<xsd:attribute name="borderstyle" type="section.border.styles" use="optional" default="none"/>
		<xsd:attribute name="hidewhenexpanded" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="textpropid" type="xsd:integer" use="optional"/>
	</xsd:complexType>
	<xsd:simpleType name="section.border.styles">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="none"/>
			<xsd:enumeration value="single"/>
			<xsd:enumeration value="double"/>
			<xsd:enumeration value="triple"/>
			<xsd:enumeration value="shadow"/>
			<xsd:enumeration value="twoline"/>
			<xsd:enumeration value="windowcaption"/>
			<xsd:enumeration value="gradient"/>
			<xsd:enumeration value="tab"/>
			<xsd:enumeration value="tabdiag"/>
		</xsd:restriction>
	</xsd:simpleType>

    <!-- **********************************************************************
     * ComplexType:  formregionbegin
     * Description:  Delimits the start of a region within a form body.
     *
     * Attributes:
     * type:
     *      Indicates the type of region: header or body.
     *
     * The remaining attributes are valid only for the header region
     * (type='header').
     *
     * sizetofit:
     *      When true, the region is sized to fit the region's content.
     *      This overrides any value for the height attribute.
     * height:
     *      The height of the region in pixels or as a percentage.
     * border3d:
     *      Specifies 3D shading for the border separating the regions.
     * borderwidth:
     *      The width of the border, in pixels.
     * bordercolor:
     *      The color of the border.
     * scrolling:
     *      Specifies whether the region should be scrollable.
     * noresize:
     *      Specifies whether the region should be resizable.  The default
     *      value of 'false' means it is resizable.
     *********************************************************************** -->
	<xsd:simpleType name="formregion.types">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="header"/>
			<xsd:enumeration value="body"/>
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:simpleType name="formregion.scrolling.values">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="always"/>
			<xsd:enumeration value="never"/>
			<xsd:enumeration value="auto"/>
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:complexType name="formregionbegin">
		<xsd:attribute name="type" type="formregion.types" use="required"/>
		<xsd:attribute name="sizetofit" type="xsd:boolean" use="optional" default="true"/>
		<xsd:attribute name="height" type="xsd:string" use="optional"/>
		<xsd:attribute name="border3d" type="xsd:boolean" use="optional" default="true"/>
		<xsd:attribute name="borderwidth" type="xsd:string" use="optional" default="0px"/>
		<xsd:attribute name="bordercolor" type="xsd:string" use="optional" default="black"/>
		<xsd:attribute name="scrolling" type="formregion.scrolling.values" use="optional" default="never"/>
		<xsd:attribute name="noresize" type="xsd:boolean" use="optional" default="false"/>
	</xsd:complexType>

    <!-- **********************************************************************
     * ComplexType:  formregionend
     * Description:  Delimits the end of a region within a form body.
     *               Must equal the type of the matching <formregionbegin>.
     *
     * Attributes:
     * type:
     *      Indicates the type of region: header or body.
     *********************************************************************** -->
	<xsd:complexType name="formregionend">
		<xsd:attribute name="type" type="formregion.types" use="required"/>
	</xsd:complexType>

    <!-- **********************************************************************
     * ComplexType:  break
     * Description:  A line break (hard return) in richtext.
     *********************************************************************** -->
	<xsd:complexType name="break"/>

    <!-- **********************************************************************
     * ComplexType:  computedtext
     * Description:  Text content within richtext that is computed from a
     *               formula.
     * Notes:        Optional code content with event='value' specifies a
     *               formula to compute the text value.
     *
     * Attributes:
     * htmlid, htmlclass, htmlstyle, htmltitle, extrahtmlattrs:
     *     See comments for attributeGroup html.core.attrs.
     *********************************************************************** -->
	<xsd:complexType name="computedtext">
		<xsd:sequence>
			<xsd:element name="code" type="code" minOccurs="0" maxOccurs="1"/>
		</xsd:sequence>
		<xsd:attributeGroup ref="html.core.attrs"/>
	</xsd:complexType>

<!-- **********************************************************************
     * ComplexType:		horizrule
     * Description:		Horizontal rules can be used in a document to separate
	 *					different parts of a document, or to make a document
	 *					visually interesting.
	 *
	 * Attributes:
	 * height:
	 *		The height of the horizontal rule in inches.
	 * width:
	 *		The width of the horizontal rule can be defined in either (Fixed width) inches or a percentage.
	 *		Fixed width sets the horizontal rule to the specified number of inches, regardless of the width
	 *		of the document.  Percent specifies the percentage of the horizontal rule's width to use.
	 * color:
	 *		The fill color of the horizontal rule.
	 * colorstyle:
	 *		DEPRECATED
	 * gradientcolor:
	 *		Gradient color is color that blends and fades into another color within a horizontal rule.
	 * use3dshading:
	 *		TRUE if shading is desired around the horizontal rule.  FALSE to have a flat border around the 
	 *		horizontal rule.	
     *********************************************************************** -->
	<xsd:complexType name="horizrule">
		<xsd:attribute name="height" type="xsd:string" use="optional" default=".0729in"/>
		<xsd:attribute name="width" type="xsd:string" use="optional" default="100%"/>
		<xsd:attribute name="color" type="xsd:string" use="optional"/>
		<xsd:attribute name="colorstyle" type="horizrule.color.styles" use="optional" default="solid"/>
		<xsd:attribute name="gradientcolor" type="xsd:string" use="optional"/>
		<xsd:attribute name="use3dshading" type="xsd:boolean" use="optional" default="true"/>
<!-- **********************************************************************
     * AttributeGroup:	html.core.attrs
     * Description:		Attributes that appear on many properties boxes containing
	 *					HTML tag information.
     *********************************************************************** -->
		<xsd:attributeGroup ref="html.core.attrs"/>
	</xsd:complexType>
<!-- **********************************************************************
     * SimpleType:   horizrule.color.styles
     * Description:  DEPRECATED
     *********************************************************************** -->
	<xsd:simpleType name="horizrule.color.styles">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="solid"/>
			<xsd:enumeration value="vgradient"/>
		</xsd:restriction>
	</xsd:simpleType>

    <!-- **********************************************************************
     * ComplexType:  span
     * Description:  Contains an arbitrary region of richtext content that has
     *               the text properties specified by a textproperty element.
     *
     * Attributes:
     * propid:
     *     Uniquely references a specific textproperty element in the note.
     * regionid:
     *     See comments for the region element.
     *********************************************************************** -->
	<xsd:complexType name="span" mixed="true">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:group ref="richtext.inline"/>
		</xsd:choice>
		<xsd:attribute name="propid" type="xsd:integer" use="required"/>
		<xsd:attribute name="regionid" type="xsd:integer" use="optional"/>
	</xsd:complexType>

<!-- **********************************************************************
     * ComplexType:		picture
     * Description:		A picture can hold one of the following image formats:
	 *					- GIF image content
	 *					- JPEG image content
	 *					- PNG image content
	 *					- computer graphics metafile
	 *					- proprietary notes bitmap image content, which is base64 data representing a series 
	 *					  of CD records making up the bitmap
	 *					These images can have border information, a caption and one or more code events attached.
	 *
	 * Attributes:
	 *	height:
	 *		The height of the graphic in pixels.
	 *	width:
	 *		The width of the graphic in pixels.
	 *	scaledheight:
	 *		The height of the image in twips.
	 *	scaledwidth:
	 *		The width of the image in twips.
	 *	alttext:
	 *		Alternate text for HTML Web browsers.
	 *	align:
	 *		Alignment of picture.
	 *
     *********************************************************************** -->
	<xsd:complexType name="picture">
		<xsd:sequence>
			<xsd:element name="border" type="border" minOccurs="0" maxOccurs="1"/>
			<xsd:choice minOccurs="0" maxOccurs="1">
				<xsd:element name="gif" type="gif"/>
				<xsd:element name="png" type="png"/>
				<xsd:element name="jpeg" type="jpeg"/>
				<xsd:element name="notesbitmap" type="xsd:base64Binary"/>
				<xsd:element name="cgm" type="cgm"/>
				<xsd:element name="imageref" type="imageref"/>
				<xsd:element name="nativeimage" type="nativeimage"/>
				<xsd:element name="bitmap" type="xsd:base64Binary"/>
			</xsd:choice>
			<xsd:element name="caption" type="caption" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="code" type="code" minOccurs="0" maxOccurs="unbounded"/>
		</xsd:sequence>
		<xsd:attribute name="height" type="xsd:string" use="optional"/>
		<xsd:attribute name="width" type="xsd:string" use="optional"/>
		<xsd:attribute name="scaledheight" type="xsd:string" use="optional"/>
		<xsd:attribute name="scaledwidth" type="xsd:string" use="optional"/>
		<xsd:attribute name="alttext" type="xsd:string" use="optional"/>
		<xsd:attribute name="align" type="picture.aligns" use="optional" default="baseline"/>
<!-- **********************************************************************
     * AttributeGroup:	html.core.attrs
     * Description:		Attributes that appear on many properties boxes containing
	 *					HTML tag information.
     *********************************************************************** -->
		<xsd:attributeGroup ref="html.core.attrs"/>
		<xsd:attribute name="name" type="xsd:string" use="optional"/>
	</xsd:complexType>
<!-- **************************************************************************
	 * SimpleType:	picture.aligns
	 * Description:	Enumerates all possible values for picture alignments
	 **************************************************************************-->
	<xsd:simpleType name="picture.aligns">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="around"/>
			<xsd:enumeration value="left"/>
			<xsd:enumeration value="right"/>
			<xsd:enumeration value="bottom"/>
			<xsd:enumeration value="middle"/>
			<xsd:enumeration value="top"/>
			<xsd:enumeration value="baseline"/>
		</xsd:restriction>
	</xsd:simpleType>
<!-- **************************************************************************
	 * ComplexType:		gif
	 * Description:		represents GIF image content
	 *
	 * Attributes:
	 *	originalformat:	
	 *
	 * Comments:   gif is actually base64Binary, but we need DXL allows it empty
	 *             so use the type xsd:normalizedString here;
	 *             the data's validation check will be in the importer.
	 *
	 *********************************************************************** -->
	<xsd:complexType name="gif">
		<xsd:simpleContent>
			<xsd:extension base="xsd:normalizedString">
				<xsd:attribute name="originalformat" type="image.original.formats" use="optional"/>
			</xsd:extension>
		</xsd:simpleContent>
	</xsd:complexType>
<!-- ************************************************************************
	 * SimpleType:	image.original.formats
	 * Description:	Enumerates the value vaild for original format.
	 ************************************************************************ -->
	<xsd:simpleType name="image.original.formats">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="notesbitmap"/>
		</xsd:restriction>
	</xsd:simpleType>
<!-- *********************************************************************
	 * ComplexType:		jpeg
	 * Description:		represents JPEG image content
	 * Attributes:
	 *	originalformat:
	 *
	 ************************************************************************** -->
	<xsd:complexType name="jpeg">
		<xsd:simpleContent>
			<xsd:extension base="xsd:base64Binary">
				<xsd:attribute name="originalformat" type="image.original.formats" use="optional"/>
			</xsd:extension>
		</xsd:simpleContent>
	</xsd:complexType>
 <!-- *********************************************************************
	 * ComplexType:		png
	 * Description:		represents PNG image content
	 * Attributes:
	 *	originalformat:
	 *
	 ************************************************************************** -->
  <xsd:complexType name="png">
    <xsd:simpleContent>
      <xsd:extension base="xsd:base64Binary">
        <xsd:attribute name="originalformat" type="image.original.formats" use="optional"/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>
<!-- ****************************************************************************
	 * ComplexType:		cgm
	 * Description:		represents a Computer Graphics Metafile
	 *
	 * Attributes:
	 *	heigth:			height of cgm in twips
	 *	width:			width of cgm in twips
	 *
	 *********************************************************************** -->
	<xsd:complexType name="cgm">
		<xsd:simpleContent>
			<xsd:extension base="xsd:base64Binary">
				<xsd:attribute name="height" type="xsd:string" use="optional"/>
				<xsd:attribute name="width" type="xsd:string" use="optional"/>
			</xsd:extension>
		</xsd:simpleContent>
	</xsd:complexType>

    <!-- **********************************************************************
     * ComplexType:  imageref
     * Description:  A reference to an image resource design element.
     *               Use either the name attribute for a reference by name, or
     *               the <code event='value'> child element for a computed
     *               reference.
     *
     * Attributes:
     * name:
     *     The name of the referenced image resource.
     * database:
     *     The replicaid of the database containing the image resource.
     *     The replicaid is represented as 1 to 16 hexadecimal digits.
     *     The following values are also allowed to reference specific
     *     commonly used databases:
     *     mailfile, addressbook, subscriptions, bookmarks
     * serverhint:
     *     Hint as to server location of database.
     * filehint:
     *     Hint as to file location of database.
     *********************************************************************** -->
	<xsd:complexType name="imageref">
		<xsd:sequence>
			<xsd:element name="code" type="code" minOccurs="0" maxOccurs="1"/>
		</xsd:sequence>
		<xsd:attribute name="name" type="xsd:string" use="optional"/>
		<xsd:attribute name="database" type="xsd:string" use="optional"/>
		<xsd:attribute name="serverhint" type="xsd:string" use="optional"/>
		<xsd:attribute name="filehint" type="xsd:string" use="optional"/>
	</xsd:complexType>

<!-- *************************************************************************
	 * ComplexType:		nativeimage'
	 * Description:	
	 *
	 * Attributes:
	 *	imagetype:		image.type
	 *	imagename:		name of this nativeimage
	 *
	 ********************************************************************** -->	
	<xsd:complexType name="nativeimage">
		<xsd:attribute name="imagetype" type="image.type" use="optional"/>
		<xsd:attribute name="imagename" type="xsd:string" use="optional"/>
	</xsd:complexType>
<!-- **********************************************************************
	 * SimpleType:	image.type
	 * Description:	Enumerates the image type valid for a nativeimage
	 ********************************************************************** -->
	<xsd:simpleType name="image.type">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="gif"/>
			<xsd:enumeration value="jpeg"/>
		</xsd:restriction>
	</xsd:simpleType>
<!-- ***********************************************************************
	 * ComplexType:		caption
	 * Description:		represents addtional data attached to a <picture>
	 *					element
	 * Attributes:
	 *	position:		position of caption, default is below
	 *
	 *********************************************************************** -->	
	<xsd:complexType name="caption">
		<xsd:simpleContent>
			<xsd:extension base="xsd:string">
				<xsd:attribute name="position" type="caption.positions" use="optional" default="below"/>
			</xsd:extension>
		</xsd:simpleContent>
	</xsd:complexType>
<!-- ***********************************************************************
	 * SimpleType:		caption.positions
	 * Description:		Enumerates the valid caption positions.
	 *********************************************************************** -->
	<xsd:simpleType name="caption.positions">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="below"/>
			<xsd:enumeration value="center"/>
		</xsd:restriction>
	</xsd:simpleType>
	<!-- **********************************************************************
	* ComplexType:	doclink
	* Description:	A document link within rich text.  A document link can be either
	*				a HotSpot link or not.  A document link will be classified as a
	*				HotSpot link if it contains any other rich text information other than the 
	*				document link information.  If the link elements contain rich text, 
	*				they represent hotspot links, and can be activated by clicking anywhere in 
	*				the contained rich text.
	*				
	* Attributes:
	*	document:
	*		Universal ID or key of target document (Optional attribute starting V801)
	*	anchor:
	*		For anchor links, name of target <anchor> within target document.
	*	view:
	*		Universal ID or key of view that contains target document (optional).
	*	database:
	*		Replica ID of database containing target document (optional).
	*	server:
	*		Name of server to check for database containing target document (optional).
	*	description:
	*		Description to display in Link Properties infobox (optional).
	*	link.attrs:
	*		See comments for link.attrs
	*
	*********************************************************************** -->
	<xsd:complexType name="doclink" mixed="true">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:group ref="richtext.inline"/>
		</xsd:choice>
		<xsd:attribute name="document" type="xsd:string" use="optional"/>
		<xsd:attribute name="anchor" type="xsd:string" use="optional"/>
		<xsd:attribute name="view" type="xsd:string" use="optional"/>
		<xsd:attribute name="database" type="noteshex" use="optional"/>
		<xsd:attribute name="server" type="xsd:string" use="optional"/>
		<xsd:attribute name="description" type="xsd:string" use="optional"/>
		<xsd:attribute name="href" type="xsd:string" use="optional"/>
		<xsd:attributeGroup ref="link.attrs"/>
	</xsd:complexType>

	<!-- **********************************************************************
     * attributeGroup:  link.attrs
	 * Description:		These attributes appear on link elements such as 
	 *					doclink, databaselink, namedelementlink, viewlink, or urllink.
	 *
	 * Attributes:
	 * showborder:
	 *		Does this hotspot link have a border surrounding the link.
	 * targetframe:
	 *		Either position center or left.
	 * htmlid, htmlclass, htmlstyle, htmltitle, extrahtmlattrs:
     *     See comments for attributeGroup html.core.attrs.
	 * regionid:
     *     See comments for the region element.
	 *********************************************************************** -->
	<xsd:attributeGroup name="link.attrs">
		<xsd:attribute name="showborder" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="targetframe" type="xsd:string" use="optional"/>
		<xsd:attributeGroup ref="html.core.attrs"/>
		<xsd:attribute name="regionid" type="xsd:integer" use="optional"/>
	</xsd:attributeGroup>
	<xsd:complexType name="viewlink" mixed="true">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:group ref="richtext.inline"/>
		</xsd:choice>
		<xsd:attribute name="view" type="xsd:string" use="optional"/>
		<xsd:attribute name="database" type="noteshex" use="optional"/>
		<xsd:attribute name="server" type="xsd:string" use="optional"/>
		<xsd:attribute name="description" type="xsd:string" use="optional"/>
		<xsd:attributeGroup ref="link.attrs"/>
	</xsd:complexType>
	<xsd:complexType name="databaselink" mixed="true">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:group ref="richtext.inline"/>
		</xsd:choice>
		<xsd:attribute name="database" type="noteshex" use="required"/>
		<xsd:attribute name="server" type="xsd:string" use="optional"/>
		<xsd:attribute name="description" type="xsd:string" use="optional"/>
		<xsd:attributeGroup ref="link.attrs"/>
	</xsd:complexType>
	<xsd:complexType name="urllink" mixed="true">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="code" type="code"/>
			<xsd:group ref="richtext.inline"/>
		</xsd:choice>
		<xsd:attribute name="href" type="xsd:string" use="optional"/>
		<xsd:attributeGroup ref="link.attrs"/>
	</xsd:complexType>

    <!-- **********************************************************************
     * ComplexType:  namedelementlink
     * Description:  Represents a link to a named design element.  The element
     *               name can be specified using either the attributes below or
     *               formula(s).  Not all uses of namedelementlinks within Notes
     *               allow the latter two formula events.
     *               Event:              Usage:
     *               value               Name of element.
     *               namedelementkind    Kind of element (Form, Page, etc.)
     *               namedelementdb      Database containing named element.
     *
     * Attributes:
     * name:
     *     Design element name.  Required unless the name is computed by a
     *     formula.
     * type:
     *     Design element type (form, view, etc.).
     * database:
     *     Database containing design element (optional). Can be a replica ID
     *     or a special database keyword.
     *     The replicaid is represented as 1 to 16 hexadecimal digits.
     *     The following values are also allowed to reference specific
     *     commonly used databases:
     *     mailfile, addressbook, subscriptions, bookmarks
     *     If not specified, the current database is implied.
     *********************************************************************** -->
	<xsd:complexType name="namedelementlink" mixed="true">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="code" type="code"/>
			<xsd:group ref="richtext.inline"/>
		</xsd:choice>
		<xsd:attribute name="name" type="xsd:string" use="optional"/>
		<xsd:attribute name="type" type="named.element.link.types" use="required"/>
		<xsd:attribute name="database" type="xsd:string" use="optional"/>
		<xsd:attributeGroup ref="link.attrs"/>
	</xsd:complexType>
	<xsd:simpleType name="named.element.link.types">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="page"/>
			<xsd:enumeration value="form"/>
			<xsd:enumeration value="frameset"/>
			<xsd:enumeration value="view"/>
			<xsd:enumeration value="folder"/>
			<xsd:enumeration value="navigator"/>
			<xsd:enumeration value="unknown"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:complexType name="anchor">
		<xsd:attribute name="name" type="xsd:string" use="required"/>
	</xsd:complexType>

    <!-- **********************************************************************
     * ComplexType:  popup
     * Description:  Popup contains the popuptext that is displayed when a
     *               Text Pop-up Hotspot is activated, or code with
     *               event='value' which specifies a formula that determines
     *               the text to display for a Formula Pop-up Hotspot.  The
     *               richtext and character content is the hotspot text itself.
     *
     * Attributes:
     * show:
     *     Determines when the popup text is displayed.
     *       onmouseover  When the mouse is hovered over the hotspot text (def).
     *       onclick      When the mouse button is clicked on the hotspot text.
     * hotspotstyle:
     *     Determines the visual indication of the hotspot rich text.
     *       border     A border appears around the hotspot text (default).
     *       highlight  The hotspot text is highlighted.
     *       none       No indication.
     * regionid:
     *     See comments for the region element.
     *********************************************************************** -->
	<xsd:complexType name="popup" mixed="true">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="popuptext" type="xsd:string"/>
			<xsd:element name="code" type="code"/>
			<xsd:group ref="richtext.inline"/>
		</xsd:choice>
		<xsd:attribute name="show" type="popup.show.types" use="optional" default="onmouseover"/>
		<xsd:attribute name="hotspotstyle" type="popup.hotspot.styles" use="optional" default="border"/>
		<xsd:attribute name="regionid" type="xsd:integer" use="optional"/>
	</xsd:complexType>
	<xsd:simpleType name="popup.show.types">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="onmouseover"/>
			<xsd:enumeration value="onclick"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="popup.hotspot.styles">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="border"/>
			<xsd:enumeration value="highlight"/>
			<xsd:enumeration value="none"/>
		</xsd:restriction>
	</xsd:simpleType>

    <!-- **********************************************************************
     * ComplexType:  actionhotspot
     * Description:  An Action Hotspot within rich text.  Should contain one or
     *               more code elements which contain the formula, simple
     *               action(s), Lotuscript, or Javascript to execute when the
     *               action hotspot is clicked.  The rich text content
     *               identifies the clickable region of the hotspot.
     *               Code Type:    Valid Events:
     *               formula       click
     *               simpleaction  action
     *               lotusscript   options, declarations, click, objectexecute,
     *                             initialize, terminate, user-defined
     *               javascript    onBlur, onClick, onDblClick, onFocus, onHelp,
     *                             onKeyDown, onKeyPress, onKeyUp, onMouseDown,
     *                             onMouseMove, onMouseOut, onMouseOver,
     *                             onMouseUp
     *
     * Attributes:
     * hotspotstyle:
     *     Determines the visual indication of the hotspot rich text.
     *       border     A border appears around the hotspot text (default).
     *       none       No indication.
     * targetframe:
     *     Target frame in which to display any result from the actionhotspot
     *     code being executed.
     * name:
     *     Name used to reference this object in HTML using JavaScript or CSS.
     * htmlid, htmlclass, htmlstyle, htmltitle, extrahtmlattrs:
     *     See comments for attributeGroup html.core.attrs.
     * regionid:
     *     See comments for the region element.
     *********************************************************************** -->
	<xsd:complexType name="actionhotspot" mixed="true">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="code" type="code"/>
			<xsd:group ref="richtext.inline"/>
		</xsd:choice>
		<xsd:attribute name="hotspotstyle" type="action.hotspot.styles" use="optional" default="border"/>
		<xsd:attribute name="targetframe" type="xsd:string" use="optional"/>
		<xsd:attribute name="name" type="xsd:string" use="optional"/>
		<xsd:attributeGroup ref="html.core.attrs"/>
		<xsd:attribute name="regionid" type="xsd:integer" use="optional"/>
	</xsd:complexType>
	<xsd:simpleType name="action.hotspot.styles">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="border"/>
			<xsd:enumeration value="none"/>
		</xsd:restriction>
	</xsd:simpleType>
    <!-- **********************************************************************
    *   Complex type:  Layer 
    *   Description:   Layer lets you position overlapping blocks of content on a page, form,
    *                  subform. They can be nested within each other  and we have a design
    *                  flexibility as we can control the placement, size and content of information.
	*	Element: 
	*	layerbackground:  
	*                  Referes to image reference within the layer, which can 
	*                  be repeated.
    *	Attributes:
    *	top, left, width, height: 
    *                  Refers to the size/position of the layer 
    *	topunittype, lefunittype, widthunittype, heightunittype: 
    *                  Refers to the units used to refer to the size of top, 
    *                  left, width and height. 
    *                  Valid units are auto, pixels, inches, ems, percent, 
    *                  characters, exs 
    *	zindex:  
    *                  Refers to stacking order of layers. 0 being front of 
    *                  the parent element. Negative values are valid.
    *	backgroundcolor: 
    *                  Refers to background color within the layer.
    *	html.core.attrs: 
    *                  Refers to html attributes within Layer Properties.
     ************************************************************************* -->
	<xsd:complexType name="layer">
		<xsd:sequence>
			<xsd:element name="layerbackground" type="layerbackground" minOccurs="0" maxOccurs="1"/>
			<xsd:choice minOccurs="0" maxOccurs="unbounded">
				<xsd:group ref="richtext.block"/>
			</xsd:choice>			
		</xsd:sequence>
		<xsd:attribute name="top" type="xsd:string" use="optional" default="0"/>
		<xsd:attribute name="topunittype" type="size.types" use="optional" default="auto"/>
		<xsd:attribute name="left" type="xsd:string" use="optional" default="0"/>
		<xsd:attribute name="leftunittype" type="size.types" use="optional"  default="auto"/>
		<xsd:attribute name="width" type="xsd:string" use="optional" default="270"/>
		<xsd:attribute name="widthunittype" type="size.types" use="optional" default="pixels"/>
		<xsd:attribute name="height" type="xsd:string" use="optional" default="135"/>
		<xsd:attribute name="heightunittype" type="size.types" use="optional" default="pixels"/>
		<xsd:attribute name="zindex" type="xsd:integer" use="optional" default="0"/>
		<xsd:attribute name="bgcolor" type="xsd:string" use="optional"/>
		<xsd:attributeGroup ref="html.core.attrs"/>
	</xsd:complexType>

	<xsd:complexType name="layerbackground">
		<xsd:sequence>
			<xsd:element name="imageref" type="imageref" />
		</xsd:sequence>
		<xsd:attribute name="repeat" type="cellbackground.repeats" use="optional"/>
	</xsd:complexType>

	<xsd:simpleType name="size.types">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="pixels"/>
			<xsd:enumeration value="inches"/>
			<xsd:enumeration value="ems"/>
			<xsd:enumeration value="exs"/>
			<xsd:enumeration value="percent"/>
			<xsd:enumeration value="characters"/>
			<xsd:enumeration value="auto"/>
		</xsd:restriction>
	</xsd:simpleType>
    <!-- **********************************************************************
     * ComplexType:  region
     * Description:  Many Notes rich text constructs can span across all or
     *               parts of multiple paragraphs.  Such constructs, when they
     *               do span in this manner, are broken up into multiple pieces
     *               in DXL.  The first piece is the DXL element corresponding
     *               to the construct, such as actionhotspot.  The remaining
     *               pieces are one or more region elements.  These elements are
     *               all "tied together" by means of a regionid attribute whose
     *               value is the same for all pieces of the element, and unique
     *               from any other elements within the same richtext element.
     *
     * Attributes:
     * regionid:
     *     See Description above.
     * end:
     *     A value of true indicates that this is the last region with the
     *     specific regionid within this richtext element.
     *********************************************************************** -->
	<xsd:complexType name="region" mixed="true">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:group ref="richtext.inline"/>
		</xsd:choice>
		<xsd:attribute name="regionid" type="xsd:integer" use="required"/>
		<xsd:attribute name="end" type="xsd:boolean" use="optional" default="false"/>
	</xsd:complexType>
<!-- **********************************************************************
	 * ComplexType:		attachmentref
	 * Description:		A reference to a file attachment.  In practice, the content
	 *					is generally a single <picture>.  It is also possible to have 
	 *  	 			character data content, or a run section to describe properties
	 *					of the caption. An attachment can also carry an anchor 
	 *					within it which is a target location within a document. 
	 *					An anchor reserve the specific location within a target document
	 *					for the link to jump to.
	 * Attributes:
	 *	name:
	 *		The name of the attachment that this <attachmentref> refers to.
	 *		If no path attribute is specified, the note must contain a $FILE
	 *		item representing an attachment with the specified name.
	 *	displayname:
	 *		The attachment filename displayed in the (Attachment Properties infobox).  
	 *		For attachments created by the Notes client, this name is also part of the
	 *		attachment icon.  If not specified, the displayname is derived from the path 
	 *		or name attributes.
	 *	caption:
	 *		Filename or other text appended to the attachment icon.  Text content will override
	 *		any caption data specified.
	 *	path:
	 *		The pathname of a file to attach.  If no path is specified, the name attribute must 
	 *		be specified.
	 *	regionid:
	 *		DEPRECATED
	 *
	 *********************************************************************** -->
	<xsd:complexType name="attachmentref" mixed="true">
		<xsd:sequence>
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="picture" type="picture"/>
			<xsd:element name="anchor" type="anchor"/>
			<xsd:element name="run" type="run"/>
		</xsd:choice>
		</xsd:sequence>
		<xsd:attribute name="name" type="xsd:string" use="optional"/>
		<xsd:attribute name="displayname" type="xsd:string" use="optional"/>
		<xsd:attribute name="caption" type="xsd:string" use="optional"/>
		<xsd:attribute name="path" type="xsd:string" use="optional"/>
	<!--**********************************************************************
		* AttributeName:	regionid
		* Description:		DEPRECATED
		*********************************************************************** -->
		<xsd:attribute name="regionid" type="xsd:integer" use="optional"/>
	</xsd:complexType>

<!-- **********************************************************************
     * ComplexType:     objectref
     * Description:     A reference to an Object or Control within richtext.  The content of this element
     *                  describes the rendering of the object with the client.  The actual data for the
     *                  object is stored in a number of $FILE items; the primary one is specified by the
     *                  name attribute.
     * Attributes:
     * version:
     *     The OLE version number.
     * name:
     *     The name of the primary $FILE item for this object.  This is not
     *     necessarily the same name as the actual file that the object was created from, if
     *     in fact it was created from a file.
     * class:
     *     The object's class name.
     * type:
     *     Identifies the object type.
     * savewhenchanged:
     *     Indicates that changes in the object embedded in a form are to
     *     be saved in the document which uses that form.
     * render:
     *     Specifies whether the object renders itself in the UI.
     * displayformat:
     *     The format used for displaying the object and copying its data to
     *     the clipboard.
     * description:
     *     A text description of the object.
     * classid:
     *     The GUID that identifies the object's class, also called a Class ID or
     *     CLSID.  DXL uses the string format for a GUID, e.g.
     *     {c200e360-38c5-11ce-ae62-08002b2b79ef}
     *     Normally, this is a REQUIRED attribute.  There are some abnormal cases
     *     where this is absent and the objects $FILE items are absent as well.
     * storageformat:
     *     The storage format of the object.
     * scripted:
     *     True if the object contains code.
     * runreadonly:
     *     Specifies whether to run the object when reading the document.  By
     *     default, the object is run when the document is edited.
     * fittowindow:
     *     Specifies whether to size object to fit window.
     * control:
     *     True if the object is a control.
     * fitbelowfields:
     *     Specifies whether to size object to fit below fields.
     *********************************************************************** -->
	<xsd:complexType name="objectref">
		<xsd:sequence>
			<xsd:element name="associatedfiles" type="associatedfiles" minOccurs="0" maxOccurs="1"/>
			<xsd:choice minOccurs="0" maxOccurs="unbounded">
				<xsd:group ref="richtext.nonhot.inline"/>
			</xsd:choice>
		</xsd:sequence>
		<xsd:attribute name="version" type="xsd:integer" use="optional" default="2"/>
		<xsd:attribute name="name" type="xsd:string" use="required"/>
		<xsd:attribute name="class" type="xsd:string" use="optional"/>
		<xsd:attribute name="type" type="objectref.types" use="optional" default="embeddedobject"/>
		<xsd:attribute name="savewhenchanged" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="render" type="xsd:boolean" use="optional" default="true"/>
		<xsd:attribute name="displayformat" type="objectref.display.formats" use="optional" default="metafile"/>
		<xsd:attribute name="description" type="xsd:string" use="optional"/>
		<xsd:attribute name="classid" type="xsd:string" use="optional"/>
		<xsd:attribute name="storageformat" type="objectref.storage.formats" use="optional" default="structstorage"/>
		<xsd:attribute name="scripted" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="runreadonly" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="fittowindow" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="control" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="fitbelowfields" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="regionid" type="xsd:integer" use="optional"/>
		<xsd:attributeGroup ref="html.core.attrs"/>
	</xsd:complexType>

	<xsd:simpleType name="objectref.types">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="autolink"/>
			<xsd:enumeration value="manuallink"/>
			<xsd:enumeration value="embeddedobject"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="objectref.display.formats">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="text"/>
			<xsd:enumeration value="metafile"/>
			<xsd:enumeration value="bitmap"/>
			<xsd:enumeration value="richtext"/>
			<xsd:enumeration value="icon"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="objectref.storage.formats">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="structstorage"/>
			<xsd:enumeration value="istorageistream"/>
			<xsd:enumeration value="structstream"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:complexType name="associatedfiles">
		<xsd:sequence>
			<xsd:element name="fileitemref" type="fileitemref" minOccurs="1" maxOccurs="unbounded"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="fileitemref">
		<xsd:attribute name="name" type="xsd:string" use="required"/>
	</xsd:complexType>

    <!-- **********************************************************************
     * ComplexType:  javaapplet
     * Description:  A Java applet within rich text.  Must contain one code
     *               element which contains a javaproject for the Java code.
     *               May also contain additional formula events.
     *               Code Type:    Valid Events:
     *               formula       htmlattributes, alternatehtml
	 *               javaproject   library (within scriptlibrary)
	 *                             action (elsewhere)
     *
     * Attributes:
     * width, height:
     *     The width and height of the applet when displayed in a GUI.
     *     The value is an nonnegative integer immediately followed by an
     *     optional units designator which defaults to px.
     *     The units designator can be one of the following:
     *        px  Pixels.
     *        %	  Percentage.
     * inactivetext:
     *     Text to display when applet is not running.
     * usescorbaclasses:
     *     Applet uses Notes CORBA classes.
     * usescorbassl:
     *     Applet uses CORBA SSL security.
     * name:
     *     Name used to reference this object in HTML using JavaScript or CSS.
     * htmlid, htmlclass, htmlstyle, htmltitle, extrahtmlattrs:
     *     See comments for attributeGroup html.core.attrs.
     *********************************************************************** -->
	<xsd:complexType name="javaapplet">
		<xsd:sequence>
			<xsd:element name="appletparameters" type="appletparameters" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="code" type="code" minOccurs="1" maxOccurs="unbounded"/>
		</xsd:sequence>
		<xsd:attribute name="width" type="xsd:string" use="optional"/>
		<xsd:attribute name="height" type="xsd:string" use="optional"/>
		<xsd:attribute name="inactivetext" type="xsd:string" use="optional"/>
		<xsd:attribute name="usescorbaclasses" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="usescorbassl" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="name" type="xsd:string" use="optional"/>
		<xsd:attributeGroup ref="html.core.attrs"/>
	</xsd:complexType>

    <!-- **********************************************************************
     * ComplexType:  appletparameters
     * Description:  Each applet parameter is represented by a code element
     *               whose name attribute is the parameter name and which
     *               contains a formula for the parameter value.  The formula
     *               can also be a simple value such as a number or a text
     *               string.
     *********************************************************************** -->
	<xsd:complexType name="appletparameters">
		<xsd:sequence>
			<xsd:element name="code" type="code" minOccurs="1" maxOccurs="unbounded"/>
		</xsd:sequence>
	</xsd:complexType>

    <!-- **********************************************************************
     * ComplexType:  layout
     * Description:  The layout of one of the areas of an embedded outline.
     *
     * Attributes:
     * heighttype:
     *     One of:
     *       fitwindow       Fits to the window.
     *       fixed           Specifies a fixed height.
     * height:
     *     Fixed height of the entire outline entry, using one of the fixed
     *     measurement units.
     * entryhoffset:
     *     Alignment of outline entries relative to the left edge of the
     *     embedded outline.
     * entryvoffset:
     *     Alignment of the outline entries relative to the top edge of the
     *     embedded outline or previous outline entry.
     * imagehoffset:
     *     Sets the horizontal offset of the entry image of the outline entry,
     *     relative to the left or right edge of the outline entry.
     * imagevoffset:
     *     Sets the vertical offset of the entry image of the outline entry,
     *     relative to the top or bottom edge of the outline entry.
     * imagealign:
     *     Specifies the alignment of the outline entry image, one of:
     *     topleft, topcenter, topright, middleleft, middlecenter, middleright,
     *     bottomleft, bottomcenter, bottomright
     * labelhoffset:
     *     Sets the horizontal offset of the label text of the outline entry,
     *     relative to the left or right edge of the outline entry.
     * labelvoffset:
     *     Sets the vertical offset of the label text of the outline entry,
     *     relative to the top or bottom edge of the outline entry.
     * labelalign:
     *     Specifies the alignment of the label text, one of:
     *     topleft, topcenter, topright, middleleft, middlecenter, middleright,
     *     bottomleft, bottomcenter, bottomright
     *********************************************************************** -->
	<xsd:complexType name="layout">
		<xsd:attribute name="heighttype" type="eoutline.height.types" use="optional" default="fitcontent"/>
		<xsd:attribute name="height" type="xsd:string" use="optional"/>
		<xsd:attribute name="entryhoffset" type="xsd:string" use="optional"/>
		<xsd:attribute name="entryvoffset" type="xsd:string" use="optional"/>
		<xsd:attribute name="imagehoffset" type="xsd:string" use="optional"/>
		<xsd:attribute name="imagevoffset" type="xsd:string" use="optional"/>
		<xsd:attribute name="imagealign" type="complex.aligns" use="optional" default="topleft"/>
		<xsd:attribute name="labelhoffset" type="xsd:string" use="optional"/>
		<xsd:attribute name="labelvoffset" type="xsd:string" use="optional"/>
		<xsd:attribute name="labelalign" type="complex.aligns" use="optional" default="topleft"/>
	</xsd:complexType>

	<xsd:simpleType name="eoutline.height.types">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="fitcontent"/>
			<xsd:enumeration value="fixed"/>
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:simpleType name="complex.aligns">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="topleft"/>
			<xsd:enumeration value="topcenter"/>
			<xsd:enumeration value="topright"/>
			<xsd:enumeration value="middleleft"/>
			<xsd:enumeration value="middlecenter"/>
			<xsd:enumeration value="middleright"/>
			<xsd:enumeration value="bottomleft"/>
			<xsd:enumeration value="bottomcenter"/>
			<xsd:enumeration value="bottomright"/>
		</xsd:restriction>
	</xsd:simpleType>

    <!-- **********************************************************************
     * ComplexType:  eoutlinebackground
     * Description:  The background of one of the areas of an embedded outline.
     *
     * Attributes:
     * normalcolor:
     *     The normal background color for the area.
     * selectedcolor:
     *     The background color of the area when it is selected.
     * mouseovercolor:
     *     The background color of the area when the mouse is moved over the
     *     area.
     * repeat:
     *     The repeat pattern for the background image, one of:
     *     once, hrepeat, vrepeat, tile, resize
     *********************************************************************** -->
	<xsd:complexType name="eoutlinebackground">
		<xsd:sequence>
			<xsd:element name="imageref" type="imageref" minOccurs="0" maxOccurs="1"/>
		</xsd:sequence>
		<xsd:attribute name="normalcolor" type="xsd:string" use="optional"/>
		<xsd:attribute name="selectedcolor" type="xsd:string" use="optional"/>
		<xsd:attribute name="mouseovercolor" type="xsd:string" use="optional"/>
		<xsd:attribute name="repeat" type="eoutline.repeats" use="optional" default="once"/>
	</xsd:complexType>

	<xsd:simpleType name="eoutline.repeats">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="once"/>
			<xsd:enumeration value="hrepeat"/>
			<xsd:enumeration value="vrepeat"/>
			<xsd:enumeration value="tile"/>
			<xsd:enumeration value="resize"/>
		</xsd:restriction>
	</xsd:simpleType>

    <!-- **********************************************************************
     * ComplexType:  control
     * Description:  The control (background) area of an embedded outline.
     *               Optional content describes the area's background.
     *********************************************************************** -->
	<xsd:complexType name="control">
		<xsd:sequence>
			<xsd:element name="eoutlinebackground" type="eoutlinebackground" minOccurs="0" maxOccurs="1"/>
		</xsd:sequence>
	</xsd:complexType>

    <!-- **********************************************************************
     * ComplexType:  title
     * Description:  The title area of an embedded outline.  Optional
     *               content describes the area's font, background, and layout.
     *
     * Attributes:
     * style:
     *     Value:        Description:
     *     simple        Lets users navigate back up to prior levels by
     *                   displaying the parent of the current level in an
     *                   outline.
     *     hide          Does not display any hierarchy, so once users go down
     *                   a level in the outline they cannot navigate back up.
     *     hierarchical  Displays the hierarchy.
     * See the toplevel element for a description of additional attributes.
     *********************************************************************** -->
	<xsd:complexType name="title">
		<xsd:sequence>
			<xsd:element name="font" type="font" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="eoutlinebackground" type="eoutlinebackground" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="layout" type="layout" minOccurs="0" maxOccurs="1"/>
		</xsd:sequence>
		<xsd:attribute name="style" type="outline.titlestyles" use="optional" default="hide"/>
		<xsd:attribute name="normalcolor" type="xsd:string" use="optional"/>
		<xsd:attribute name="mouseovercolor" type="xsd:string" use="optional"/>
	</xsd:complexType>

	<xsd:simpleType name="outline.titlestyles">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="simple"/>
			<xsd:enumeration value="hide"/>
			<xsd:enumeration value="hierarchical"/>
		</xsd:restriction>
	</xsd:simpleType>

    <!-- **********************************************************************
     * ComplexType:  toplevel
     * Description:  The top-level area of an embedded outline.  Optional
     *               content describes the area's font, background, and layout.
     *
     * Attributes:
     * normalcolor:
     *     The normal color for the area.
     * selectedcolor:
     *     The color of the area when it is selected.
     * mouseovercolor:
     *     The color of the area when the mouse is moved over the area.
     *********************************************************************** -->
	<xsd:complexType name="toplevel">
		<xsd:sequence>
			<xsd:element name="font" type="font" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="eoutlinebackground" type="eoutlinebackground" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="layout" type="layout" minOccurs="0" maxOccurs="1"/>
		</xsd:sequence>
		<xsd:attribute name="normalcolor" type="xsd:string" use="optional"/>
		<xsd:attribute name="selectedcolor" type="xsd:string" use="optional"/>
		<xsd:attribute name="mouseovercolor" type="xsd:string" use="optional"/>
	</xsd:complexType>

    <!-- **********************************************************************
     * ComplexType:  sublevel
     * Description:  The sub-level area of an embedded outline.  Optional
     *               content describes the area's font, background, and layout.
     *
     * Attributes:
     * See the toplevel element for a description of attributes.
     *********************************************************************** -->
	<xsd:complexType name="sublevel">
		<xsd:sequence>
			<xsd:element name="font" type="font" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="eoutlinebackground" type="eoutlinebackground" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="layout" type="layout" minOccurs="0" maxOccurs="1"/>
		</xsd:sequence>
		<xsd:attribute name="normalcolor" type="xsd:string" use="optional"/>
		<xsd:attribute name="selectedcolor" type="xsd:string" use="optional"/>
		<xsd:attribute name="mouseovercolor" type="xsd:string" use="optional"/>
	</xsd:complexType>

    <!-- **********************************************************************
     * ComplexType:  twistieimage
     * Description:  Defines an image for the triangle, or twistie, that allows
     *               one to expand a construct in Notes.
     *********************************************************************** -->
	<xsd:complexType name="twistieimage">
		<xsd:sequence>
			<xsd:element name="imageref" type="imageref"/>
		</xsd:sequence>
	</xsd:complexType>

    <!-- **********************************************************************
     * ComplexType:  embeddedoutline
     * Description:  An embedded outline within rich text.
     *               The border element specifies the border around the outline.
     *
     * Attributes:
     * type:
     *     Controls whether the hierarchy of the outline is shown.
     *     Value:  Behavior:
     *     tree    Shows all of the outline entries in the hierarchy.
     *     flat    Shows only one level in the hierarchy at a time.
     * display:
     *     When type='flat', specifies how to display the outline: vertical or
     *     horizontal.
     * expand:
     * imagelabel:
     * name:
     *     Name of embedded outline.
     * direction:
     * rootname:
     *     Specify a root by using the parent entry label or alias.
     * samebackground:
     * samefont:
     * showtwistie:
     *     Display a triangle that users click to see outline entries
     *     (for type='tree' only).
     * osstyletwistie:
     *     Use OS style twisties ('+' to expand, '-' to collapse).  Applies when
     *     type='tree' only, and in that case, implicitly defaults to false.
     * targetframe:
     *     The frame where you want the source (link, named element, or URL)
     *     displayed.
     * tileimage:
     * useappletinbrowser:
     *     Use a Java applet to display an embedded outline in a browser.
     * widthtype:
     *     One of:
     *       fitwindow       Fits the outline to the window as given in the
     *                       width attribute percentage value.
     *       fixed           Specifies a fixed width for the outline.
     *       fitcontent      Automatic sizing of outline based on its content.
     *       fixedcharacter  Width is approximately the specified number of
     *                       characters based on the average character width of
     *                       the specified font.
     * width:
     *     Width of view - fixed or percentage value depending on widthtype.
     *     Fixed value uses one of the fixed measurement units (in, cm, etc.)
     * heighttype:
     *     One of:
     *       fitwindow       Fits the outline height to the window.
     *       fixed           Specifies a fixed height for the outline.
     *       fitcontent      Automatic sizing of outline based on its content.
     * height:
     *     Fixed height of outline, using one of the fixed measurement units.
     * scrollbars:
     *     Display scroll bars if the outline entries do not fit on the screen.
     * showviewcontents:
     *     Display folder or view contents in outline.  This is valid on with
     *     subscription and bookmark databases only.
     * outline:
     *     The name of the outline design note to embed.
     * database:
     *     The replicaid of the database containing the outline to embed.
     *     The replicaid is represented as 1 to 16 hexadecimal digits.
     *     The following values are also allowed to reference specific
     *     commonly used databases:
     *     mailfile, addressbook, subscriptions, bookmarks
     *     If not specified, the current database is implied.
     * showfolderunread:
     *     For folders in the outline, show folder's unread information.
     * characters:
     *     When widthtype='fixedcharacter', specifies the width in characters.
     * columnwidth:
     *********************************************************************** -->
	<xsd:complexType name="embeddedoutline">
		<xsd:sequence>
			<xsd:element name="control" type="control" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="title" type="title" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="toplevel" type="toplevel" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="sublevel" type="sublevel" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="twistieimage" type="twistieimage" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="border" type="border" minOccurs="0" maxOccurs="1"/>
		</xsd:sequence>
		<xsd:attribute name="display" type="outline.displaydirections" use="optional" default="vertical"/>
		<xsd:attribute name="expand" type="outline.expandtypes" use="optional" default="saved"/>
		<xsd:attribute name="imagelabel" type="xsd:string" use="optional"/>
		<xsd:attribute name="name" type="xsd:string" use="optional"/>
		<xsd:attributeGroup ref="direction.attrs"/>
		<xsd:attribute name="rootname" type="xsd:string" use="optional"/>
		<xsd:attribute name="samebackground" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="samefont" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="showtwistie" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="osstyletwistie" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="targetframe" type="xsd:string" use="optional"/>
		<xsd:attribute name="tileimage" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="type" type="outline.types" use="optional" default="tree"/>
		<xsd:attribute name="useappletinbrowser" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="width" type="xsd:string" use="optional" default="100%"/>
		<xsd:attribute name="widthtype" type="eoutline.sizetypes" use="optional" default="fitwindow"/>
		<xsd:attribute name="height" type="xsd:string" use="optional" default="1in"/>
		<xsd:attribute name="heighttype" type="eoutline.sizetypes" use="optional" default="fixed"/>
		<xsd:attribute name="scrollbars" type="xsd:boolean" use="optional" default="true"/>
		<xsd:attribute name="showviewcontents" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="outline" type="xsd:string" use="optional"/>
		<xsd:attribute name="database" type="xsd:string" use="optional"/>
		<xsd:attribute name="showfolderunread" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="characters" type="xsd:integer" use="optional"/>
		<xsd:attribute name="columnwidth" type="xsd:string" use="optional" default="0in"/>
	</xsd:complexType>

	<xsd:simpleType name="outline.displaydirections">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="vertical"/>
			<xsd:enumeration value="horizontal"/>
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:simpleType name="outline.expandtypes">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="all"/>
			<xsd:enumeration value="first"/>
			<xsd:enumeration value="saved"/>
			<xsd:enumeration value="none"/>
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:simpleType name="outline.types">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="flat"/>
			<xsd:enumeration value="tree"/>
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:simpleType name="eoutline.sizetypes">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="fixed"/>
			<xsd:enumeration value="fitwindow"/>
			<xsd:enumeration value="fitcontent"/>
			<xsd:enumeration value="fixedcharacter"/>
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:complexType name="embeddedfolderpane">
		<xsd:sequence>
			<xsd:element name="font" type="font" minOccurs="0" maxOccurs="1"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="sparefont">
		<xsd:sequence>
			<xsd:element name="font" type="font"/>
		</xsd:sequence>
	</xsd:complexType>

    <!-- **********************************************************************
     * ComplexType:  embeddedview
     * Description:  An embedded view within rich text.
     *               The border element specifies the border around the view.
     *               The following code events may be supplied.  The only code
     *               type allowed for these events is formula.
     *               Event:              Usage:
     *               value               Selects the view to embed via formula.
     *                                   Use the name (and optionally database)
     *                                   attributes to specify a text name; if
     *                                   name is specified then the value
     *                                   formula is ignored.
     *               showsinglecategory  Restrict the embedded view to a single
     *                                   category specified by formula.  Must be
     *                                   a categorized view.
     *
     * Attributes:
     * name:
     *     Name of view to embed.
     * embeddedname:
     *     Name of this embedded view.  This name allows you to specify an
     *     embedded view as a target from another embedded view.
     * database:
     *     The replicaid of the database containing the view to embed.
     *     The replicaid is represented as 1 to 16 hexadecimal digits.
     *     The following values are also allowed to reference specific
     *     commonly used databases:
     *     mailfile, addressbook, subscriptions, bookmarks
     *     If not specified, the current database is implied.
     * sclickframe:
     *     When a user single-clicks a link in the embedded view at run time,
     *     the link opens in this target frame.
     * dclickframe:
     *     When a user double-clicks a link in the embedded view at run time,
     *     the link opens in this target frame.
     * usedefaultlines:
     *     Display the default number of lines in the embedded view.
     * displayusing:
     *     Mechanism used to display the embedded view for Web access.
     *     One of the following:
     *       html            Using HTML.
     *       javaapplet      Using the view Java applet.
     *       designsettings  Using the settings of the view being embedded.
     * linestodisplay:
     *     Number of lines to display in the view.
     * widthtype:
     *     One of:
     *       fitwindow    Fits the view to the window as given in the
     *                    width attribute percentage value.
     *       fixed        Specifies a fixed width for the view.
     * width:
     *     Width of view - fixed or percentage value depending on widthtype.
     *     Fixed value uses one of the fixed measurement units (in, cm, etc.)
     *     Implied default of '3.5in' if widthtype='fixed' and '100%' if
     *     widthtype='fitwindow'.
     * heighttype:
     *     One of:
     *       fitwindow    Fits the view's height to the window.
     *       fixed        Specifies a fixed height for the view.
     * height:
     *     Fixed height of control, using one of the fixed measurement units.
     *     Implied default of '2in' if heighttype='fixed', otherwise this
     *     attribute is not relevant.
     * scrollbars:
     *     Display scroll bars.
     * showheader:
     *     Show the column names for the view.
     * selectionfollowsmouse:
     *     Moves a selection box over documents as you mouse-over them.
     * transparentbackground:
     *     Overlays the view contents on the page or form background.
     * showentriesaslinks:
     *     Displays each view entry as a clickable link.
     * showactionbar:
     *     Displays the action bar for the view for Notes client users.
     * showselectionmargin:
     *     Adds white space around the view for Notes client users.
     * showcurrentthreadonly:
     *     Displays the parent and response documents associated with the
     *     current document.
     * useviewsselectionmarginprop:
     *     Use view's selection margin property.
     *********************************************************************** -->
	<xsd:complexType name="embeddedview">
		<xsd:sequence>
			<xsd:element name="code" type="code" minOccurs="0" maxOccurs="unbounded"/>
			<xsd:element name="sparefont" type="sparefont" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="border" type="border" minOccurs="0" maxOccurs="1"/>
		</xsd:sequence>
		<xsd:attribute name="name" type="xsd:string" use="optional"/>
		<xsd:attribute name="embeddedname" type="xsd:string" use="optional"/>
		<xsd:attribute name="sclickframe" type="xsd:string" use="optional"/>
		<xsd:attribute name="dclickframe" type="xsd:string" use="optional"/>
		<xsd:attribute name="usedefaultlines" type="xsd:boolean" use="optional" default="true"/>
		<xsd:attribute name="displayusing" type="embeddedview.display.types" use="optional" default="javaapplet"/>
		<xsd:attribute name="linestodisplay" type="xsd:integer" use="optional" default="0"/>
		<xsd:attribute name="width" type="xsd:string" use="optional"/>
		<xsd:attribute name="widthtype" type="embedded.fit.types" use="optional" default="fixed"/>
		<xsd:attribute name="height" type="xsd:string" use="optional"/>
		<xsd:attribute name="heighttype" type="embedded.fit.types" use="optional" default="fixed"/>
		<xsd:attribute name="scrollbars" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="showheader" type="xsd:boolean" use="optional" default="true"/>
		<xsd:attribute name="selectionfollowsmouse" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="transparentbackground" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="showentriesaslinks" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="showactionbar" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="showselectionmargin" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="database" type="xsd:string" use="optional"/>
		<xsd:attribute name="showcurrentthreadonly" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="useviewsselectionmarginprop" type="xsd:boolean" use="optional" default="true"/>
	</xsd:complexType>

	<xsd:simpleType name="embeddedview.display.types">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="html"/>
			<xsd:enumeration value="javaapplet"/>
			<xsd:enumeration value="designsettings"/>
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:simpleType name="embedded.fit.types">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="fitwindow"/>
			<xsd:enumeration value="fixed"/>
		</xsd:restriction>
	</xsd:simpleType>

    <!-- **********************************************************************
     * ComplexType:  embeddeddatepicker
     * Description:  An embedded date picker (calendar control) within rich text.
     *               The font element specifies the text font within the control.
     *               The border element specifies the border around the control.
     *
     * Attributes:
     * headerbgcolor:
     *     The background color of the control's header.
     * controlbgcolor:
     *     The control's background color.
     * textcolor:
     *     The color of text within the control.
     * targetframe:
     *     The frame in which to display the result of any control action.
     * proportional:
     *     Size the control proportionally.
     * widthtype:
     *     One of:
     *       fitwindow    Fits the control to the window as given in the
     *                    width attribute percentage value.
     *       fixed        Specifies a fixed width for the control.
     * width:
     *     Width of control - fixed or percentage value depending on widthtype.
     *     Fixed value uses one of the fixed measurement units (in, cm, etc.)
     * heighttype:
     *     One of:
     *       fitwindow    Fits the control's height to the window.
     *       fixed        Specifies a fixed height for the control.
     * height:
     *     Fixed height of control, using one of the fixed measurement units.
     *********************************************************************** -->
	<xsd:complexType name="embeddeddatepicker">
		<xsd:sequence>
			<xsd:element name="font" type="font" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="border" type="border" minOccurs="0" maxOccurs="1"/>
		</xsd:sequence>
		<xsd:attribute name="headerbgcolor" type="xsd:string" use="optional" default="none"/>
		<xsd:attribute name="controlbgcolor" type="xsd:string" use="optional" default="none"/>
		<xsd:attribute name="textcolor" type="xsd:string" use="optional" default="black"/>
		<xsd:attribute name="targetframe" type="xsd:string" use="optional"/>
		<xsd:attribute name="proportional" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="height" type="xsd:string" use="optional"/>
		<xsd:attribute name="heighttype" type="embedded.fit.types" use="optional" default="fixed"/>
		<xsd:attribute name="width" type="xsd:string" use="optional"/>
		<xsd:attribute name="widthtype" type="embedded.fit.types" use="optional" default="fixed"/>
	</xsd:complexType>

	<xsd:complexType name="embeddednavigator">
		<xsd:sequence>
			<xsd:element name="code" type="code" minOccurs="0" maxOccurs="1"/>
		</xsd:sequence>
		<xsd:attribute name="name" type="xsd:string" use="optional"/>
		<xsd:attribute name="istemplate" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="database" type="xsd:string" use="optional"/>
	</xsd:complexType>

	<xsd:complexType name="embeddedfileuploadcontrol">
		<xsd:attributeGroup ref="html.core.attrs"/>
	</xsd:complexType>

    <!-- **********************************************************************
     * ComplexType:  point
     * Description:  A single point on the display; an (X,Y) coordinate.
     *
     * Attributes:
     * x:
     * y:
     *     Define the (X,Y) coordinate.
     *********************************************************************** -->
	<xsd:complexType name="point">
		<xsd:attribute name="x" type="xsd:integer" use="optional"/>
		<xsd:attribute name="y" type="xsd:integer" use="optional"/>
	</xsd:complexType>

    <!-- **********************************************************************
     * ComplexType:  area
     * Description:  A hotspot area within an imagemap.
     *               Can contain two or more points (see type attribute), a
     *               link which is selected by the hotspot, and code elements
     *               that control the behavior of the hotspot.
     *               Code Type:    Valid Events:
     *               formula       onClick
     *               simpleaction  action
     *               lotusscript   options, declarations, click, objectexecute,
     *                             initialize, terminate, user-defined
     *               javascript    onBlur, onClick, onDblClick, onFocus, onHelp,
     *                             onKeyDown, onKeyPress, onKeyUp, onMouseDown,
     *                             onMouseMove, onMouseOut, onMouseOver,
     *                             onMouseUp
     *
     * Attributes:
     * type:
     *     Type of area, which affects which content is required.
     *     Value:     Content required:
     *     circle     Two points, which define the top left and bottom right of
     *                a rectangle that encloses the circle.
     *     default    No points.  The default area is predetermined.
     *     rectangle  Two points, which define the top left and bottom right of
     *                the rectangle.
     *     polygon    Three or more points that define the polygon's vertices.
     * tabindex:
     *     Specifies a tab order, the order your hotspots are selected as you
     *     press the TAB key.
     * htmlid, htmlclass, htmlstyle, htmltitle, extrahtmlattrs:
     *     See comments for attributeGroup html.core.attrs.
     * alttext:
     *     Alternate name for the hotspot.
     * targetframe:
     *     Specifies the target frame for the hotspot's action.
     *********************************************************************** -->
	<xsd:complexType name="area">
		<xsd:sequence>
			<xsd:choice minOccurs="0" maxOccurs="1">
				<xsd:sequence>
					<xsd:element name="point" type="point" minOccurs="2" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:choice>
			<xsd:choice minOccurs="0" maxOccurs="1">
				<xsd:element name="doclink" type="doclink"/>
				<xsd:element name="viewlink" type="viewlink"/>
				<xsd:element name="databaselink" type="databaselink"/>
				<xsd:element name="urllink" type="urllink"/>
				<xsd:element name="namedelementlink" type="namedelementlink"/>
			</xsd:choice>
			<xsd:element name="code" type="code" minOccurs="0" maxOccurs="unbounded"/>
		</xsd:sequence>
		<xsd:attribute name="type" type="area.type" use="optional"/>
		<xsd:attribute name="tabindex" type="xsd:integer" use="optional" default="0"/>
		<xsd:attributeGroup ref="html.core.attrs"/>
		<xsd:attribute name="alttext" type="xsd:string" use="optional"/>
		<xsd:attribute name="targetframe" type="xsd:string" use="optional"/>
	</xsd:complexType>

	<xsd:simpleType name="area.type">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="circle"/>
			<xsd:enumeration value="default"/>
			<xsd:enumeration value="rectangle"/>
			<xsd:enumeration value="polygon"/>
		</xsd:restriction>
	</xsd:simpleType>

    <!-- **********************************************************************
     * ComplexType:  imagemap
     * Description:  An image map (picture with hotspots) within richtext.
     *               A required picture element specifies the picture, and one
     *               or more area elements specify the hotspots.
     *
     * Attributes:
     * name:
     *     Name of imagemap.
     * lastdefaultid:
     * lastrectangleid:
     * lastcircleid:
     * lastpolygonid:
     *     Define the last ID used for hotspots of each type, and thus affect
     *     the name of the next hotspot area.
     *********************************************************************** -->
	<xsd:complexType name="imagemap">
		<xsd:sequence>
			<xsd:element name="picture" type="picture" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="area" type="area" minOccurs="1" maxOccurs="unbounded"/>
		</xsd:sequence>
		<xsd:attribute name="name" type="xsd:string" use="optional"/>
		<xsd:attribute name="lastdefaultid" type="xsd:integer" use="optional"/>
		<xsd:attribute name="lastrectangleid" type="xsd:integer" use="optional"/>
		<xsd:attribute name="lastcircleid" type="xsd:integer" use="optional"/>
		<xsd:attribute name="lastpolygonid" type="xsd:integer" use="optional"/>
	</xsd:complexType>

    <!-- **********************************************************************
     * ComplexType:  keyword
     * Description:  Specifies a single keyword within a group of keywords.
     * Attributes:
     *
     * on:
     *     Specifies whether the keyword is selected.
     *********************************************************************** -->
	<xsd:complexType name="keyword">
		<xsd:simpleContent>
			<xsd:extension base="xsd:string">
				<xsd:attribute name="on" type="xsd:boolean" use="optional" default="false"/>
			</xsd:extension>
		</xsd:simpleContent>
	</xsd:complexType>

    <!-- **********************************************************************
     * ComplexType:  embeddedkeywords
     * Description:  Specifies a group of keywords associated with an embedded
     *               control of type combobox, listbox, or radiobutton.
     *********************************************************************** -->
	<xsd:complexType name="embeddedkeywords">
		<xsd:sequence>
			<xsd:element name="keyword" type="keyword" minOccurs="0" maxOccurs="unbounded"/>
		</xsd:sequence>
	</xsd:complexType>

    <!-- **********************************************************************
     * ComplexType:  embeddedcontrol
     * Description:  An embedded control within rich text.  Contains either text
     *               or embeddedkeywords depending on the control type.  The
     *               font element specifies the text font within the control.
     *
     * Attributes:
     * type:
     *     The type of the control; one of:
     *       checkbox
     *       combobox
     *       edit
     *       listbox
     *       radiobutton
     *       datetime
     *       timezone
     *       color
     * borderstyle:
     *     Style of border around the control; one of:
     *       none      No border.
     *       single    A single-line border.
     *       inset     A border that displays the control as inset.
     * columns:
     *     
     * alignwithbaseline:
     *     Align control's baseline with paragraph's.
     * allowmultilines:
     *	   Valid only for Ctrl types edit and listbox
     * readingorder:
     *     Reading order for keywords - lefttoright or righttoleft.
     * widthtype:
     *     One of:
     *       fitwindow    Fits the control to the window as given in the
     *                    width attribute percentage value.
     *       fixed        Specifies a fixed width for the control.
     * width:
     *     Width of control - fixed or percentage value depending on widthtype.
     *     Fixed value uses one of the fixed measurement units (in, cm, etc.)
     * height:
     *     Fixed height of control, using one of the fixed measurement units.
     * bgcolor:
     *     Background color of the control.
     *********************************************************************** -->
	<xsd:complexType name="embeddedcontrol">
		<xsd:sequence>
			<xsd:element name="text" type="text" minOccurs="0" maxOccurs="unbounded"/>
			<xsd:element name="font" type="font" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="embeddedkeywords" type="embeddedkeywords" minOccurs="0" maxOccurs="1"/>
		</xsd:sequence>
		<xsd:attribute name="type" type="embeddedcontrol.type" use="optional"/>
		<xsd:attribute name="borderstyle" type="keywords.borders" use="optional"/>
		<xsd:attribute name="columns" type="xsd:integer" use="optional" default="1"/>
		<xsd:attribute name="alignwithbaseline" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="allowmultilines" type="xsd:boolean" use="optional"/>
		<xsd:attributeGroup ref="reading.order.attrs"/>
		<xsd:attribute name="width" type="xsd:string" use="optional"/>
		<xsd:attribute name="widthtype" type="embedded.fit.types" use="optional" default="fixed"/>
		<xsd:attribute name="height" type="xsd:string" use="optional"/>
		<xsd:attribute name="bgcolor" type="xsd:string" use="optional"/>
	</xsd:complexType>

	<xsd:simpleType name="embeddedcontrol.type">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="checkbox"/>
			<xsd:enumeration value="combobox"/>
			<xsd:enumeration value="edit"/>
			<xsd:enumeration value="listbox"/>
			<xsd:enumeration value="radiobutton"/>
			<xsd:enumeration value="datetime"/>
			<xsd:enumeration value="timezone"/>
			<xsd:enumeration value="color"/>
			<xsd:enumeration value="password"/>
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:simpleType name="keywords.borders">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="none"/>
			<xsd:enumeration value="single"/>
			<xsd:enumeration value="inset"/>
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:complexType name="namedelementref">
		<xsd:attribute name="name" type="xsd:string" use="required"/>
		<xsd:attribute name="type" type="namedelementref.type" use="required"/>
		<xsd:attribute name="database" type="xsd:string" use="optional"/>
	</xsd:complexType>
	<xsd:simpleType name="namedelementref.type">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="htmlfile"/>
			<xsd:enumeration value="scriptlibrary"/>
			<xsd:enumeration value="stylesheet"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:complexType name="richtextdata">
		<xsd:simpleContent>
			<xsd:extension base="xsd:string">
				<xsd:attribute name="type" type="noteshex" use="required"/>
			</xsd:extension>
		</xsd:simpleContent>
	</xsd:complexType>
	<xsd:complexType name="datetimeformat">
		<xsd:attribute name="show" type="datetimeformat.show" use="optional"/>
		<xsd:attribute name="date" type="datetimeformat.date" use="optional"/>
		<xsd:attribute name="showtodaywhenappropriate" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="fourdigityear" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="fourdigityearfor21stcentury" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="omitthisyear" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="time" type="datetimeformat.time" use="optional"/>
		<xsd:attribute name="zone" type="datetimeformat.zone" use="optional"/>
		<xsd:attribute name="calendar" type="datetimeformat.calendar" use="optional"/>
		<xsd:attribute name="dateformat" type="datetimeformat.dateformat" use="optional" default="weekdaymonthdayyear"/>
		<xsd:attribute name="dayformat" type="datetimeformat.dayformat" use="optional" default="twodigitday"/>
		<xsd:attribute name="monthformat" type="datetimeformat.monthformat" use="optional" default="twodigitmonth"/>
		<xsd:attribute name="yearformat" type="datetimeformat.yearformat" use="optional" default="fourdigityear"/>
		<xsd:attribute name="weekdayformat" type="datetimeformat.weekdayformat" use="optional" default="shortname"/>
		<xsd:attribute name="dateseparator1" type="xsd:string" use="optional" default=" "/>
		<xsd:attribute name="dateseparator2" type="xsd:string" use="optional" default="/"/>
		<xsd:attribute name="dateseparator3" type="xsd:string" use="optional" default="/"/>
		<xsd:attribute name="timeseparator" type="xsd:string" use="optional" default=":"/>
		<xsd:attribute name="timeformat24" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="preference" type="datetimeformat.preference" use="optional" default="usersetting"/>
		<xsd:attribute name="legacy" type="xsd:boolean" use="optional"/>
	</xsd:complexType>
	<xsd:simpleType name="datetimeformat.show">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="date"/>
			<xsd:enumeration value="time"/>
			<xsd:enumeration value="datetime"/>
			<xsd:enumeration value="datetimetoday"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="datetimeformat.date">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="yearmonthday"/>
			<xsd:enumeration value="year4monthday"/>
			<xsd:enumeration value="monthday"/>
			<xsd:enumeration value="yearmonth"/>
			<xsd:enumeration value="year4month"/>
			<xsd:enumeration value="weekdaymonthdayyear"/>
			<xsd:enumeration value="weekdaymonthday"/>
			<xsd:enumeration value="weekday"/>
			<xsd:enumeration value="month"/>
			<xsd:enumeration value="day"/>
			<xsd:enumeration value="year"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="datetimeformat.time">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="hourminutesecondhundredths"/>
			<xsd:enumeration value="hourminutesecond"/>
			<xsd:enumeration value="hourminute"/>
			<xsd:enumeration value="hour"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="datetimeformat.zone">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="never"/>
			<xsd:enumeration value="sometimes"/>
			<xsd:enumeration value="always"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="datetimeformat.calendar">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="gregorian"/>
			<xsd:enumeration value="hijri"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="datetimeformat.dateformat">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="yearmonthdayweekday"/>
			<xsd:enumeration value="weekdaymonthdayyear"/>
			<xsd:enumeration value="weekdaydaymonthyear"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="datetimeformat.dayformat">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="onedigitday"/>
			<xsd:enumeration value="twodigitday"/>
		</xsd:restriction>
	</xsd:simpleType>		
	<xsd:simpleType name="datetimeformat.monthformat">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="onedigitmonth"/>
			<xsd:enumeration value="twodigitmonth"/>
			<xsd:enumeration value="shortname"/>
			<xsd:enumeration value="fullname"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="datetimeformat.weekdayformat">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="shortname"/>
			<xsd:enumeration value="fullname"/>
			<xsd:enumeration value="shortnameparens"/>
			<xsd:enumeration value="fullnameparens"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="datetimeformat.yearformat">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="twodigityear"/>
			<xsd:enumeration value="fourdigityear"/>
			<xsd:enumeration value="oneletterepochnameonedigityear"/>
			<xsd:enumeration value="oneletterepochnametwodigityear"/>
			<xsd:enumeration value="shortepochnameonedigityear"/>
			<xsd:enumeration value="shortepochnametwodigityear"/>
			<xsd:enumeration value="fullepochnameonedigityear"/>
			<xsd:enumeration value="fullepochnametwodigityear"/>
		</xsd:restriction>
	</xsd:simpleType>
    <xsd:simpleType name="datetimeformat.preference">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="usersetting"/>
			<xsd:enumeration value="custom"/>
		</xsd:restriction>
	</xsd:simpleType>	
	<!-- **********************************************************************
     * ComplexType:  numberformat
     *
     * Attributes:
     * digits:
     *     The number of fractional digits (0-15).  As of 8.52, digits='varying'
     *     is deprecated.  Importer will still allow it but Exporter now emits
     *     varying='true'.
     * format:
     *     general, fixed, scientific, currency are valid types.
     *    
     * NOTE: To set the bytes(K/M/G) option in domino designer one needs
     *       to set bytes = true.
     * punctuated:
     *     Punctuated at thousands
     * parens:
     *     Parenthesis when negative
     * percent:
     *     Number Format - Percent
     * bytes:
     *     Number Format - Bytes(K/M/G)
     * varying:
     *     Decimal places - Varying checkbox
     * preference:
     *     usersetting or custom
     * decimalsym:
     *     Decimal symbol
     * thousandssep:
     *     Thousands separator
     * currencysymtype:
     *     Currency symbol type - 'iso' if value selected from "Currency symbol"
     *     dropdown in Designer UI, or 'custom' if from "Custom" text box for
     *     custom symbol.
     * currencysym:
     *     Currency symbol
     * usecustomsym:
     *     When currencysymtype='custom', indicates whether the symbol is in use
     *     (Custom checkbox in Designer UI).
     * isocountry:
     *     Numeric country code (ISO 3166).  Corresponds to text value in
     *     "Currency symbol" dropdown or Country dropdown for custom currency
     *     symbol.
     * symfollows:
     *     'true' if currency symbol follows number
     * usespaces:
     *     'true' if space next to number
     * legacy:
     *     'true' if Exporter determines that only "legacy" data was stored on
     *     disk, no extended number formatting data
     *********************************************************************** -->	
	<xsd:complexType name="numberformat">
		<xsd:attribute name="digits" type="xsd:string" use="optional"/>
		<xsd:attribute name="format" type="numberformat.formats" use="optional"/>
		<xsd:attribute name="punctuated" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="parens" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="percent" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="bytes" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="varying" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="preference" type="numberformat.preferences" use="optional" default="usersetting"/>
		<xsd:attribute name="decimalsym" type="xsd:string" use="optional"/>
		<xsd:attribute name="thousandssep" type="xsd:string" use="optional"/>
		<xsd:attribute name="currencysymtype" type="numberformat.currencysymtypes" use="optional"/>
		<xsd:attribute name="currencysym" type="xsd:string" use="optional"/>
		<xsd:attribute name="usecustomsym" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="isocountry" type="xsd:integer" use="optional"/>
		<xsd:attribute name="symfollows" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="usespaces" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="legacy" type="xsd:boolean" use="optional"/>
	</xsd:complexType>
	<xsd:simpleType name="numberformat.formats">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="general"/>
			<xsd:enumeration value="fixed"/>
			<xsd:enumeration value="scientific"/>
			<xsd:enumeration value="currency"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="numberformat.preferences">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="usersetting"/>
			<xsd:enumeration value="custom"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="numberformat.currencysymtypes">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="iso"/>
			<xsd:enumeration value="custom"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:complexType name="columnnamesformat">
		<xsd:attribute name="showonline" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="columncontainsname" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="columnname" type="xsd:string" use="optional"/>
		<xsd:attribute name="verticalorientation" type="verticalorientation.formats" use="optional"/>
	</xsd:complexType>
	<xsd:simpleType name="verticalorientation.formats">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="top"/>
			<xsd:enumeration value="middle"/>
			<xsd:enumeration value="bottom"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:complexType name="updatedby">
		<xsd:sequence minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="name" type="xsd:string"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="revisions">
		<xsd:sequence minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="datetime" type="datetime"/>
		</xsd:sequence>
	</xsd:complexType>

	<!-- **********************************************************************
     * ComplexType:  subform
     *
     * Attributes:
	 * (see named.design.note.attrs)
	 * renderpassthrough.attrs:
	 *     for endering passthrough html in client
     * nofieldindex:
     *     Do not add field names to field index.
     *********************************************************************** -->
	<xsd:complexType name="subform">
		<xsd:sequence>
			<xsd:group ref="named.design.note.prolog"/>
			<xsd:element name="globals" type="globals" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="code" type="code" minOccurs="0" maxOccurs="unbounded"/>
			<xsd:element name="actionbar" type="actionbar" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="body" type="body"/>
			<xsd:group ref="note.epilog"/>
		</xsd:sequence>
		<xsd:attributeGroup ref="named.design.note.attrs"/>
		<xsd:attributeGroup ref="renderpassthrough.attrs"/>
		<xsd:attributeGroup ref="form.fieldindex.attrs"/>
	</xsd:complexType>

	<xsd:complexType name="page">
		<xsd:sequence>
			<xsd:group ref="named.design.note.prolog"/>
			<xsd:element name="globals" type="globals" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="code" type="code" minOccurs="0" maxOccurs="unbounded"/>
			<xsd:element name="actionbar" type="actionbar" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="background" type="background" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="body" type="body"/>
			<xsd:group ref="note.epilog"/>
		</xsd:sequence>
		<xsd:attributeGroup ref="named.design.note.attrs"/>
		<xsd:attributeGroup ref="link.color.attrs"/>
		<xsd:attributeGroup ref="reading.order.attrs"/>
		<xsd:attribute name="bgcolor" type="xsd:string" use="optional"/>
		<xsd:attributeGroup ref="form.focus.attrs"/>
		<xsd:attributeGroup ref="renderpassthrough.attrs"/>
	</xsd:complexType>

    <!-- **********************************************************************
     * ComplexType:  form
     * Description:  
     *
     * Attributes:
     * version, maintenanceversion, milestonebuild, replicaid:
     *     See comments for attributeGroup root.attrs.
     * resourcename:
     *     Data source option - Default data connection.
     * metadataname:
     *     Data source option - Default metadata object.
     * allowautosave:
     *     Allow documents using this form to be auto-saved.
     * nofieldindex:
     *     Do not add field names to field index.
     *********************************************************************** -->
	<xsd:complexType name="form">
		<xsd:complexContent>
			<xsd:extension base="page">
				<xsd:attribute name="inherit" type="xsd:boolean" use="optional" default="false"/>
				<xsd:attribute name="mailable" type="xsd:boolean" use="optional" default="false"/>
				<xsd:attribute name="type" type="form.types" use="optional" default="document"/>
				<xsd:attribute name="recalc" type="xsd:boolean" use="optional" default="false"/>
				<xsd:attribute name="storeform" type="xsd:boolean" use="optional" default="false"/>
				<xsd:attribute name="editonopen" type="xsd:boolean" use="optional" default="false"/>
				<xsd:attribute name="anonymous" type="xsd:boolean" use="optional" default="false"/>
				<xsd:attribute name="nofieldexchange" type="xsd:boolean" use="optional" default="false"/>
				<xsd:attribute name="versions" type="form.versions" use="optional" default="none"/>
				<xsd:attribute name="manualversion" type="xsd:boolean" use="optional" default="false"/>
				<xsd:attribute name="inheritdoc" type="form.inheritdocs" use="optional" default="none"/>
				<xsd:attribute name="inheritdocfield" type="xsd:string" use="optional"/>
				<xsd:attribute name="contextpane" type="form.contextpanes" use="optional" default="hide"/>
				<xsd:attribute name="mergeconflicts" type="xsd:boolean" use="optional"/>
				<xsd:attribute name="conflictaction" type="form.conflictactions" use="optional" default="createconflicts"/>
				<xsd:attribute name="resourcename" type="xsd:string" use="optional"/>
				<xsd:attribute name="metadataname" type="xsd:string" use="optional"/>
				<xsd:attribute name="signdocuments" type="xsd:boolean" use="optional" default="false"/>
				<xsd:attribute name="allowautosave" type="xsd:boolean" use="optional" default="false"/>
				<xsd:attributeGroup ref="form.fieldindex.attrs"/>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

    <!-- **********************************************************************
     * attributeGroup:  named.design.note.attrs.base
     * Description:  Groups attributes alias and common that are valid on some 
     *	             or most named design elements.
     *               Includes design.notes.attrs attributeGroup.
     *
     * attributeGroup:  named.design.note.attrs
     * Description:  Groups attributes name, alias and comment, where name is 
     *               an optional attribute. Attributes that are valid on some or 
     *               most named design elements.
     *               Note that not all of these attributes are valid on all
     *               design elements.  Many of the design elements specified
     *               here list which of the attributes they support.
     *
     * attributeGroup:  namerequired.design.note.attrs
     * Description:  Groups attributes name, alias and comment, where name is 
     *               a required attribute.
     *
     * Attributes:
     * name:
     *     The design element's name.
     * alias:
     *     An alternate name (this is often used programmatically).  Some
     *     elements allow this attribute to contain more than one alias,
     *     separated by vertical bars (e.g. alias='smith|jones').
     * comment:
     *     A comment for the design element which is displayed in the
     *     Domino Designer.
     *********************************************************************** -->
	<xsd:attributeGroup name="named.design.note.attrs.base">
		<xsd:attributeGroup ref="design.note.attrs"/>
		<xsd:attribute name="alias" type="xsd:string" use="optional"/>
		<xsd:attribute name="comment" type="xsd:string" use="optional"/>
	</xsd:attributeGroup>

	<xsd:attributeGroup name="named.design.note.attrs">
		<xsd:attributeGroup ref="named.design.note.attrs.base"/>
		<xsd:attribute name="name" type="xsd:string" use="optional"/>
	</xsd:attributeGroup>

	<xsd:attributeGroup name="namerequired.design.note.attrs">
		<xsd:attributeGroup ref="named.design.note.attrs.base"/>
		<xsd:attribute name="name" type="xsd:string" use="required"/>
	</xsd:attributeGroup>
	
	<xsd:attributeGroup name="link.color.attrs">
		<xsd:attribute name="activelinkcolor" type="xsd:string" use="optional"/>
		<xsd:attribute name="visitedlinkcolor" type="xsd:string" use="optional"/>
		<xsd:attribute name="unvisitedlinkcolor" type="xsd:string" use="optional"/>
	</xsd:attributeGroup>

	<xsd:simpleType name="form.types">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="document"/>
			<xsd:enumeration value="response"/>
			<xsd:enumeration value="responsetoresponse"/>
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:simpleType name="form.versions">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="none"/>
			<xsd:enumeration value="newresponse"/>
			<xsd:enumeration value="oldresponse"/>
			<xsd:enumeration value="newsibling"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="form.inheritdocs">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="none"/>
			<xsd:enumeration value="link"/>
			<xsd:enumeration value="richtext"/>
			<xsd:enumeration value="collapsed"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="form.contextpanes">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="hide"/>
			<xsd:enumeration value="link"/>
			<xsd:enumeration value="parent"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="form.conflictactions">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="createconflicts"/>
			<xsd:enumeration value="donotcreateconflicts"/>
			<xsd:enumeration value="mergeconflicts"/>
			<xsd:enumeration value="mergenoconflicts"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:attributeGroup name="form.focus.attrs">
		<xsd:attribute name="noinitialfocus" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="nofocusonf6" type="xsd:boolean" use="optional" default="false"/>
	</xsd:attributeGroup>
	<xsd:attributeGroup name="form.fieldindex.attrs">
		<xsd:attribute name="nofieldindex" type="xsd:boolean" use="optional" default="false"/>
	</xsd:attributeGroup>

	<xsd:complexType name="helpaboutdocument">
		<xsd:sequence>
			<xsd:group ref="design.note.prolog"/>
			<xsd:element name="background" type="background" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="body" type="body"/>
			<xsd:group ref="note.epilog"/>
		</xsd:sequence>
		<xsd:attributeGroup ref="design.note.attrs"/>
		<xsd:attribute name="bgcolor" type="xsd:string" use="optional"/>
		<xsd:attributeGroup ref="renderpassthrough.attrs"/>
	</xsd:complexType>

    <!-- **********************************************************************
     * SimpleType:   design.note.hide.tokens
     * Description:  Enumerates all possible values for hide attribute from 
     *								the design.note.attrs attribute group
     * v4:			Hides from V4 or later clients.
	 * v4strict:	Hides from V4 clients only.
	 * v5:			Is not yet used.
 	 * notes		Hides from a notes client.
	 * web:			Hides from a web client.
	 * mobile:		Hides from a mobile client.
	 * design:  Hides from design list.  Used for imageresource for database icon.
	 *
     *********************************************************************** -->
	<xsd:simpleType name="design.note.hide.tokens">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="v3"/>
			<xsd:enumeration value="v4"/>
			<xsd:enumeration value="v4strict"/>
			<xsd:enumeration value="v5"/>
			<xsd:enumeration value="notes"/>
			<xsd:enumeration value="web"/>
			<xsd:enumeration value="mobile"/>
			<xsd:enumeration value="design"/>
		</xsd:restriction>
	</xsd:simpleType>

    <!-- **********************************************************************
     * SimpleType:   design.note.hide
     * Description:  Provides a list of design.note.hide.tokens
     *********************************************************************** -->
	<xsd:simpleType name="design.note.hide">
		<xsd:list itemType="design.note.hide.tokens"/>
	</xsd:simpleType>

    <!-- **********************************************************************
     * attributeGroup:  design.note.attrs
     * Description:  Attributes that are valid on some or most design elements.
     *               Note that not all of these attributes are valid on all
     *               design elements.  Many of the design elements specified
     *               here list which of the attributes they support.
     *
     * Includes note.attrs attributeGroup.
     * Attributes:
     * hide:
     *     A list of zero or more values delimited by white space or commas,
     *     which indicate situations where the design element should be hidden.
     *       Value:    Hide from:
     *       v3        Version 3 of Notes.
     *       v4        Version 4 of Notes.
     *       v5        Version 5 of Notes.
     *       notes     The Notes client.
     *       web       Web browsers.
     *       mobile    Mobile device, such as a mobile phone or hand-held
     *                 computer.
     * nocompose:
     *     Indicates that the design element should not appear in Create menus.
     * noquery:
     *     Indicates a form that should not be used in query by form.
     * norenderv3:
     *     Indicates whether a subform should be rendered in a parent form.
     * insertdialog:
     *     Subforms with this "true" are offered in the Insert Subform dialog.
     * newinsertdialog:
     *     If "true" for a subform, the subform will be offered as insertable
     *     when new forms are created.
     * otherdialog:
     *     Indicates a form that is placed in Other... dialog.
     * noreplace:
     *     Prevents the design element from being modified during a refresh or
     *     replace.
     * readonly:
     *     Causes the design element to be read-only on the Web.  Applies only
     *     to certain design elements such as imageresource and for those
     *     elements implicitly defaults to false.
     * propagatenoreplace:
     *     Selects so that if a database inherits this design element, the
     *     noreplace attribute is also inherited and remains if effect.
     * useapplet:
     *     Use appropriate applet when serving the design element to a Web
     *     browser.
     * treatashtml:
     *     Treat the content of this design element as plain HTML, do not
     *     convert styled text to HTML.
     * htmlallfields:
     *     Controls whether a form generates HTML for information about hidden
     *     fields on the form.
     * publicaccess:
     *     Makes the design element available for public access, even when the
     *     database ACL normally would not allow access to it.
     * language:
     *     For a database with multilingual='true', associates a language and
     *     region with a design element in standard format.  For example,
     *     language='EN-US' specifies English as the language and the United
     *     States as the region.
     * default:
     *     Some kinds of design elements (forms and views, for example) can
     *     have default instances.  This attribute indicates which instance
     *     is the default.
     * private:
     *     Is this a private design element?
     * designerversion:
     *     The version of the Designer needed to successfully edit this
     *     design element.
     * fromtemplate:
     *     The name of the template from which the design element might
     *     inherit changes.
     *********************************************************************** -->
	<xsd:attributeGroup name="design.note.attrs">
		<xsd:attributeGroup ref="note.attrs"/>
		<xsd:attribute name="hide" type="design.note.hide" use="optional"/>
		<xsd:attribute name="nocompose" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="noquery" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="norenderv3" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="insertdialog" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="newinsertdialog" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="otherdialog" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="noreplace" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="readonly" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="propagatenoreplace" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="useapplet" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="treatashtml" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="htmlallfields" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="publicaccess" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="language" type="xsd:string" use="optional"/>
		<xsd:attribute name="default" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="private" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="designerversion" type="xsd:string" use="optional"/>
		<xsd:attribute name="fromtemplate" type="xsd:string" use="optional"/>
	</xsd:attributeGroup>

	<xsd:complexType name="helpusingdocument">
		<xsd:sequence>
			<xsd:group ref="design.note.prolog"/>
			<xsd:element name="background" type="background" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="body" type="body"/>
			<xsd:group ref="note.epilog"/>
		</xsd:sequence>
		<xsd:attributeGroup ref="design.note.attrs"/>
		<xsd:attribute name="bgcolor" type="xsd:string" use="optional"/>
		<xsd:attributeGroup ref="renderpassthrough.attrs"/>
	</xsd:complexType>
	<xsd:complexType name="sharedfield">
		<xsd:sequence>
			<xsd:group ref="named.design.note.prolog"/>
			<xsd:element name="field" type="field"/>
			<xsd:group ref="note.epilog"/>
		</xsd:sequence>
		<xsd:attributeGroup ref="named.design.note.attrs"/>
	</xsd:complexType>
	<xsd:complexType name="body">
		<xsd:sequence>
			<xsd:element name="richtext" type="richtext"/>
		</xsd:sequence>
	</xsd:complexType>

	<!-- **********************************************************************
	 * renderpassthrough attribute group
	 * renderpassthrough appears in several places ... this group defines the
	 * attribute in one place
	 *
	 * renderpassthrough indicates that passthrough html should be rendered in the
	 *    notes client.
	-->
	<xsd:attributeGroup name="renderpassthrough.attrs">
		<xsd:attribute name="renderpassthrough" type="xsd:boolean" use="optional" default="false"/>
	</xsd:attributeGroup>

    <!-- **********************************************************************
     * ComplexType:  dataconnection
     * Description:  Describes a Data Connection Resource design element.
     *
     * Attributes:
     * version, maintenanceversion, milestonebuild, replicaid:
     *     See comments for attributeGroup root.attrs.
     * From named.design.note.attrs:
     *     name, alias, comment, fromtemplate, noreplace, propagatenoreplace,
     *     language
     * class:
     *     The class of application to connect to, i.e. the type of database.
     * type:
     *     The type of connection.  Certain databases, such as db2 and oracle,
     *     have native drivers, otherwise use a generic one such as odbc2 or
     *     oledb.
     * username:
     * password:
     *     The username and password of the system to connect to.
     * database:
     * hoststring:
     * sqlserver:
     * datasource:
     *     The data source that maps to the external application to access.
     *     Which information is necessary depends on the type of database to
     *     connect to.
     * objecttype:
     *     The type of object to connect to.
     * objectowner:
     *     The User ID for the owner of the object to connect to.
     * objectname:
     *     The name of the object to connect to.
     * objectopen:
     * objectupdate:
     * objectcreate:
     * objectdelete:
     *     For objecttype='procedure', the procedure names for any of the
     *     document events that will trigger the procedure.
     * connections:
     *     Maximum number of concurrent connections for the data connection.
     * blockkeyfieldupdates:
     *     Prevents the value of a key field from changing.
     * updatechangedfieldsonly:
     *     Prevents any updates to fields in the external data source unless
     *     their corresponding fields in the Notes document have been edited.
     * disablehttpcaching:
     *     
     * fieldsgetdecserrors:
     *     
     * spacetrim:
     *     Specifies whether to trim trailing spaces on non-key fields.
     * conflictdetection:
     *     Ensures that the external data has not changed since the Notes
     *     document was opened.
     * ondatamismatch:
     *     Specifies what should happen when an error occurs.
     * onmissingrecord:
     *     Specifies what should happen when a requested record is missing.
     * datajournaling:
     *     For type='db2', enables SQL querying for a non-journaled data source.
     * oledbprovider:
     *     For type='oledb', the programmatic ID for the OLE DB provider to use.
     * oledbdatasource:
     *     
     * oledbdatabase:
     *     
     * oledbproviderstring:
     *     For type='oledb', the required provider string values.
     * oledbauthentication:
     *     For type='oledb', the name of any authentication server used by the
     *     provider.
     * singlethreading:
     *     For type='odbc2', protects the ODBC driver from multithreaded
     *     execution.
     *********************************************************************** -->
	<xsd:complexType name="dataconnection">
		<xsd:sequence>
			<xsd:group ref="named.design.note.prolog"/>
			<xsd:group ref="note.epilog"/>
		</xsd:sequence>
		<xsd:attributeGroup ref="named.design.note.attrs"/>
		<xsd:attribute name="class" type="dataconnection.class" use="required"/>
		<xsd:attribute name="type" type="dataconnection.types" use="required"/>
		<xsd:attribute name="username" type="xsd:string" use="optional"/>
		<xsd:attribute name="password" type="xsd:string" use="optional"/>
		<xsd:attribute name="database" type="xsd:string" use="optional"/>
		<xsd:attribute name="hoststring" type="xsd:string" use="optional"/>
		<xsd:attribute name="sqlserver" type="xsd:string" use="optional"/>
		<xsd:attribute name="datasource" type="xsd:string" use="optional"/>
		<xsd:attribute name="objecttype" type="dataconnection.object.types" use="optional"/>
		<xsd:attribute name="objectowner" type="xsd:string" use="optional"/>
		<xsd:attribute name="objectname" type="xsd:string" use="optional"/>
		<xsd:attribute name="objectopen" type="xsd:string" use="optional"/>
		<xsd:attribute name="objectupdate" type="xsd:string" use="optional"/>
		<xsd:attribute name="objectcreate" type="xsd:string" use="optional"/>
		<xsd:attribute name="objectdelete" type="xsd:string" use="optional"/>
		<xsd:attribute name="connections" type="xsd:integer" use="optional" default="1"/>
		<xsd:attribute name="blockkeyfieldupdates" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="updatechangedfieldsonly" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="disablehttpcaching" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="fieldsgetdecserrors" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="spacetrim" type="dataconnect.spacetrim.values" use="optional" default="none"/>
		<xsd:attribute name="conflictdetection" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="ondatamismatch" type="dataconnection.ondatamismatch.values" use="optional" default="precisionloss"/>
		<xsd:attribute name="onmissingrecord" type="dataconnection.onmissingrecord.values" use="optional" default="error"/>
		<xsd:attributeGroup ref="dataconnection.customizedproperties.values"/>
	</xsd:complexType>
	<xsd:simpleType name="dataconnection.class">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="rdbms"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="dataconnection.types">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="db2"/>
			<xsd:enumeration value="oracle"/>
			<xsd:enumeration value="sybase"/>
			<xsd:enumeration value="odbc2"/>
			<xsd:enumeration value="oracle8"/>
			<xsd:enumeration value="oledb"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="dataconnection.object.types">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="table"/>
			<xsd:enumeration value="view"/>
			<xsd:enumeration value="procedure"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="dataconnect.spacetrim.values">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="none"/>
			<xsd:enumeration value="nonkeyfields"/>
			<xsd:enumeration value="allfields"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="dataconnection.ondatamismatch.values">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="error"/>
			<xsd:enumeration value="precisionloss"/>
			<xsd:enumeration value="datatruncation"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="dataconnection.onmissingrecord.values">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="error"/>
			<xsd:enumeration value="ignore"/>
			<xsd:enumeration value="externalrecord"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:attributeGroup name="dataconnection.customizedproperties.values">
		<xsd:attribute name="datajournaling" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="oledbprovider" type="xsd:string" use="optional"/>
		<xsd:attribute name="oledbdatasource" type="xsd:string" use="optional"/>
		<xsd:attribute name="oledbdatabase" type="xsd:string" use="optional"/>
		<xsd:attribute name="oledbproviderstring" type="xsd:string" use="optional"/>
		<xsd:attribute name="oledbauthentication" type="xsd:string" use="optional"/>
		<xsd:attribute name="singlethreading" type="xsd:boolean" use="optional"/>
	</xsd:attributeGroup>
	<xsd:complexType name="code">
		<xsd:choice>
			<xsd:element name="formula" type="formula"/>
			<xsd:element name="javascript" type="javascript"/>
			<xsd:element name="lotusscript" type="lotusscript"/>
			<xsd:element name="javaproject" type="javaproject"/>
			<xsd:element name="simpleaction" type="simpleaction" minOccurs="1" maxOccurs="unbounded"/>
			<xsd:element name="wsdl" type="wsdl"/>
		</xsd:choice>
		<xsd:attribute name="event" type="xsd:string" use="required"/>
		<xsd:attribute name="for" type="xsd:token" use="optional"/>
		<xsd:attribute name="enabled" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="level" type="xsd:integer" use="optional"/>
	</xsd:complexType>
	<xsd:complexType name="javascript" mixed="true">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="nonxmlchar" type="nonxmlchar"/>
		</xsd:choice>
	</xsd:complexType>
	<xsd:complexType name="lotusscript" mixed="true">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="nonxmlchar" type="nonxmlchar"/>
		</xsd:choice>
	</xsd:complexType>
	<xsd:complexType name="java" mixed="true">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="nonxmlchar" type="nonxmlchar"/>
		</xsd:choice>
		<xsd:attribute name="name" type="xsd:string" use="required"/>
	</xsd:complexType>

    <!-- **********************************************************************
     * ComplexType:  javaproject
     * Description:  A Java "project" - holds multiple Java sources, resources,
     *               and archives, and possibly references to Java script
     *               libraries and applet resource files.
     *               Used by constructs within Domino that contain Java code -
     *               javaapplet within richtext, appletresource, agent,
     *               scriptlibrary.
     *
     * Attributes:
     * class:
     *     The name of the primary Java class; use JavaAgent.class for agents.
     *     This is a required attribute except when contained within an 
     *     appletresource element.
     * codepath:
     *     Specifies the container of the Java files.  Value depends on the
     *     context in which it is used.  Design elements that can contain Java
     *     code contain a javaproject whose codepath defaults to the value that
     *     the Notes Designer stores.  A javaapplet element contains a
     *     javaproject whose codepath is 'notes:///./$FILE' if the applet files
     *     are stored within Notes, and a URL if an applet on a Web server is
     *     referenced.  In the latter case, the javaproject doesn't have any
     *     element content.
     *     Any use of javaproject can use a codepath which specifies a
     *     filesystem path for a directory.  The Java files will thus be
     *     imported from the filesystem.  In this case, the contained java,
     *     javaresource, and javaarchive elements do not have any content, only
     *     the name attribute that specifies the file name.
     * imported:
     *     A value of true specifies Imported Java.  The default value of false
     *     specifies Java.  From the perspective of the Notes Designer, Imported
     *     Java code must be imported from the filesystem (or script libraries),
     *     thus the javaproject must specify a codepath that, together with the
     *     name attribute on contained java, javaresource, and javaarchive
     *     elements, specifies the full path of each file.  These elements may
     *     have content, which means that they are created on import from the
     *     content rather than from the filesystem files, but the codepath is
     *     retained on import for purposes of re-importing from the filesystem
     *     files via the Designer.
     * compiledebug:
     *     Compile Java code with debugging info (valid within agents,
     *     implicitly defaults to false).
     *********************************************************************** -->
	<xsd:complexType name="javaproject">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="java" type="java"/>
			<xsd:element name="javaresource" type="javaresource"/>
			<xsd:element name="javaarchive" type="javaarchive"/>
			<xsd:element name="sharedlibraryref" type="sharedlibraryref"/>
			<xsd:element name="appletresourcefileref" type="appletresourcefileref"/>
		</xsd:choice>
		<xsd:attribute name="class" type="xsd:string" use="optional"/>
		<xsd:attribute name="codepath" type="xsd:string" use="optional"/>
		<xsd:attribute name="imported" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="compiledebug" type="xsd:boolean" use="optional"/>
	</xsd:complexType>

    <!-- **********************************************************************
     * ComplexType:  javaresource
     * Description:  A Java resource - class, gif, etc.  A Java source file, in
     *               its binary form, can also be represented by this element.
     *               Contains Base64 data.
     *
     * Attributes:
     * name:
     *     File name of the resource relative to the javaproject codepath.
     *********************************************************************** -->
	<xsd:complexType name="javaresource">
		<xsd:simpleContent>
			<xsd:extension base="xsd:string">
				<xsd:attribute name="name" type="xsd:string" use="required"/>
			</xsd:extension>
		</xsd:simpleContent>
	</xsd:complexType>

    <!-- **********************************************************************
     * ComplexType:  javaarchive
     * Description:  A Java archive - jar.
     *               Contains Base64 data.
     *
     * Attributes:
     * name:
     *     File name of the jar relative to the javaproject codepath.
     *********************************************************************** -->
	<xsd:complexType name="javaarchive">
		<xsd:simpleContent>
			<xsd:extension base="xsd:string">
				<xsd:attribute name="name" type="xsd:string" use="required"/>
			</xsd:extension>
		</xsd:simpleContent>
	</xsd:complexType>

    <!-- **********************************************************************
     * ComplexType:  appletresourcefileref
     * Description:  A reference to a file within an applet resource design
     *               element.  Only valid for javaproject elements that are
     *               contained within javaapplet elements.
     *
     * Attributes:
     * database:
     *     The replica ID of the database containing the applet resource.  If
     *     not specified, it defaults to the current database.
     * appletresource:
     *     The name of the applet resource design note.
     * file:
     *     The name of a file within the applet resource.
     *********************************************************************** -->
	<xsd:complexType name="appletresourcefileref">
		<xsd:attribute name="database" type="noteshex" use="optional"/>
		<xsd:attribute name="appletresource" type="xsd:string" use="required"/>
		<xsd:attribute name="file" type="xsd:string" use="required"/>
	</xsd:complexType>

    <!-- **********************************************************************
     * ComplexType:  sharedlibraryref
     * Description:  References a shared script library by name.  Only valid
     *               javaproject elements that are contained within agent or
     *               scriptlibrary elements.
     *
     * Attributes:
     * name:
     *     The name of the shared library design note.
     *********************************************************************** -->
	<xsd:complexType name="sharedlibraryref">
		<xsd:attribute name="name" type="xsd:string" use="required"/>
	</xsd:complexType>

<!-- **********************************************************************
     * ComplexType:  simpleaction
     * Description:  Represents a simple action. The amount of data differs 
     *               between the different types of simple actions and most
     *               are represented with an empty simpleaction tag with 
     *               one or two attributes. The more complex actions, such
     *               as sendmail, are represented with a custom child 
     *               element.
     *
     * Attributes:
     * action:   
     *     The type of simple action.
     * folder: 
     *     Specifies the target folder for the copytofolder, movetofolder, and
     *     removefromfolder actions.
     * agent:   
     *     Specifies the agent for the runagent action.
     * server:   
     *     .
     * file:   
     *     .
     * field:   
     *     .
     * value:   
     *     .
     * appendvalue:   
     *     .
     * formulatype:   
     *     .
     *********************************************************************** -->
	<xsd:complexType name="simpleaction">
		<xsd:choice minOccurs="0" maxOccurs="1">
			<xsd:element name="modifybyformaction" type="modifybyformaction"/>
			<xsd:element name="sendreplyaction" type="sendreplyaction"/>
			<xsd:element name="sendmailaction" type="sendmailaction"/>
			<xsd:element name="sendnewsletteraction" type="sendnewsletteraction"/>
			<xsd:element name="formula" type="formula"/>
		</xsd:choice>
		<xsd:attribute name="action" type="simpleaction.types" use="required"/>
		<xsd:attribute name="folder" type="xsd:string" use="optional"/>
		<xsd:attribute name="agent" type="xsd:string" use="optional"/>
		<xsd:attribute name="server" type="xsd:string" use="optional"/>
		<xsd:attribute name="file" type="xsd:string" use="optional"/>
		<xsd:attribute name="field" type="xsd:string" use="optional"/>
		<xsd:attribute name="value" type="xsd:string" use="optional"/>
		<xsd:attribute name="appendvalue" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="formulatype" type="formula.types" use="optional"/>
	</xsd:complexType>

<!-- **********************************************************************
     * SimpleType:   simpleaction.types
     * Description:  Enumerates all possible values for the simpleaction 
     *               element's action attribute.
     *********************************************************************** -->
	<xsd:simpleType name="simpleaction.types">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="copytodatabase"/>
			<xsd:enumeration value="copytofolder"/>
			<xsd:enumeration value="delete"/>
			<xsd:enumeration value="markread"/>
			<xsd:enumeration value="markunread"/>
			<xsd:enumeration value="modifyfield"/>
			<xsd:enumeration value="modifybyform"/>
			<xsd:enumeration value="movetofolder"/>
			<xsd:enumeration value="removefromfolder"/>
			<xsd:enumeration value="sendreply"/>
			<xsd:enumeration value="runagent"/>
			<xsd:enumeration value="send"/>
			<xsd:enumeration value="sendmail"/>
			<xsd:enumeration value="sendnewsletter"/>
			<xsd:enumeration value="runformula"/>
		</xsd:restriction>
	</xsd:simpleType>

<!-- **********************************************************************
     * SimpleType:   formula.types
     * Description:  Enumerates all possible values for the simpleaction 
     *               element's formulatype attribute.
     *
     * modifydocs:   Formula modifies documents.
     * createdocs:   Formula creates new documents.
     * selectdocs:   Formula selects documents.
     *********************************************************************** -->
	<xsd:simpleType name="formula.types">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="modifydocs"/>
			<xsd:enumeration value="createdocs"/>
			<xsd:enumeration value="selectdocs"/>
		</xsd:restriction>
	</xsd:simpleType>

<!-- **********************************************************************
     * ComplexType:  modifybyformaction
     * Description:  Represents a modifybyform simple action.
     *
     * Attributes:
     * form:   
     *     The form to use as the template.
     *********************************************************************** -->
	<xsd:complexType name="modifybyformaction">
		<xsd:sequence>
			<xsd:element name="fieldchoice" type="fieldchoice" minOccurs="0" maxOccurs="unbounded"/>
		</xsd:sequence>
		<xsd:attribute name="form" type="xsd:string" use="required"/>
	</xsd:complexType>

<!-- **********************************************************************
     * ComplexType:  fieldchoice
     * Description:  Represents a single field in a modifybyform simple action
     *               or a formfieldschoice simple search. Note that the client
     *               converts the various field types to one of textlist,
     *               richtext, and object.  The importer mimics this behavior so
     *               while the other data types are valid on import the exporter
     *               will only emit one of the three that are saved to disk.
     *
     * Attributes:
     * name:   
     *     The name of the field.
     *********************************************************************** -->
	<xsd:complexType name="fieldchoice">
		<xsd:choice>
			<xsd:group ref="simple.types"/>
			<xsd:group ref="item.complex.types"/>
		</xsd:choice>
		<xsd:attribute name="name" type="xsd:string" use="required"/>
	</xsd:complexType>

<!-- **********************************************************************
     * ComplexType:  sendreplyaction
     * Description:  Represents a sendreply simple action.
     *
     * Attributes:
     * replytoall:   
     *     Specifies whether to reply to all all recipients.
	 * includedocument:
	 *     Specifies whether to include the document in the reply.
	 * replyonce:
	 *     .
     *********************************************************************** -->
	<xsd:complexType name="sendreplyaction">
		<xsd:sequence>
			<xsd:element name="text" type="text" minOccurs="0" maxOccurs="1"/>
		</xsd:sequence>
		<xsd:attribute name="replytoall" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="includedocument" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="replyonce" type="xsd:boolean" use="optional" default="false"/>
	</xsd:complexType>

<!-- **********************************************************************
     * ComplexType:  send.type
     * Description:  Represents the common content model for the sendto, 
     *               sendcc, sendbcc, and sendsubject elements.
     *
     *********************************************************************** -->
	<xsd:complexType name="send.type">
		<xsd:choice>
			<xsd:element name="text" type="text"/>
			<xsd:element name="textlist" type="textlist"/>
			<xsd:element name="formula" type="formula"/>
		</xsd:choice>
	</xsd:complexType>

<!-- **********************************************************************
     * ComplexType:  sendmailaction
     * Description:  Represents a sendmail simple action.
     *
     * Attributes:
	 * includedocument:
	 *     Specifies whether to include the document in the message.
	 * includedocument:
	 *     Specifies whether to include a link to the document in the 
	 *     message.
     *********************************************************************** -->
	<xsd:complexType name="sendmailaction">
		<xsd:sequence>
			<xsd:element name="sendto" type="send.type"/>
			<xsd:element name="sendcc" type="send.type" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="sendbcc" type="send.type" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="sendsubject" type="send.type" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="text" type="text" minOccurs="0" maxOccurs="1"/>
		</xsd:sequence>
		<xsd:attribute name="includedocument" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="includelink" type="xsd:boolean" use="optional" default="false"/>
	</xsd:complexType>

<!-- **********************************************************************
     * ComplexType:  sendnewsletteraction
     * Description:  Represents a sendnewsletter simple action.
     *
     * Attributes:
	 * view:
	 *     .
	 * gather:
	 *     .
	 * summary:
	 *     .
     *********************************************************************** -->
	<xsd:complexType name="sendnewsletteraction">
		<xsd:sequence>
			<xsd:element name="sendto" type="send.type"/>
			<xsd:element name="sendcc" type="send.type" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="sendbcc" type="send.type" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="sendsubject" type="send.type" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="text" type="text" minOccurs="0" maxOccurs="1"/>
		</xsd:sequence>
		<xsd:attribute name="view" type="xsd:string" use="optional"/>
		<xsd:attribute name="gather" type="xsd:integer" use="optional"/>
		<xsd:attribute name="summary" type="xsd:boolean" use="optional" default="true"/>
	</xsd:complexType>

	<xsd:complexType name="wsdl" mixed="true">
		<xsd:sequence>
			<xsd:any namespace="http://schemas.xmlsoap.org/wsdl/" maxOccurs="unbounded" processContents="skip"/>
		</xsd:sequence>
	</xsd:complexType>

	<xsd:complexType name="globals">
		<xsd:sequence>
			<xsd:element name="code" type="code" minOccurs="1" maxOccurs="unbounded"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="databasescript">
		<xsd:sequence>
			<xsd:group ref="named.design.note.prolog"/>
			<xsd:element name="code" type="code" minOccurs="0" maxOccurs="unbounded"/>
			<xsd:group ref="note.epilog"/>
		</xsd:sequence>
		<xsd:attributeGroup ref="design.note.attrs"/>
	</xsd:complexType>

    <!-- **********************************************************************
     * ComplexType:  field
     * Description:  
     *
     * Attributes:
     * externaldatasource:
     *     DEPRECATED: Never emitted by Exporter and ignored by Importer.
	 *     Importer determines that a field has an external data source
	 *     via the presence of a nonempty dataconnectionresource attribute.
	 * borderstyle:
	 *			single, inset, or none - indicates the style of the border around the
	 *			control.  Usually only valid if usenotesstyle=false or type=keyword
     *********************************************************************** -->
	<xsd:complexType name="field">
		<xsd:sequence>
			<xsd:element name="keywords" type="keywords" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="datetimeformat" type="datetimeformat" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="numberformat" type="numberformat" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="code" type="code" minOccurs="0" maxOccurs="unbounded"/>
		</xsd:sequence>
		<xsd:attribute name="name" type="xsd:string" use="required"/>
		<xsd:attribute name="type" type="field.types" use="required"/>
		<xsd:attribute name="kind" type="field.kinds" use="optional" default="editable"/>
		<xsd:attribute name="allowmultivalues" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="description" type="xsd:string" use="optional"/>
		<xsd:attribute name="taborder" type="xsd:integer" use="optional"/>
		<xsd:attribute name="choicesdialog" type="field.choicesdialogs" use="optional"/>
		<xsd:attribute name="view" type="xsd:string" use="optional"/>
		<xsd:attribute name="viewdatabase" type="xsd:string" use="optional"/>
		<xsd:attribute name="viewcolumn" type="xsd:integer" use="optional"/>
		<xsd:attribute name="lookupeachchar" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="lookupaddressonrefresh" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="protected" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="sign" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="seal" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="listinputseparators" type="xsd:NMTOKENS" use="optional"/>
		<xsd:attribute name="listdisplayseparator" type="list.separators" use="optional"/>
		<xsd:attribute name="computeaftervalidation" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="defaultfocus" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="showdelimiters" type="xsd:boolean" use="optional" default="true"/>
		<xsd:attribute name="allowtabout" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="useappletinbrowser" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="runexitingonchange" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="literalize" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="externaldatasource" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="usenotesstyle" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="width" type="xsd:string" use="optional"/>
		<xsd:attribute name="height" type="xsd:string" use="optional"/>
		<xsd:attribute name="heighttype" type="field.heights" use="optional"/>
		<xsd:attribute name="alignwithparagraph" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="multiline" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="fieldhint" type="xsd:string" use="optional"/>
		<xsd:attribute name="useoscontrolinbrowser" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="onlyallow" type="xsd:token" use="optional"/>
		<xsd:attribute name="firstdisplay" type="field.limitinput.kinds" use="optional"/>
		<xsd:attribute name="fieldhelp" type="xsd:string" use="optional"/>
		<xsd:attributeGroup ref="html.core.attrs"/>
		<xsd:attributeGroup ref="datasource.attrs"/>
		<xsd:attribute name="storageformat" type="field.storageformat.type" use="optional"/>
		<xsd:attribute name="borderstyle" type="keywords.borders" use="optional"/>
		<xsd:attribute name="bgcolor" type="xsd:string" use="optional"/>
	</xsd:complexType>
	<xsd:simpleType name="field.types">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="text"/>
			<xsd:enumeration value="number"/>
			<xsd:enumeration value="datetime"/>
			<xsd:enumeration value="richtext"/>
			<xsd:enumeration value="keyword"/>
			<xsd:enumeration value="names"/>
			<xsd:enumeration value="authors"/>
			<xsd:enumeration value="readers"/>
			<xsd:enumeration value="password"/>
			<xsd:enumeration value="formula"/>
			<xsd:enumeration value="timezone"/>
			<xsd:enumeration value="richtextlite"/>
			<xsd:enumeration value="color"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="field.choicesdialogs">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="none"/>
			<xsd:enumeration value="addressbook"/>
			<xsd:enumeration value="acl"/>
			<xsd:enumeration value="view"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="list.separators">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="space"/>
			<xsd:enumeration value="comma"/>
			<xsd:enumeration value="semicolon"/>
			<xsd:enumeration value="newline"/>
			<xsd:enumeration value="blankline"/>
			<xsd:enumeration value="none"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="field.heights">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="fixed"/>
			<xsd:enumeration value="dynamic"/>
			<xsd:enumeration value="proportional"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="field.limitinput.kinds">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="picture"/>
			<xsd:enumeration value="sharedimage"/>
			<xsd:enumeration value="attachment"/>
			<xsd:enumeration value="view"/>
			<xsd:enumeration value="datepicker"/>
			<xsd:enumeration value="sharedapplet"/>
			<xsd:enumeration value="text"/>
			<xsd:enumeration value="object"/>
			<xsd:enumeration value="calendar"/>
			<xsd:enumeration value="inbox"/>
			<xsd:enumeration value="graphic"/>
			<xsd:enumeration value="link"/>
			<xsd:enumeration value="thumbnail"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:attributeGroup name="datasource.attrs">
		<xsd:attribute name="externalname" type="xsd:string" use="optional"/>
		<xsd:attribute name="metadataname" type="xsd:string" use="optional"/>
		<xsd:attribute name="dataconnectionresource" type="xsd:string" use="optional"/>
		<xsd:attribute name="storelocally" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="dataconnectionfield" use="optional" default="data">
			<xsd:simpleType>
				<xsd:restriction base="xsd:string">
					<xsd:enumeration value="key"/>
					<xsd:enumeration value="data"/>
				</xsd:restriction>
			</xsd:simpleType>
		</xsd:attribute>
	</xsd:attributeGroup>
	<xsd:simpleType name="field.storageformat.type">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="htmlmime"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:complexType name="sharedfieldref">
		<xsd:attribute name="name" type="xsd:string" use="required"/>
	</xsd:complexType>
    <!-- **********************************************************************
     * ComplexType:  keywords
     * Description:  
     *
     * Attributes:
	 * borderstyle:
	 *	   DEPRECATED (v7): 
	 *			the attribute is moved to the field tag (there are field types other than
	 *			'keyword' that have border styles).  In addition the pre v7 values were
	 *			incorrect for certain fields.
	 *			If the attribute is present on keyword and not on field, the keyword attribute
	 *			will be imported (along with the pre v7 interpretation of the values).
     *********************************************************************** -->
	<xsd:complexType name="keywords">
		<xsd:choice minOccurs="0" maxOccurs="1">
			<xsd:element name="textlist" type="textlist"/>
			<xsd:element name="formula" type="formula"/>
		</xsd:choice>
		<xsd:attribute name="ui" type="keywords.ui" use="optional" default="dialoglist"/>
		<xsd:attribute name="borderstyle" type="keywords.borders" use="optional"/>
		<xsd:attribute name="allownew" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="recalconchange" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="recalcchoices" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="columns" type="xsd:integer" use="optional"/>
		<xsd:attribute name="helperbutton" type="xsd:boolean" use="optional" default="true"/>
		<xsd:attributeGroup ref="reading.order.attrs"/>
	</xsd:complexType>
	<xsd:simpleType name="keywords.ui">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="dialoglist"/>
			<xsd:enumeration value="checkbox"/>
			<xsd:enumeration value="radiobutton"/>
			<xsd:enumeration value="combobox"/>
			<xsd:enumeration value="listbox"/>
		</xsd:restriction>
	</xsd:simpleType>

    <!-- **********************************************************************
     * ComplexType:  subformref
     * Description:  A reference to an subform design element.
     *               Use either the name attribute for a reference by name, or
     *               the <code event='value'> child element for a computed
     *               reference.
     *
     * Attributes:
     * name:
     *     The name of the referenced subform.
     * database:
     *     The replicaid of the database containing the subform.
     *     The replicaid is represented as 1 to 16 hexadecimal digits.
     *     The following values are also allowed to reference specific
     *     commonly used databases:
     *     mailfile, addressbook, subscriptions, bookmarks
     *********************************************************************** -->
	<xsd:complexType name="subformref">
		<xsd:sequence>
			<xsd:element name="code" type="code" minOccurs="0" maxOccurs="1"/>
		</xsd:sequence>
		<xsd:attribute name="name" type="xsd:string" use="optional"/>
		<xsd:attribute name="database" type="xsd:string" use="optional"/>
	</xsd:complexType>

    <!-- **********************************************************************
     * ComplexType:  button
     * Description:  A button within richtext.
     *               The label for the button is in the character content.
     *
     * Attributes:
     * default:
     *     Make this button the default button on a dialog box.
     * characters:
     *     Only present when widthtype is fixedcharacter - specifies the number
     *     of characters for the button width.
     * maxlines:
     *     Only valid when widthtype is maximum - specifies the maximum number
     *     of lines of text for the button label.  If not present it implicitly
     *     defaults to 5.
     *********************************************************************** -->
	<xsd:complexType name="button" mixed="true">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="font" type="font"/>
			<xsd:element name="code" type="code"/>
		</xsd:choice>
		<xsd:attribute name="name" type="xsd:string" use="optional"/>
		<xsd:attribute name="width" type="xsd:string" use="optional" default="2in"/>
		<xsd:attribute name="widthtype" type="button.width.types" use="optional" default="maximum"/>
		<xsd:attribute name="wraptext" type="xsd:boolean" use="optional" default="true"/>
		<xsd:attribute name="bgcolor" type="xsd:string" use="optional"/>
		<xsd:attribute name="type" type="button.types" use="optional" default="normal"/>
		<xsd:attribute name="default" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="edge" type="button.edge.types" use="optional" default="system"/>
		<xsd:attribute name="characters" type="xsd:integer" use="optional"/>
		<xsd:attributeGroup ref="html.core.attrs"/>
		<xsd:attributeGroup ref="reading.order.attrs"/>
		<xsd:attribute name="maxlines" type="xsd:integer" use="optional"/>
	</xsd:complexType>
	<xsd:simpleType name="button.width.types">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="minimum"/>
			<xsd:enumeration value="maximum"/>
			<xsd:enumeration value="fixed"/>
			<xsd:enumeration value="fitcontent"/>
			<xsd:enumeration value="fixedcharacter"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="button.types">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="normal"/>
			<xsd:enumeration value="ok"/>
			<xsd:enumeration value="cancel"/>
			<xsd:enumeration value="help"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="button.edge.types">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="system"/>
			<xsd:enumeration value="square"/>
			<xsd:enumeration value="rounded"/>
		</xsd:restriction>
	</xsd:simpleType>

    <!-- **********************************************************************
     * ComplexType:  actionbar
     * Description:  An action bar which displays when a design element is
	 *               displayed in a client UI.  Occurs in the design elements
	 *               form, subform, page, view, folder.
	 *               The optional font child element specifies the font for
	 *               button text within the action bar.  The optional border
	 *               child element specifies detailed properties of the border
	 *               that surrounds the action bar.
     *
     * Attributes:
     * bgcolor:
     *     The background color of the action bar.
     * bordercolor:
     *     The color of the border that surrounds the action bar.
     * borderstyle:
     *     the style of the border
     * borderwidth:
     *     the width of the border
     * linestyle:
     *     the style of the line
     * align:
     *     The alignment of the buttons within the action bar - left (default)
	 *     or right.
     * useappletinbrowser:
     *     Display in a browser using a Java applet (rather than HTML)?
     * showdefaultrightclickitems
     *     Show default items in right-mouse menu (default true)
     *********************************************************************** -->
	<xsd:complexType name="actionbar">
		<xsd:sequence>
			<xsd:element name="actionbarstyle" type="actionbarstyle" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="actionbuttonstyle" type="actionbuttonstyle" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="font" type="font" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="border" type="border" minOccurs="0" maxOccurs="1"/>
			<xsd:choice minOccurs="0" maxOccurs="unbounded">
				<xsd:element name="action" type="action"/>
				<xsd:element name="sharedactionref" type="sharedactionref"/>
			</xsd:choice>
		</xsd:sequence>
		<xsd:attribute name="bgcolor" type="xsd:string" use="optional"/>
		<xsd:attribute name="bordercolor" type="xsd:string" use="optional"/>
		<xsd:attribute name="borderstyle" type="actionbar.borderstyle" use="optional" />
		<xsd:attribute name="borderwidth" type="xsd:string" use="optional" />
		<xsd:attribute name="linestyle" type="actionbar.linestyle" use="optional" />
		<xsd:attribute name="align" type="lr.aligns" use="optional" default="left"/>
		<xsd:attributeGroup ref="language.attrs"/>
		<xsd:attribute name="useappletinbrowser" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="showdefaultrightclickitems" type="xsd:boolean" use="optional" default="true"/>
	</xsd:complexType>

	<xsd:simpleType name="lr.aligns">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="left"/>
			<xsd:enumeration value="right"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="actionbar.borderstyle">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="none" />
			<xsd:enumeration value="fittowindow" />
			<xsd:enumeration value="fixedwidth" />
			<xsd:enumeration value="underbuttonsonly" />
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="actionbar.linestyle">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="single" />
			<xsd:enumeration value="double" />
			<xsd:enumeration value="triple" />
			<xsd:enumeration value="twoline" />
		</xsd:restriction>
	</xsd:simpleType>
    <!-- **********************************************************************
     * ComplexType:  actionbarstyle
     * Description:  Holds action bar size and background properties.  The
	 *               optional imageref content specifies the action bar
	 *               background image.  The optional font content is only
	 *               necessary if the height attribute is specified in ex units.
     *
     * Attributes:
     * height:
     *     Action bar height in px or ex units.
     * repeat:
     *     If the action bar has a background image, this specifies the repeat
	 *     pattern.  If omitted, 'tile' will be assumed.  Valid values:
	 *       once        Repeat once.
	 *       vrepeat     Repeat vertically.
	 *       hrepeat     Repeat horizontally.
	 *       tile        Tile.
	 *       centertile  Center based tiling.
	 *       resize      Size to fit.
	 *       center      Center.
     *********************************************************************** -->
	<xsd:complexType name="actionbarstyle">
		<xsd:sequence>
			<xsd:element name="font" type="font" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="imageref" type="imageref" minOccurs="0" maxOccurs="1"/>
		</xsd:sequence>
		<xsd:attribute name="height" type="xsd:string" use="optional"/>
		<xsd:attribute name="repeat" type="actionbar.background.repeats" use="optional"/>
	</xsd:complexType>

	<xsd:simpleType name="actionbar.background.repeats">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="once"/>
			<xsd:enumeration value="vrepeat"/>
			<xsd:enumeration value="hrepeat"/>
			<xsd:enumeration value="tile"/>
			<xsd:enumeration value="centertile"/>
			<xsd:enumeration value="resize"/>
			<xsd:enumeration value="center"/>
		</xsd:restriction>
	</xsd:simpleType>

    <!-- **********************************************************************
     * ComplexType:  actionbuttonstyle
     * Description:  Holds properties for buttons that appear within an
	 *               actionbar.
     *
     * Attributes:
     * bgcolor:
     *     Button background color.
     * heighttype:
	 *     The mechanism for determining the button height, used in conjunction
	 *     with the height attribute.  One of the following values:
	 *       default     Automatically determine the appropriate height.
     *       minimum     Like default, but a minimum size in pixels is given.
     *       fixed       Fixed size in pixels.
     *       background  The appropriate height to accomodate the background
	 *                   image.
     * height:
     *     Button height in pixels, when heighttype is fixed or minimum.
     * widthtype:
     *     The mechanism for determining the button width, used in conjunction
	 *     with the width attribute.  One of the following values:
	 *       default     Automatically determine the appropriate width.
     *       fixed       Fixed size in pixels.
     *       background  The appropriate width to accomodate the background
	 *                   image.
     * width:
     *     The button width, only if the width type is fixed.
     * margintype:
     *     The kind of margins above and below the buttons in the action bar.
	 *       default     Automatically determine the margins.
     *       fixed       Fixed size in pixels.
     * margin:
     *     Button margin in pixels, when margintype is fixed.
     * displayborder:
     *     Determines when a border is shown around the button.  One of the
	 *     following values:
	 *       onmouseover  When the mouse is placed over the button.
	 *       always       Always show a border.
	 *       never        Never show a border.
	 *       notesstyle   Use the border behavior of the Notes Client.
     * textalign:
     *     How to align button text - left, center, or right.
     * internalmargin:
     *     The margin above and below the text in a button, in pixels.
     * showdropdown:
     *     Should the dropdown arrow always be displayed (for an action with
	 *     children)?
     *********************************************************************** -->
	<xsd:complexType name="actionbuttonstyle">
		<xsd:sequence>
			<xsd:element name="imageref" type="imageref" minOccurs="0" maxOccurs="1"/>
		</xsd:sequence>
		<xsd:attribute name="bgcolor" type="xsd:string" use="optional"/>
		<xsd:attribute name="heighttype" type="actionbutton.height.types" use="optional" default="default"/>
		<xsd:attribute name="height" type="xsd:integer" use="optional"/>
		<xsd:attribute name="widthtype" type="actionbutton.width.types" use="optional" default="default"/>
		<xsd:attribute name="width" type="xsd:string" use="optional"/>
		<xsd:attribute name="margintype" type="actionbutton.margin.types" use="optional" default="default"/>
		<xsd:attribute name="margin" type="xsd:integer" use="optional"/>
		<xsd:attribute name="displayborder" type="actionbutton.displayborder.types" use="optional" default="onmouseover"/>
		<xsd:attribute name="textalign" type="simple.aligns" use="optional" default="left"/>
		<xsd:attribute name="internalmargin" type="xsd:string" use="optional" default="0"/>
		<xsd:attribute name="showdropdown" type="xsd:boolean" use="optional" default="false"/>
	</xsd:complexType>

	<xsd:simpleType name="actionbutton.height.types">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="default"/>
			<xsd:enumeration value="minimum"/>
			<xsd:enumeration value="fixed"/>
			<xsd:enumeration value="background"/>
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:simpleType name="actionbutton.width.types">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="default"/>
			<xsd:enumeration value="background"/>
			<xsd:enumeration value="fixed"/>
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:simpleType name="actionbutton.margin.types">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="default"/>
			<xsd:enumeration value="fixed"/>
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:simpleType name="actionbutton.displayborder.types">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="onmouseover"/>
			<xsd:enumeration value="always"/>
			<xsd:enumeration value="never"/>
			<xsd:enumeration value="notesstyle"/>
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:simpleType name="simple.aligns">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="left"/>
			<xsd:enumeration value="center"/>
			<xsd:enumeration value="right"/>
		</xsd:restriction>
	</xsd:simpleType>

    <!-- **********************************************************************
     * ComplexType:  action
     * Description:  An action in an action bar. If the action uses a shared
	 *               image for the graphic, an imageref child element contains
	 *               it.  Child code elements can specify the following.
     *               Code Type:    Valid Events:
     *               formula       click
	 *                             label         (To compute the action label.)
	 *                             displayvalue  (To determine the display value
	 *                                           for a checkbox action.)
	 *                             hidewhen      (To determine when the action
	 *                                           should be hidden.)
     *               simpleaction  action
     *               lotusscript   options, declarations, click, objectexecute,
     *                             initialize, terminate, user-defined
     *               javascript    onBlur, onClick, onDblClick, onFocus, onHelp,
     *                             onKeyDown, onKeyPress, onKeyUp, onMouseDown,
     *                             onMouseMove, onMouseOut, onMouseOver,
     *                             onMouseUp
     *
     * Attributes:
     * title:
     *     The name of the action.  A separate label for the action can be
	 *     specified using code formula content for the 'label' event.  This can
	 *     be straight text or a formula.
     * id:
     *     For actions in a shared action note, this attribute defines the
	 *     shared action's id.
     * displaytype:
     *     The action's display type; one of the following:
	 *       button         Display as a button.
	 *       checkbox       Display as a checkbox.  
	 *       menuseparator  Display as a menu separator.  In this case there
	 *                      is no code for the action.
     * targetframe:
     *     A target frame (in the current frameset) in which to display the
	 *     design element that the action opens, if applicable.
     * hide:
     *     A list of zero or more values delimited by white space or commas,
     *     which indicate conditions under which the action should be hidden.
     *       Value:        Condition:
     *       read          Document is opened for reading.
     *       edit          Document is opened for editing.
     *       preview       Document is previewed for reading.
     *       previewedit   Document is previewed for editing.
     *       notes         Viewed in any Notes client later than Release 4.6.
     *       web           Viewed through a Web browser.
     *       mobile        Viewed on a mobile device, such as a mobile phone or
     *                     hand-held computer.
	 *     A hide-when formula can also be specified using code formula content
	 *     for the 'hidewhen' event.
     * showinmenu:
     *     Show this action in the Actions menu?
     * showinbar:
     *     Show this action in the action bar?
     * showinrightbuttonmenu:
     * 	   New feature in R7.0. This action is under ActionInfo->Display Tab
     *	   Action is displayed when we right click the mouse button.
     * systemcommand:
     *     The action is a system action, one of the predefined actions that are
	 *     commonly used in views and forms.  Takes one of the following values:
	 *       categorize
	 *       edit
	 *       send
	 *       forward
	 *       movetofolder
	 *       removefromfolder
	 *       markread
	 *       markunread
	 *       openinnewwindow
	 *       print
	 *       delete
	 *       properties
	 *       cut
	 *       copy
	 *       copyasdoclink
	 *       copyastable
	 *       paste
	 *       open
	 *       bookmark
     * icon:
     *     The number of the built-in Notes icon to use for the action (if any).
     * graphicalign:
     *     How to align the button's graphic (specified via an imageref child
	 *     element) - left or right.
     * align:
     *     How to align the action within the action bar - left or right.
     * onlyiconinbar:
     *     Omit the action text in the action bar, i.e. only use the icon?
     * readingorder:
     *     Reading order of the the action text - lefttoright or righttoleft,
     * publishonolelaunch:
     * closewhenchosen:
     * docfocuswhenchosen:
     *     Specify how Notes workflow proceeds after the user activates the
	 *     action.
     *********************************************************************** -->
	<xsd:complexType name="action">
		<xsd:sequence>
			<xsd:element name="imageref" type="imageref" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="code" type="code" minOccurs="0" maxOccurs="unbounded"/>
		</xsd:sequence>
		<xsd:attribute name="title" type="xsd:string" use="optional"/>
		<xsd:attribute name="id" type="xsd:integer" use="optional"/>
		<xsd:attribute name="displaytype" type="action.types" use="optional" default="button"/>
		<xsd:attribute name="targetframe" type="xsd:string" use="optional"/>
		<xsd:attribute name="hide" type="xsd:token" use="optional" default=""/>
		<xsd:attribute name="showinmenu" type="xsd:boolean" use="optional" default="true"/>
		<xsd:attribute name="showinbar" type="xsd:boolean" use="optional" default="true"/>
		<xsd:attribute name="splitbutton" type="xsd:boolean" use="optional" />
		<xsd:attribute name="compappaction" type="xsd:string" use="optional"/>
		<xsd:attribute name="extattrs"	type="xsd:string" use="optional"/>
		<xsd:attribute name="showinrightbuttonmenu" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="systemcommand" type="action.systemcommands" use="optional"/>
		<xsd:attribute name="icon" type="xsd:integer" use="optional"/>
		<xsd:attribute name="graphicalign" type="lr.aligns" use="optional" default="left"/>
		<xsd:attribute name="align" type="lr.aligns" use="optional" default="left"/>
		<xsd:attribute name="onlyiconinbar" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attributeGroup ref="reading.order.attrs"/>
		<xsd:attributeGroup ref="notesflow.publishing.attrs"/>
	</xsd:complexType>

	<xsd:simpleType name="action.types">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="button"/>
			<xsd:enumeration value="checkbox"/>
			<xsd:enumeration value="menuseparator"/>
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:simpleType name="action.systemcommands">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="categorize"/>
			<xsd:enumeration value="edit"/>
			<xsd:enumeration value="send"/>
			<xsd:enumeration value="forward"/>
			<xsd:enumeration value="movetofolder"/>
			<xsd:enumeration value="removefromfolder"/>
			<xsd:enumeration value="removefromfolder"/>
			<xsd:enumeration value="markread"/>
			<xsd:enumeration value="markunread"/>
			<xsd:enumeration value="openinnewwindow"/>
			<xsd:enumeration value="print"/>
			<xsd:enumeration value="delete"/>
			<xsd:enumeration value="properties"/>
			<xsd:enumeration value="cut"/>
			<xsd:enumeration value="copy"/>
			<xsd:enumeration value="copyasdoclink"/>
			<xsd:enumeration value="copyastable"/>
			<xsd:enumeration value="paste"/>
			<xsd:enumeration value="open"/>
			<xsd:enumeration value="bookmark"/>
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:attributeGroup name="notesflow.publishing.attrs">
		<xsd:attribute name="publishonolelaunch" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="closewhenchosen" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="docfocuswhenchosen" type="xsd:boolean" use="optional"/>
	</xsd:attributeGroup>

    <!-- **********************************************************************
     * ComplexType:  sharedactionref
     * Description:  A reference to a shared action in a shared actions note.
     *               In a multilingual database, there may be more than one
     *               shared actions note.  The one to use is specified by the
     *               language attribute on the design element that contains the
     *               sharedactionref.  The id of the shared action is a unique
     *               number assigned by the Designer when the shared action is
     *               created.  In a multilingual database, this id is displayed
     *               and can be modified in the Shared Action property dialog.
     *               In other cases it may be necessary to use DXL Export or
     *               another tool to determine the id.
     *********************************************************************** -->
	<xsd:complexType name="sharedactionref">
		<xsd:sequence>
			<xsd:element name="action" type="action" minOccurs="0" maxOccurs="1"/>
		</xsd:sequence>
		<xsd:attribute name="id" type="xsd:integer" use="required"/>
	</xsd:complexType>

	<xsd:complexType name="sharedactions">
		<xsd:sequence>
			<xsd:group ref="design.note.prolog"/>
			<xsd:element name="action" type="action" minOccurs="0" maxOccurs="unbounded"/>
			<xsd:group ref="note.epilog"/>
		</xsd:sequence>
		<xsd:attributeGroup ref="design.note.attrs"/>
		<xsd:attribute name="maxid" type="xsd:integer" use="optional"/>
	</xsd:complexType>
    <!-- **********************************************************************
     * ComplexType:  view
     * Description:  View is a sorted list of documents. Views are the entry 
     *		     points to the data stored in a database. 
     * View Elements: named.design.note.prolog, globals,code,actionbar,column,
     *				  viewbackground
     *				  calendarformat element will exist if  attribute view.types is 
     *				  calendar
     * View Attributes: named.design.note.attrs, link.color.attrs, standard.view.folder.attrs
     *                  noviewformat, common.view.folder.attrs
     *					type: refers to standard view or calendar view. 
     *              
     *              
     *********************************************************************** -->
	 <xsd:complexType name="view">
		<xsd:sequence>
			<xsd:group ref="named.design.note.prolog"/>
			<xsd:element name="globals" type="globals" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="code" type="code" minOccurs="0" maxOccurs="unbounded"/>
			<xsd:element name="actionbar" type="actionbar" minOccurs="0" maxOccurs="1"/>
			<xsd:choice minOccurs="0" maxOccurs="unbounded">
				<xsd:element name="column" type="column"/>
				<xsd:element name="sharedcolumnref" type="sharedcolumnref"/>
			</xsd:choice>
			<xsd:element name="viewbackground" type="viewbackground" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="queryviewformat" type="queryviewformat" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="calendarformat" type="calendarformat" minOccurs="0" maxOccurs="1"/>
			<xsd:group ref="note.epilog"/>
		</xsd:sequence>
		<xsd:attributeGroup ref="named.design.note.attrs"/>
		<xsd:attributeGroup ref="link.color.attrs"/>
		<xsd:attributeGroup ref="standard.view.folder.attrs"/>
		<xsd:attributeGroup ref="common.view.folder.attrs"/>
		<xsd:attribute name="noviewformat" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="nonfolderdocs" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="type" type="view.typeslist" use="optional" default="standard"/>
	 </xsd:complexType>
	
	 <xsd:simpleType name="view.types">
		<xsd:restriction base = "xsd:string">
			<xsd:enumeration value= "standard"/>
			<xsd:enumeration value= "calendar"/>
			<xsd:enumeration value= "queryview"/>
		</xsd:restriction>
	 </xsd:simpleType>
	 
	<xsd:simpleType name="view.typeslist">
		<xsd:list itemType="view.types"/>
	</xsd:simpleType>	
	
	<!-- **********************************************************************
     * AttributeGroup:  common.view.folder.attrs
     * Description:     Attributes common to views, folders and calendar views             
     * 
     * Attributes:      hidecolumnheader, showswitcher, shownavigator, 
     *                  allowconversation, viewers, threadview are new attributes
     *                  under views for Eclipse (Java) based UI views.
     *     
     ************************************************************************-->
    <xsd:attributeGroup name="common.view.folder.attrs"> 
    	<xsd:attribute name="unreadmarks" use="optional">
			<xsd:simpleType>
				<xsd:restriction base="xsd:string">
					<xsd:enumeration value="none"/>
					<xsd:enumeration value="unreadonly"/>
					<xsd:enumeration value="standard"/>
				</xsd:restriction>
			</xsd:simpleType>
		</xsd:attribute>
				<xsd:attribute name="onrefresh" use="optional">
			<xsd:simpleType>
				<xsd:restriction base="xsd:string">
					<xsd:enumeration value="refreshtop"/>
					<xsd:enumeration value="refreshbottom"/>
					<xsd:enumeration value="refresh"/>
					<xsd:enumeration value="displayindicator"/>
				</xsd:restriction>
			</xsd:simpleType>
		</xsd:attribute>
		<xsd:attribute name="showmargin" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="extendlastcolumn" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="bgcolor" type="xsd:string" use="optional"/>
		<xsd:attribute name="unreadcolor" type="xsd:string" use="optional"/>
		<xsd:attribute name="uniquekeys" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="marginwidth" type="xsd:string" use="optional"/>
		<xsd:attribute name="belowheadermargin" type="xsd:string" use="optional"/>
		<xsd:attribute name="marginbgcolor" type="xsd:string" use="optional"/>
		<xsd:attribute name="logviewupdates" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="initialbuildrestricted" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="noserverindex" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="evaluateactions" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="allownewdocuments" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="desktopprivatefirstuse" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="privatefirstuse" type="xsd:boolean" use="optional"/>    
		<xsd:attribute name="direction" use="optional" default="lefttoright">
			<xsd:simpleType>
				<xsd:restriction base="xsd:string">
					<xsd:enumeration value="righttoleft"/>
					<xsd:enumeration value="lefttoright"/>
				</xsd:restriction>
			</xsd:simpleType>
		</xsd:attribute>
		<xsd:attribute name="indexrefresh" use="optional" default="autofirstuse">
			<xsd:simpleType>
				<xsd:restriction base="xsd:string">
					<xsd:enumeration value="autofirstuse"/>
					<xsd:enumeration value="automatic"/>
					<xsd:enumeration value="manual"/>
					<xsd:enumeration value="autobyinterval"/>
				</xsd:restriction>
			</xsd:simpleType>
		</xsd:attribute>
		<xsd:attribute name="indexrefreshinterval" type="xsd:integer" use="optional"/>
		<xsd:attribute name="indexdiscard" use="optional" default="inactive45days">
			<xsd:simpleType>
				<xsd:restriction base="xsd:string">
					<xsd:enumeration value="inactive45days"/>
					<xsd:enumeration value="aftereachuse"/>
					<xsd:enumeration value="inactivebyinterval"/>
				</xsd:restriction>
			</xsd:simpleType>
		</xsd:attribute>
		<xsd:attribute name="indexdiscardinterval" type="xsd:integer" use="optional"/>	
		<xsd:attribute name="shrinkrows" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="rowlinecount" type="xsd:integer" use="optional"/>
		<xsd:attribute name="rowspacing" use="optional">
			<xsd:simpleType>
				<xsd:restriction base="xsd:string">
					<xsd:enumeration value="1"/>
					<xsd:enumeration value="1.25"/>
					<xsd:enumeration value="1.5"/>
					<xsd:enumeration value="1.75"/>
					<xsd:enumeration value="2"/>
				</xsd:restriction>
			</xsd:simpleType>
		</xsd:attribute>
		<xsd:attribute name="hidecolumnheader" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="showswitcher" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="shownavigator" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="allowconversation" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="viewers" type="xsd:string" use="optional"/>
		<xsd:attribute name="threadview" type="xsd:string" use="optional"/>
		<xsd:attribute name="formatnoteid" type="unidhex" use="optional"/>
		<xsd:attribute name="selectionnoteclass" type="xsd:string" use="optional"/>
    </xsd:attributeGroup>
         
     <!-- **********************************************************************
     * AttributeGroup:  standard.view.folder.attrs
     * Description:     Attributes common to standard views and folders             
     * 
     * Comments: Added the following new attributes.
     *
     * Attributes:
     * indexrefresh: 
     * 		Auto, after first use: updates the view every time a user opens a view 
     * 		after the fist time
     * 		Automatic:updates view whether or not users open the database
     * 		Manual:relies on the user to refresh view.
     * 		Auto, atmost every n hours: controls how frequently the view index updates. 
     * 		Creates indexrefreshinterval attribute
     *
     * indexdiscard:
     * 		After each use: deletes view index as soon as the user closes the database
     * 		If inactive for n days: deletes view index if the view hasn't been used in 
     * 		a specified number of days.
     * 		preserves view index and appends updates to the existing index.
     * 		Creates indexdiscardinterval attribute        
     *********************************************************************** -->
	<xsd:attributeGroup name="standard.view.folder.attrs">
		<xsd:attribute name="opencollapsed" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="showresponsehierarchy" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="onopengoto" use="optional">
			<xsd:simpleType>
				<xsd:restriction base="xsd:string">
					<xsd:enumeration value="top"/>
					<xsd:enumeration value="bottom"/>
					<xsd:enumeration value="lastopened"/>
				</xsd:restriction>
			</xsd:simpleType>
		</xsd:attribute>
		<xsd:attribute name="headers" use="optional">
			<xsd:simpleType>
				<xsd:restriction base="xsd:string">
					<xsd:enumeration value="none"/>
					<xsd:enumeration value="simple"/>
					<xsd:enumeration value="beveled"/>
					<xsd:enumeration value="flat"/>
				</xsd:restriction>
			</xsd:simpleType>
		</xsd:attribute>
		<xsd:attribute name="altrowcolor" type="xsd:string" use="optional"/>
		<xsd:attribute name="totalscolor" type="xsd:string" use="optional"/>
		<xsd:attribute name="headerlinecount" type="xsd:integer" use="optional"/>
		<xsd:attribute name="defaultdesign" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="showinmenu" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="allowdocselection" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="headerbgcolor" type="xsd:string" use="optional"/>
		<xsd:attribute name="hidemarginborder" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="gridstyle" use="optional">
			<xsd:simpleType>
				<xsd:restriction base="xsd:string">
					<xsd:enumeration value="none"/>
					<xsd:enumeration value="solid"/>
					<xsd:enumeration value="dash"/>
					<xsd:enumeration value="dot"/>
					<xsd:enumeration value="dashdot"/>
				</xsd:restriction>
			</xsd:simpleType>
		</xsd:attribute>
		<xsd:attribute name="gridcolor" type="xsd:string" use="optional"/>
		<xsd:attribute name="noemptycategories" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="allowcustomizations" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="boldunreadrows" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="transparentunreadrows" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="colorizeicons" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="launchframeset" type="xsd:string" use="optional"/>	
		<xsd:attribute name="launchframe" type="xsd:string" use="optional"/>
		<xsd:attribute name="showhierarchies" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="deleteddocs" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="haslinkcolumn" type="xsd:boolean" use="optional"/>			
	</xsd:attributeGroup>
	<xsd:complexType name="folder">
		<xsd:sequence>
			<xsd:group ref="named.design.note.prolog"/>
			<xsd:element name="globals" type="globals" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="code" type="code" minOccurs="0" maxOccurs="unbounded"/>
			<xsd:element name="actionbar" type="actionbar" minOccurs="0" maxOccurs="1"/>
			<xsd:choice minOccurs="0" maxOccurs="unbounded">
				<xsd:element name="column" type="column"/>
				<xsd:element name="sharedcolumnref" type="sharedcolumnref"/>
			</xsd:choice>
			<xsd:element name="folderbackground" type="folderbackground" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="calendarformat" type="calendarformat" minOccurs="0" maxOccurs="1"/>
			<xsd:group ref="note.epilog"/>
		</xsd:sequence>
		<xsd:attributeGroup ref="named.design.note.attrs"/>
		<xsd:attributeGroup ref="link.color.attrs"/>
		<xsd:attributeGroup ref="standard.view.folder.attrs"/>
		<xsd:attributeGroup ref="common.view.folder.attrs"/>
	</xsd:complexType>
     <!-- **********************************************************************
     * Element:     Column
     * Description: Column Attributes
     * 
     * Comments:    Added the following new attributes.
     * Attributes:  deferindexcreation, extwindowwidth, extattrs, justifysecondrow
     *              viewisnarrow, sequence, tileviewer, linenumber are new attributes
     *              under column elements within Eclipse (Java) based UI options. 
     *        
     *********************************************************************** -->	
	<xsd:complexType name="column">
		<xsd:sequence>
			<xsd:element name="font" type="font" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="columnheader" type="columnheader" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="datetimeformat" type="datetimeformat" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="numberformat" type="numberformat" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="columnnamesformat" type="columnnamesformat" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="code" type="code" minOccurs="0" maxOccurs="unbounded"/>
			<xsd:element name="twistieimage" type="twistieimage" minOccurs="0" maxOccurs="1"/>
		</xsd:sequence>
		<xsd:attribute name="align" type="simple.aligns" use="optional" default="left"/>
		<xsd:attribute name="showasicons" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="resizable" type="xsd:boolean" use="optional" default="true"/>
		<xsd:attribute name="responsesonly" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="hidden" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="editable" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="twisties" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="sort" type="sort.orders" use="optional"/>
		<xsd:attribute name="sortnocase" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="sortnoaccent" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="separatemultiplevalues" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="categorized" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="resort" type="resort.options" use="optional"/>
		<xsd:attribute name="resorttoview" type="xsd:string" use="optional"/>
		<xsd:attribute name="resort2" type="sort.orders" use="optional"/>
		<xsd:attribute name="resort2column" type="xsd:integer" use="optional"/>
		<xsd:attribute name="totals" type="totals.options" use="optional"/>
		<xsd:attribute name="hidedetailrows" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="showaslinks" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="itemname" type="xsd:string" use="optional"/>
		<xsd:attribute name="width" type="xsd:float" use="optional"/>
		<xsd:attribute name="listseparator" type="list.separators" use="optional"/>
		<xsd:attribute name="flatinr5" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="showascolor" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="userdefinable" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="profiledocname" type="xsd:string" use="optional"/>
		<xsd:attribute name="usecolumnformula" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="hidecolumntitle" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="hideinr5" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="deferindexcreation" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="extwindowwidth" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="justifysecondrow" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="viewisnarrow" type="narrow.options" use="optional" default="top"/>
		<xsd:attribute name="sequence" type="xsd:integer" use="optional"/>
		<xsd:attribute name="tileviewer" type="tileviewer.options" use="optional" default="top"/>
		<xsd:attribute name="linenumber" type="xsd:integer" use="optional" default="1"/>
		<xsd:attribute name="extattrs" type="xsd:string" use="optional"/>
		<xsd:attribute name="publish" type="xsd:string" use="optional"/>
		<xsd:attributeGroup ref="reading.order.attrs"/>
		<xsd:attribute name="formatdatatype" type="columnformat.datatypes" use="optional"/>
	</xsd:complexType>
	<xsd:simpleType name="sort.orders">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="ascending"/>
			<xsd:enumeration value="descending"/>
			<xsd:enumeration value="none"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="resort.options">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="ascending"/>
			<xsd:enumeration value="descending"/>
			<xsd:enumeration value="none"/>
			<xsd:enumeration value="both"/>
			<xsd:enumeration value="toview"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="totals.options">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="none"/>
			<xsd:enumeration value="total"/>
			<xsd:enumeration value="averageperchild"/>
			<xsd:enumeration value="percentoverall"/>
			<xsd:enumeration value="percentparent"/>
			<xsd:enumeration value="averageperentry"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="narrow.options">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="top"/>
			<xsd:enumeration value="hide"/>
			<xsd:enumeration value="wrapsecondrow"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="tileviewer.options">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="top"/>
			<xsd:enumeration value="bottom"/>
			<xsd:enumeration value="hide"/>
		</xsd:restriction>
	</xsd:simpleType>		
	<xsd:complexType name="columnheader">
		<xsd:sequence>
			<xsd:element name="font" type="font" minOccurs="0" maxOccurs="1"/>
		</xsd:sequence>
		<xsd:attribute name="title" type="xsd:string" use="optional"/>
		<xsd:attribute name="align" type="simple.aligns" use="optional" default="left"/>
		<xsd:attributeGroup ref="reading.order.attrs"/>
	</xsd:complexType>
	<xsd:complexType name="viewbackground">
		<xsd:sequence>
			<xsd:element name="imageref" type="imageref" minOccurs="0" maxOccurs="1"/>
		</xsd:sequence>
		<xsd:attribute name="repeat" type="cellbackground.repeats" use="optional"/>
	</xsd:complexType>
	<xsd:complexType name="folderbackground">
		<xsd:sequence>
			<xsd:element name="imageref" type="imageref" minOccurs="0" maxOccurs="1"/>
		</xsd:sequence>
		<xsd:attribute name="repeat" type="cellbackground.repeats" use="optional"/>
	</xsd:complexType>
	<xsd:simpleType name="columnformat.datatypes">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="text"/>
			<xsd:enumeration value="datetime"/>
			<xsd:enumeration value="number"/>
		</xsd:restriction>
	</xsd:simpleType>
    <!-- **********************************************************************
     * ComplexType:  calendarformat
     * Description:  Describes a view design element of type calendar
     * Attributes:
     * timeslotstart and timeslotstart:
	 *			Do not have a default in the schema, but the dxl importer will
	 *			set timeslotstart value to 480 (480mins from 12am) which represents 
	 *			8:00am and timeslotend value to 1080 (1080mins from 12am) 6:00pm.
	 *			Therefore to set a appropriate value for either of the above
	 *			attributes, calculate the mins from 12am and set the value in mins.
	 * timeslotduration:
	 *			Value is set in minutes. Default is set to 60 by the importer.
    *********************************************************************** -->
	<xsd:complexType name="calendarformat">
		<xsd:sequence>
			<xsd:element name="datedisplay" type="calendardisplay" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="timeslotdisplay" type="calendardisplay" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="headerdisplay" type="calendardisplay" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="oneweekdisplay" type="calendardisplay" minOccurs="0" maxOccurs="1"/>
		</xsd:sequence>
		<xsd:attribute name="formats" type="calendarformat.formatslist"/>
		<xsd:attribute name="dayseparatorscolor" type="xsd:string" use="optional"/>
		<xsd:attribute name="todaycolor" type="xsd:string" use="optional" default="red"/>
		<xsd:attribute name="busycolor" type="xsd:string" use="optional"/>
		<xsd:attribute name="gridbgcolor" type="xsd:string" use="optional" default="white"/>
		<xsd:attribute name="workhourscolor" type="xsd:string" use="optional" default="white"/>
		<xsd:attribute name="todobgcolor" type="xsd:string" use="optional" default="white"/>
		<xsd:attribute name="headerbgcolor" type="xsd:string" use="optional" default="white"/>
		<xsd:attribute name="nonmonthbgcolor" type="xsd:string" use="optional"/>
		<xsd:attribute name="daydatebgcolor" type="xsd:string" use="optional" />
		<xsd:attribute name="nonmonthtextcolor" type="xsd:string" use="optional" />
		<xsd:attribute name="displayconflicts" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="enabletimeslots" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="displaytimeslotbitmaps" type="xsd:boolean" use="optional" />
		<xsd:attribute name="enabletimegrouping" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="timeslotoverride" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="displaymonthheader" type="xsd:boolean" use="optional" default="true"/>
		<xsd:attribute name="displaygototoday" type="xsd:boolean" use="optional" default="true"/>
		<xsd:attribute name="showtrashview" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="displayformatbutton" type="xsd:boolean" use="optional" default="true"/>
		<xsd:attribute name="displaydaytab" type="xsd:boolean" use="optional" default="true"/>
		<xsd:attribute name="displayweektab" type="xsd:boolean" use="optional" default="true"/>
		<xsd:attribute name="displaymonthtab" type="xsd:boolean" use="optional" default="true"/>
		<xsd:attribute name="displayownername" type="xsd:boolean" use="optional" default="true"/>
		<xsd:attribute name="timeslotstart" type="xsd:positiveInteger" use="optional"/>
		<xsd:attribute name="timeslotend" type="xsd:positiveInteger" use="optional"/>
		<xsd:attribute name="timeslotduration" type="xsd:positiveInteger" use="optional"/>
		<xsd:attribute name="headers" use="optional" default="plain">
			<xsd:simpleType>
				<xsd:restriction base="xsd:string">
					<xsd:enumeration value="none"/>
					<xsd:enumeration value="plain"/>
					<xsd:enumeration value="tabs"/>					
				</xsd:restriction>
			</xsd:simpleType>
		</xsd:attribute>
		<xsd:attribute name="initialformat" type="calendarformat.formatslist"/>
		<xsd:attribute name="timeslotstoggle" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="displaymeetingstab" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="largenumbers" type="xsd:boolean" use="optional" default="false"/>
	</xsd:complexType>

	<xsd:complexType name="calendardisplay">
		<xsd:sequence>
			<xsd:element name="font" type="font" minOccurs="0" maxOccurs="1"/>
		</xsd:sequence>
	</xsd:complexType>

	<xsd:simpleType name="calendarformat.formats">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="twoday"/>
			<xsd:enumeration value="oneweek"/>
			<xsd:enumeration value="twoweek"/>
			<xsd:enumeration value="onemonth"/>
			<xsd:enumeration value="oneyear"/>
			<xsd:enumeration value="oneday"/>
			<xsd:enumeration value="workweek"/>
			<xsd:enumeration value="all"/>
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:simpleType name="calendarformat.formatslist">
		<xsd:list itemType="calendarformat.formats"/>
	</xsd:simpleType>

    <!-- **********************************************************************
     * ComplexType:  queryviewformat
     * Description:  Describes a query view design element
     * Attributes:
     * limitmaxrows:
     *      boolean attribute, which specifies if a max rows limit is set
     *      within a query view
     * maxrows:
     *      int attribute, which specifies max number of rows
    *********************************************************************** -->
	<xsd:complexType name="queryviewformat">
		<xsd:attribute name="limitmaxrows" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="maxrows" type="xsd:positiveInteger" use="optional"/>
	</xsd:complexType>			

    <!-- **********************************************************************
     * ComplexType:  sharedcolumnref
     * Description:  Describes a reference to a shared column in a view/folder
     *               note.    
     * Attributes:
     *  name
     *	 Columnname is required
     *  formulaonly
     *   Bool attribute if true, reference sharedcolumn with "formulaonly"
    *********************************************************************** -->    	
    <xsd:complexType name="sharedcolumnref">
        <xsd:sequence>
           <xsd:element name="column" type="column" minOccurs="0" maxOccurs="1"/>
        </xsd:sequence>
        <xsd:attribute name="name" type="xsd:string" use="required"/>
        <xsd:attribute name="formulaonly" type="xsd:boolean" use="optional" default="false"/>
    </xsd:complexType>
	
    <!-- **********************************************************************
     * ComplexType:  sharedcolumn
     * Description:  Describes a shared column element.
     *	             The name of the shared column is unique name assigned 
     *               by the designer when the shared column is created.    
     * Element:
     *  Column
     *	 Only one column element can exist within a sharedcolumn    
     *
     * Attributes:  named.design.note.attrs
     *  
    *********************************************************************** -->    	
    <xsd:complexType name="sharedcolumn">
        <xsd:sequence>
            <xsd:group ref="design.note.prolog"/>
            <xsd:element name="column" type="column"/>
            <xsd:group ref ="note.epilog"/>
        </xsd:sequence>
        <xsd:attributeGroup ref="named.design.note.attrs"/>
    </xsd:complexType>
    
    <!-- **********************************************************************
     * ComplexType:  outline
     * Description:  Describes a outline element.    
     * Element:
     *  Outlineentry
     *   An outline can contain none to many outlineentries.
     *
     * Attributes:
     *  names.design.note.attrs, direction.attrs
     *  
    *********************************************************************** -->    	
	<xsd:complexType name="outline">
        <xsd:sequence>
			<xsd:group ref="named.design.note.prolog"/>
				<xsd:element name="outlineentry" type="outlineentry" minOccurs="0" maxOccurs="unbounded"/>
			<xsd:group ref="note.epilog"/>
		</xsd:sequence>
		<xsd:attributeGroup ref="named.design.note.attrs"/>
		<xsd:attributeGroup ref="direction.attrs"/>
	</xsd:complexType>
    
    <!-- **********************************************************************
     * ComplexType:  outlineentry
     * Description:  Describes a outlineentry element.    
     * Element:
     *  Link
     *   An outline can contain either a doclink, databaselink, viewlink, 
     *   namedelementlink, urllink
     * Imageref
     *   Contains a reference to an image
     * Code
     *	 Multiple code events.
     *	 Code Event types:
     *	 label:            label is set as a formula
     *	 targetframe:      targetframe is set as a formula
     *	 value:            type is set to CDRESOURCE_TYPE_ACTION.
     *	 hidewhen:         hidewhen formula is set within an entry
     *
     * Attributes:
     *  Label
     *	 Name of the outlineentry
     *  Type
     *    Type of outlineentry
     *	Displayimage
     *    If false hides the image completely from the outlineentry. Image will
	 *	  be lost.
	 *  Level
	 *	  level of indentatoin of the outline entry as compred to the previous
	 *    entry
     *  
    *********************************************************************** -->    	
	<xsd:complexType name="outlineentry">
		<xsd:sequence>
		    <xsd:element name="imageref" type="imageref" minOccurs="0" maxOccurs="1"/>
			<xsd:choice minOccurs="0" maxOccurs="1">
				<xsd:element name="doclink" type="doclink"/>
                <xsd:element name="databaselink" type="databaselink"/>
				<xsd:element name="viewlink" type="viewlink"/>
				<xsd:element name="namedelementlink" type="namedelementlink"/>
				<xsd:element name="urllink" type="urllink"/>
			</xsd:choice>
			<xsd:element name="code" type="code" minOccurs="0" maxOccurs="unbounded"/>
		</xsd:sequence>
		<xsd:attribute name="label" type="xsd:string" use="optional"/>
		<xsd:attribute name="alias" type="xsd:string" use="optional"/>
		<xsd:attribute name="popup" type="xsd:string" use="optional"/>
		<xsd:attribute name="type" type="outlineentry.types" use="optional"/>
		<xsd:attribute name="targetframe" type="xsd:string" use="optional"/>
		<xsd:attribute name="displayimage" type="xsd:boolean" use="optional" default="true"/>
		<xsd:attribute name="keepfocus" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="hide" type="outlineentry.hidewhen.token" use="optional"/>	
		<xsd:attribute name="level" type="xsd:integer" use="optional" default="0"/>
		<xsd:attributeGroup ref="reading.order.attrs"/>
	</xsd:complexType>
	<xsd:simpleType name="outlineentry.types">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="none"/>
			<xsd:enumeration value="action"/>
			<xsd:enumeration value="link"/>
			<xsd:enumeration value="namedelementlink"/>
			<xsd:enumeration value="urllink"/>
 	        <xsd:enumeration value="otherviews"/>
			<xsd:enumeration value="otherprivateviews"/>
			<xsd:enumeration value="otherfolders"/>
			<xsd:enumeration value="otherprivatefolders"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="outlineentry.hidewhen.tokens">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="notes"/>
			<xsd:enumeration value="web"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="outlineentry.hidewhen.token">
		<xsd:list itemType="outlineentry.hidewhen.tokens"/>
	</xsd:simpleType>
	    
    <!-- **********************************************************************
     * ComplexType:  db2accessview
     * Description:  Describes a db2accessview element.    
     * Element:
     *  db2accessviewentry
     *   An db2accessview can contain none to many db2accessviewentries.
     *
     * Attributes:
     *  named.design.note.attrs
     *  formnames:
     *     List of Form names selected in the DAV for reference.
     *     Form names are seperated by ";" as a delimiter.
     *  allforms:
     *     bool attribute which verifies if DAV refers to all forms.
     *  computewithform:
     *     bool attribute to check if the form needs to be computed.
     *  defaultform:
     *     name of the default form selected. Default form is used for
	 *     Db2 inserts, updates and deleted.
     *  normalizeGMT:
     *     bool attribute to set standardize all dates and times in
     *     Db2 view to GMT.
     *  includeUNID:
     *     bool attribute to set Notes UNID for each field appear in the DAV.
     *  includeOID:
     *     bool attribute to set OID for each note appear in the DAV.
     *  includeMOD:
     *     bool attribute to include Notes modified time for each note in the DAV.
     *         
     *  NOTE: DXL only supports export and import of DAV information stored in NSF and
     *        does NOT communicate with the Db2 database.
    *********************************************************************** -->    	
	<xsd:complexType name="db2accessview">
		<xsd:sequence>
			<xsd:group ref="named.design.note.prolog"/>
			<xsd:element name="db2accessviewentry" type="db2accessviewentry" minOccurs="0" maxOccurs="unbounded"/>
			<xsd:group ref="note.epilog"/>
		</xsd:sequence>
		<xsd:attributeGroup ref="named.design.note.attrs"/>
		<xsd:attribute name="formnames" type="xsd:string" use="optional"/>
		<xsd:attribute name="allforms" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="computewithform" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="defaultform" type="xsd:string" use="optional"/>
		<xsd:attribute name="normalizegmt" type="xsd:boolean" use="optional" default="true"/>
		<xsd:attribute name="includeunid" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="includeoid" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="includemod" type="xsd:boolean" use="optional" default="false"/>		
	</xsd:complexType>

    <!-- **********************************************************************
     * ComplexType:  db2accessviewentry
     * Description:  Describes a db2accessviewentry element.    
     * Element:
     *		NONE
     * Attributes:
     *  fieldname:
     *     name of the db2accessviewentry.
     *  notetype:
     *     can be either text, textlist, number, numberrange, time, timerange, userdata
     *  db2type:
     *      can be either char, varchar, longvarchar, integer, double, time, date, datetime, auto, clob
     *  db2index:
     *		bool attribute. Creates column as a db2 index field, which keys db records.
     *  allowtruncation:
     *		bool attribute. Specifies that Db2 view can clip data.
     *  multiplevalue:
	 *	    can be either single or delimited
	 *  db2delimiter:
	 *		delimiter used 
	 *  db2columnlength:
	 *		length of the db2 column. Mainly applies to Db2 VARCHAR type. 
	 *      For other types it remains fixed to 100.
    ************************************************************************** --> 
	<xsd:complexType name="db2accessviewentry">
		<xsd:attribute name="fieldname" type="xsd:string" use="required"/>
		<xsd:attribute name="notestype" type="notes.types" use="required"/>
		<xsd:attribute name="db2type" type="db2.types" use="required"/>
		<xsd:attribute name="db2index" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="allowtruncation" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="multiplevalue" type="multiplevalue.types" use="optional"/>
		<xsd:attribute name="db2delimiter" type="xsd:string" use="optional"/>
		<xsd:attribute name="db2columnlength" type="xsd:integer" use="optional" default="100"/>
	</xsd:complexType>

	<xsd:simpleType name="multiplevalue.types">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="single"/>
			<xsd:enumeration value="delimited"/>
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:simpleType name="notes.types">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="text"/>
			<xsd:enumeration value="textlist"/>
			<xsd:enumeration value="time"/>
			<xsd:enumeration value="number"/>
			<xsd:enumeration value="timerange"/>
			<xsd:enumeration value="numberrange"/>
			<xsd:enumeration value="userdata"/>
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:simpleType name="db2.types">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="char"/>
			<xsd:enumeration value="varchar"/>
			<xsd:enumeration value="longvarchar"/>
			<xsd:enumeration value="integer"/>
			<xsd:enumeration value="double"/>
			<xsd:enumeration value="time"/>
			<xsd:enumeration value="date"/>
			<xsd:enumeration value="datetime"/>
			<xsd:enumeration value="clob"/>
			<xsd:enumeration value="auto"/>
		</xsd:restriction>
	</xsd:simpleType>		
    
    <!-- **********************************************************************
     * ComplexType:  agent
     * Description:  Describes an Agent design element.
     *
     * Attributes:
     * version, maintenanceversion, milestonebuild, replicaid:
     *     See comments for attributeGroup root.attrs.
     * From named.design.note.attrs:
     *     name, alias, comment, fromtemplate, noreplace, propagatenoreplace,
     *     hide, language, publicaccess
     * enabled:
     *     Is the agent enabled?
     * showinsearch:
     *     Specify 'true' to display the agent's search query (see documentset)
     *     in the search bar.
     * runaswebuser:
     *     Value of 'true' causes the agent to run with the effective user name
     *     of the Web user.
     * runonbehalfof:
     *     Specifies on whose authority the agent can run.
     * activatable:
     *     Value of 'true' allows users with ACL editor access to enable the
     *     agent (valid for scheduled agents).
     * unrestrictedoperations:
     *     DEPRECATED - use restrictions attribute instead.
     * clientbackgroundthread:
     *     Specify 'true' to run an agent from the client without having to
     *     wait until it completes.
     * allowremotedebugging:
     *     A value of 'true' enables the agent to be debugged through a
     *     remote debugger.
     * storehighlights:
     *     If the agent has a search query (see documentset), a value of 'true'
     *     for this attribute causes your search matches to be highlighted in
     *     the searched documents.
     * formulatype:
     *     If the agent's <code event='action'> event contains a formula,
     *     specifies the formula type (see simpleType formula.types).
     * restrictions:
     *     Specifies whether the agent is allowed to perform restricted
     *     operations; one of the following values:
     *       restricted             Agent is not allowed to perform restricted
     *                              operations.  This is the most secure choice.
     *       unrestricted           Agent can perform restricted operations.
     *       fulladminunrestricted  Agent can perform restricted operations and
     *                              can do so with full administration rights.
     * profile:
     *     Profile this agent each time the agent runs.
     * agenttype
     *     If the agent has no code, describes the type of agent
     *********************************************************************** -->
	<xsd:complexType name="agent">
		<xsd:sequence>
			<xsd:group ref="named.design.note.prolog"/>
			<xsd:element name="designchange" type="designchange" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="trigger" type="trigger"/>
			<xsd:element name="documentset" type="documentset" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="code" type="code" minOccurs="0" maxOccurs="unbounded"/>
			<xsd:element name="rundata" type="rundata" minOccurs="0" maxOccurs="1"/>
			<xsd:group ref="note.epilog"/>
		</xsd:sequence>
		<xsd:attributeGroup ref="named.design.note.attrs"/>
		<xsd:attribute name="enabled" type="xsd:boolean" use="optional" default="true"/>
		<xsd:attribute name="showinsearch" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="runaswebuser" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="runonbehalfof" type="xsd:string" use="optional"/>
		<xsd:attribute name="activatable" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="unrestrictedoperations" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="clientbackgroundthread" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="allowremotedebugging" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="storehighlights" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="formulatype" type="formula.types" use="optional" default="modifydocs"/>
		<xsd:attribute name="restrictions" type="agent.restrictions" use="optional" default="restricted"/>
		<xsd:attribute name="profile" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="agenttype" type="xsd:string" use="optional"/>
	</xsd:complexType>

	<xsd:simpleType name="agent.restrictions">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="restricted"/>
			<xsd:enumeration value="unrestricted"/>
			<xsd:enumeration value="fulladminunrestricted"/>
		</xsd:restriction>
	</xsd:simpleType>

    <!-- **********************************************************************
     * ComplexType:  designchange
     * Description:  Time of last agent design change (not including
     *               enabled/disabled status).
     *********************************************************************** -->
	<xsd:complexType name="designchange">
		<xsd:sequence>
			<xsd:element name="datetime" type="datetime"/>
		</xsd:sequence>
	</xsd:complexType>

    <!-- **********************************************************************
     * ComplexType:  trigger
     * Description:  Specifies what triggers the execution of an agent.
     *               Depending on the trigger type, a schedule child element is
     *               used to specify when the agent runs.
     *
     * Attributes:
     * type:
     *     Specifies the type of event that triggers the agent; one of the
     *     following values:
     *       type value:    Use for:
     *       actionsmenu    User-activated agents or for WebQuerySave or
     *                      WebQueryOpen agents.
     *       agentlist      Agents that are only to be called by other agents,
     *                      are under development, or are run from the
     *                      Designer.
     *       beforenewmail  Processing mail before it is deposited into a
     *                      mail database.
     *       afternewmail   Processing incoming mail.
     *       docupdate      Workflow tasks where a task is performed based on
     *                      new or changed documents.  Specify a schedule
     *                      element to refine when the agent runs (limited to
     *                      startdate, enddate, onweekends, runlocation,
     *                      runserver).  Use type='automatic' for the schedule.
     *       docpaste       Documents that are being pasted into a database
     *                      and need to be modified as they are being pasted.
     *       scheduled      Agents that execute on a specific schedule.
     *                      Specify a schedule element to define the schedule.
	 *		 serverstart	When the Domino server starts up.
     *********************************************************************** -->
	<xsd:complexType name="trigger">
		<xsd:sequence>
			<xsd:element name="schedule" type="schedule" minOccurs="0" maxOccurs="1"/>
		</xsd:sequence>
		<xsd:attribute name="type" type="agent.trigger.types" use="required"/>
	</xsd:complexType>

	<xsd:simpleType name="agent.trigger.types">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="actionsmenu"/>
			<xsd:enumeration value="agentlist"/>
			<xsd:enumeration value="beforenewmail"/>
			<xsd:enumeration value="afternewmail"/>
			<xsd:enumeration value="docupdate"/>
			<xsd:enumeration value="docpaste"/>
			<xsd:enumeration value="scheduled"/>
			<xsd:enumeration value="serverstart"/>
		</xsd:restriction>
	</xsd:simpleType>

    <!-- **********************************************************************
     * ComplexType:  schedule
     * Description:  Specifies the schedule for running an agent.  The element
     *               content defines the times and/or dates on which to
     *               start/stop running the agent.
     *
     * Attributes:
     * type:
     *     Specifies the type of schedule; one of the following:
     *       automatic  Schedule is implied; for example for agents with trigger
     *                  type='docupdate'.
     *       byminutes  Run more than once a day.  Specify hours and/or minutes.
     *       daily      Run once a day.
     *       weekly     Run once a week.  Specify dayofweek.
     *       monthly    Run once a month.  Specify dateinmonth.
     *       never      Schedule is disabled.
     * hours:
     * minutes:
     *     Specifies how often to run for type='byminutes'.
     * onweekends:
     *     Specifies whether to run the agent on weekends.
     * runlocation:
     *     Specifies the host system on which a scheduled operation runs; one
     *     of the following:
     *       local   The local system.
     *       any     Any server system.
     *       choose  Choose when agent is enabled.
     *       server  A specific server specified by the runserver attribute.
     *       specific The values runlocation='local' and runlocation='server' 
     *                are deprecated as of ND 8.52.  The Exporter will instead 
     *                emit runlocation='specific' along with a runserver attribute 
     *                that contains the local user name (workstation name) in the 
     *                former case or a Domino server name in the latter case.  
     *                The Importer still supports the deprecated values, and when 
     *                runlocation='local', attempts to determine the runserver value 
     *                automatically via the updatedby element on the note.
     * runserver:
     *     Specifies a specific server system on which the agent runs.
     * dayofweek:
     *     Specifies which day of the week to run for type='weekly'.  One of:
     *     sunday, monday, tuesday, wednesday, thursday, friday, saturday
     * dateinmonth:
     *     Specifies which date in the month to run for type='monthly'.
     *     Use a value between 1 and 31.
     *********************************************************************** -->
	<xsd:complexType name="schedule">
		<xsd:sequence>
			<xsd:element name="starttime" type="starttime" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="endtime" type="endtime" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="startdate" type="startdate" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="enddate" type="enddate" minOccurs="0" maxOccurs="1"/>
		</xsd:sequence>
		<xsd:attribute name="type" type="schedule.types" use="required"/>
		<xsd:attribute name="hours" type="xsd:integer" use="optional"/>
		<xsd:attribute name="minutes" type="xsd:integer" use="optional"/>
		<xsd:attribute name="onweekends" type="xsd:boolean" use="optional" default="true"/>
		<xsd:attribute name="runlocation" type="schedule.runlocations" use="optional"/>
		<xsd:attribute name="runserver" type="xsd:string" use="optional"/>
		<xsd:attribute name="dayofweek" type="day.names" use="optional"/>
		<xsd:attribute name="dateinmonth" type="xsd:integer" use="optional"/>
	</xsd:complexType>

	<xsd:simpleType name="schedule.types">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="automatic"/>
			<xsd:enumeration value="byminutes"/>
			<xsd:enumeration value="daily"/>
			<xsd:enumeration value="weekly"/>
			<xsd:enumeration value="monthly"/>
			<xsd:enumeration value="never"/>
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:simpleType name="schedule.runlocations">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="local"/>
			<xsd:enumeration value="any"/>
			<xsd:enumeration value="choose"/>
			<xsd:enumeration value="server"/>
			<xsd:enumeration value="specific"/>
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:simpleType name="day.names">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="sunday"/>
			<xsd:enumeration value="monday"/>
			<xsd:enumeration value="tuesday"/>
			<xsd:enumeration value="wednesday"/>
			<xsd:enumeration value="thursday"/>
			<xsd:enumeration value="friday"/>
			<xsd:enumeration value="saturday"/>
		</xsd:restriction>
	</xsd:simpleType>

    <!-- **********************************************************************
     * ComplexType:  starttime
     * Description:  Specifies the starting time for scheduled agents whose
     *               type attribute is byminutes, daily, weekly, or monthly.
     *********************************************************************** -->
	<xsd:complexType name="starttime">
		<xsd:sequence>
			<xsd:element name="datetime" type="datetime"/>
		</xsd:sequence>
	</xsd:complexType>

    <!-- **********************************************************************
     * ComplexType:  endtime
     * Description:  Specifies the ending time for scheduled agents whose type
     *               attribute is byminutes.  Together with starttime, this
     *               specifies that the agent only runs between certain times
     *               of the day.
     *********************************************************************** -->
	<xsd:complexType name="endtime">
		<xsd:sequence>
			<xsd:element name="datetime" type="datetime"/>
		</xsd:sequence>
	</xsd:complexType>

    <!-- **********************************************************************
     * ComplexType:  startdate
     * Description:  Specifies a date on which the agent's schedule is
     *               activated for agents whose trigger type is docupdate or
     *               scheduled.
     *********************************************************************** -->
	<xsd:complexType name="startdate">
		<xsd:sequence>
			<xsd:element name="datetime" type="datetime"/>
		</xsd:sequence>
	</xsd:complexType>

    <!-- **********************************************************************
     * ComplexType:  enddate
     * Description:  Specifies a date on which the agent's schedule is
     *               deactivated for agents whose trigger type is docupdate or
     *               scheduled.
     *********************************************************************** -->
	<xsd:complexType name="enddate">
		<xsd:sequence>
			<xsd:element name="datetime" type="datetime"/>
		</xsd:sequence>
	</xsd:complexType>

    <!-- **********************************************************************
     * ComplexType:  documentset
     * Description:  Specifies a set of documents from a database.  Specify
     *               a type attribute and optionally specify element content to
     *               further specify which documents are selected.  When more
     *               than one search element is specified, they are logically
     *               ANDed together to select the document set (i.e. the
     *               intersection of sets of documents chosen by each search
     *               expression is taken).  DXL does not currently support more
     *               complex expressions with logical ORs, etc.
     *               The UI equivalent of documentset is the Runtime Target
     *               dropdown in the agent Basics property tab together with
     *               the Document Selection Simple Search in the Programmer
     *               pane.
     *
     * Attributes:
     * type:
     *     Specifies documents by common characteristics; one of:
     *       modified      All new and modified documents.
     *       unreadinview  All unread documents in view.
     *       allinview     All documents in view.
     *       selected      Selected documents.
     *       runonce       Run once (on current document).
     *       all           All documents in database.
     *       implicit      Use for agent triggers where the type implies
     *                     the document set, e.g. after new mail.
     *********************************************************************** -->
	<xsd:complexType name="documentset" mixed="true">
		<xsd:sequence>
			<xsd:element name="search" type="search" minOccurs="0" maxOccurs="unbounded"/>
		</xsd:sequence>
		<xsd:attribute name="type" type="documentset.types" use="required"/>
	</xsd:complexType>

	<xsd:simpleType name="documentset.types">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="modified"/>
			<xsd:enumeration value="unreadinview"/>
			<xsd:enumeration value="allinview"/>
			<xsd:enumeration value="selected"/>
			<xsd:enumeration value="runonce"/>
			<xsd:enumeration value="all"/>
			<xsd:enumeration value="implicit"/>
		</xsd:restriction>
	</xsd:simpleType>

    <!-- **********************************************************************
     * ComplexType:  search
     * Description:  Specifies a single search criteria for selecting documents.
     *               The UI equivalent of search is a Simple Search Condition.
     *               Contained name elements each specify a single name for a
     *               byauthor search.  Contained word elements each specify a
     *               single word for a multiplewords search.
     *
     * Attributes:
     * type:
     *     The type of search; one of:
     *       byauthor       Search by author; specify contains attribute and one
     *                      or more <name>s.
     *       bydate         Search by date; specify <datechoice>.
     *       byfield        Search by document field; specify field and value,
     *                      and optionally contains attribute.
     *       byformnames    Search by documents using specific forms; specify
     *                      one or more <formchoice>s.
     *       byform         Search by specific form content; specify
     *                      <formfieldschoice>.
     *       infolder       Search for documents in a specific folder; specify
     *                      folder and contains attribute.
     *       multiplewords  Search for multiple words; specify one or more
     *                      <word>s and optionally the all attribute.
     * folder:
     *     The folder name for an infolder search.
     * field:
     *     Field name, for byfield search.
     * contains:
     *     Applies to byauthor, byfield, and infolder searches.  When true,
     *     which is the implied default for these two search types, the search
     *     is for notes that contain the specified data.  Use false to search
     *     for notes that do not contain the specified data.
     * value:
     *     Value string, for byfield search.  This is a text value regardless of
     *     the data type of the field.  Notes will do any necessary conversion
     *     when searching for the field value.
     * all:
     *     Applies to multiplewords searches.  When false, which is the implied
     *     default, the search is for notes that contain any of the specified
     *     words.  A value of true specifies a search for notes that contain all
     *     of the specified words.
     *********************************************************************** -->
	<xsd:complexType name="search">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="datechoice" type="datechoice"/>
			<xsd:element name="formchoice" type="formchoice"/>
			<xsd:element name="formfieldschoice" type="formfieldschoice"/>
			<xsd:element name="name" type="xsd:string"/>
			<xsd:element name="word" type="xsd:string"/>
		</xsd:choice>
		<xsd:attribute name="type" type="search.types" use="required"/>
		<xsd:attribute name="folder" type="xsd:string" use="optional"/>
		<xsd:attribute name="field" type="xsd:string" use="optional"/>
		<xsd:attribute name="contains" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="value" type="xsd:string" use="optional"/>
		<xsd:attribute name="all" type="xsd:boolean" use="optional"/>
	</xsd:complexType>

	<xsd:simpleType name="search.types">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="byauthor"/>
			<xsd:enumeration value="bydate"/>
			<xsd:enumeration value="byfield"/>
			<xsd:enumeration value="byformnames"/>
			<xsd:enumeration value="byform"/>
			<xsd:enumeration value="infolder"/>
			<xsd:enumeration value="multiplewords"/>
		</xsd:restriction>
	</xsd:simpleType>

    <!-- **********************************************************************
     * ComplexType:  datechoice
     * Description:  Chooses things based on date(s).  For certain conditions,
     *               specify the additional attribute(s) and/or element(s) as
     *               indicated below.
     *
     * Attributes:
     * modified:
     *     When true, specifies that the search is for things that have been
     *     modified within the specified time condition.  The default value of
     *     false causes the search to be for things that have been created
     *     within the time criteria.
     * condition:
     *     Specifies the condition to be used to choose dates or date ranges;
     *     one of the following:
     *       value:      Date(s) chosen:
     *       on          A specific date; specify a single <datetime>.
     *       after       After a specific date; specify a single <datetime>.
     *       before      Before a specific date; specify a single <datetime>.
     *       noton       Not on a specific date; specify a single <datetime>.
     *       inlast      Within the last N days; specify days attribute.
     *       innext      In the next N days; specify days attribute.
     *       olderthan   More than N days ago; Specify days attribute.
     *       afternext   More than N days ahead; Specify days attribute.
     *       between     Between two dates; specify two <datetime>s; the first
     *                   is the start time and the second is the end time.
     *       notbetween  Not between two dates; specify two <datetime>s; the
     *                   first is the start time and the second is the end time.
     * days:
     *     For certain conditions, specifies a number of days.
     *********************************************************************** -->
	<xsd:complexType name="datechoice">
		<xsd:sequence>
			<xsd:element name="datetime" type="datetime" minOccurs="0" maxOccurs="2"/>
		</xsd:sequence>
		<xsd:attribute name="modified" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="condition" type="datechoice.conditions" use="required"/>
		<xsd:attribute name="days" type="xsd:integer" use="optional"/>
	</xsd:complexType>

	<xsd:simpleType name="datechoice.conditions">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="on"/>
			<xsd:enumeration value="after"/>
			<xsd:enumeration value="before"/>
			<xsd:enumeration value="noton"/>
			<xsd:enumeration value="inlast"/>
			<xsd:enumeration value="innext"/>
			<xsd:enumeration value="olderthan"/>
			<xsd:enumeration value="afternext"/>
			<xsd:enumeration value="between"/>
			<xsd:enumeration value="notbetween"/>
		</xsd:restriction>
	</xsd:simpleType>

    <!-- **********************************************************************
     * ComplexType:  formchoice
     * Description:  Chooses notes based on the form that they use.
     *
     * Attributes:
     * name:
     *     The form name.
     *********************************************************************** -->
	<xsd:complexType name="formchoice">
		<xsd:attribute name="name" type="xsd:string" use="required"/>
	</xsd:complexType>

    <!-- **********************************************************************
     * ComplexType:  formfieldschoice
     * Description:  Chooses notes via specification of a form and fields within
     *               that form that contain specific values.
     *
     * Attributes:
     * name:
     *     The form name.
     *********************************************************************** -->
	<xsd:complexType name="formfieldschoice">
		<xsd:sequence>
			<xsd:element name="fieldchoice" type="fieldchoice" minOccurs="0" maxOccurs="unbounded"/>
		</xsd:sequence>
		<xsd:attribute name="form" type="xsd:string" use="required"/>
	</xsd:complexType>

    <!-- **********************************************************************
     * ComplexType:  rundata
     * Description:  Contains agent run information.  It is exported for
     *               informational purposes, but is never imported.
     *               The contained runlog is a text log of information from the
     *               last run of an agent.
     *
     * Attributes:
     * processeddocs:
     *     Number of documents processed on last agent run.
     * dbid:
     *     dbid on which agent was last run.
     * exitcode:
     *     Exit code from last run of agent.
     * agentdata:
     *     The UNID of the corresponding agent data note.
     *********************************************************************** -->
	<xsd:complexType name="rundata">
		<xsd:sequence>
			<xsd:element name="agentmodified" type="agentmodified" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="agentrun" type="agentrun" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="runlog" type="xsd:string" minOccurs="0" maxOccurs="1"/>
		</xsd:sequence>
		<xsd:attribute name="processeddocs" type="xsd:integer" use="optional"/>
		<xsd:attribute name="dbid" type="noteshex" use="optional"/>
		<xsd:attribute name="exitcode" type="xsd:integer" use="optional"/>
		<xsd:attribute name="agentdata" type="unidhex" use="optional"/>
	</xsd:complexType>

    <!-- **********************************************************************
     * ComplexType:  agentmodified
     * Description:  Time of last agent modification.
     *********************************************************************** -->
	<xsd:complexType name="agentmodified">
		<xsd:sequence>
			<xsd:element name="datetime" type="datetime"/>
		</xsd:sequence>
	</xsd:complexType>

    <!-- **********************************************************************
     * ComplexType:  agentrun
     * Description:  Time of last agent run.
     *********************************************************************** -->
	<xsd:complexType name="agentrun">
		<xsd:sequence>
			<xsd:element name="datetime" type="datetime"/>
		</xsd:sequence>
	</xsd:complexType>

    <!-- **********************************************************************
     * ComplexType:  webservice
     * Description:  Describes a Web Service design element.
     * Content:
     *     Contains an optional designchange element, followed by zero or more
     *     code elements, followed by optional webserviceopaquedata and rundata
     *     elements.  webserviceopaquedata is generated by the Exporter and
     *     used by the Importer in round-trip situations and should not be
     *     modified.  webservice typically must contain WSDL and/or source code
     *     for the web service but in the case of invalid web services saved in
     *     Designer it is possible that neither is present.
     *     The following table shows the valid code events for webservice.
     *     A webservice can contain LotusScript or Java code, not both.
     *     Code Type:    Valid Events:
     *     wsdl          interface
     *     lotusscript   options, declarations, initialize, terminate,
     *                   user-defined
     *     javaproject   action
     *
     * Attributes:
     * version, maintenanceversion, milestonebuild, replicaid:
     *     See comments for attributeGroup root.attrs.
     * From named.design.note.attrs:
     *     name, alias, comment, fromtemplate, noreplace, propagatenoreplace,
     *     language, publicaccess
     * runaswebuser:
     *     Value of 'true' causes the web service to run with the effective user
     *     name of the Web user.
     * warnwsdlmodified:
     *     Issue a warning when changes are made, either via DXL import or the
     *     Domino Designer, to the source or WSDL code that may affect the
     *     web service interface.
     * progmodel:
     *     Programming model: rpc or message.
     * soapmsgformat:
     *     SOAP message format, when progmodel='rpc'.
     *     One of: rpcencoded, rpcliteral, docliteral, wrapped
     * soapactionopname:
     *     When progmodel='rpc', specifies whether to include operation name in
     *     SOAP action, and implicitly defaults to true.
     * porttypeclass:
     *     Usually required, but may be absent for an invalid web service that
     *     was saved in Designer.  The name of the class that contains the
     *     operations (the implementation code) for the port type.
     * allowremotedebugging:
     *     A value of 'true' enables the web service to be debugged through a
     *     remote debugger.
     * profile:
     *     Profile this web service each time the web service runs.
     * runonbehalfof:
     *     Specifies on whose authority the web service can run.
     * restrictions:
     *     Specifies whether the web service is allowed to perform restricted
     *     operations; one of the following values:
     *       restricted             WS is not allowed to perform restricted
     *                              operations.  This is the most secure choice.
     *       unrestricted           WS can perform restricted operations.
     *       fulladminunrestricted  WS can perform restricted operations and
     *                              can do so with full administration rights.
     * proglanguage:
     *     Use when the webservice contains a <code> element for WSDL but none
     *     for LotusScript or Java.  The Importer will generate an
     *     implementation class and other code based on the WSDL contents.
     *     This attribute specifies the programming language of the generated
     *     code, which defaults to lotusscript in this situation.
     *********************************************************************** -->
	<xsd:complexType name="webservice">
		<xsd:sequence>
			<xsd:group ref="named.design.note.prolog"/>
			<xsd:element name="designchange" type="designchange" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="code" type="code" minOccurs="0" maxOccurs="unbounded"/>
			<xsd:element name="webserviceopaquedata" type="xsd:base64Binary" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="rundata" type="rundata" minOccurs="0" maxOccurs="1"/>
			<xsd:group ref="note.epilog"/>
		</xsd:sequence>
		<xsd:attributeGroup ref="named.design.note.attrs"/>
		<xsd:attribute name="runaswebuser" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="warnwsdlmodified" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="progmodel" type="webservice.progmodels" use="optional" default="rpc"/>
		<xsd:attribute name="soapmsgformat" type="webservice.soapmsgformats" use="optional"/>
		<xsd:attribute name="soapactionopname" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="porttypeclass" type="xsd:string" use="optional"/>
		<xsd:attribute name="allowremotedebugging" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="profile" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="runonbehalfof" type="xsd:string" use="optional"/>
		<xsd:attribute name="restrictions" type="webservice.restrictions" use="optional" default="restricted"/>
		<xsd:attribute name="porttypename" type="xsd:string" use="optional"/>
		<xsd:attribute name="serviceelement" type="xsd:string" use="optional"/>
		<xsd:attribute name="serviceport" type="xsd:string" use="optional"/>
		<xsd:attribute name="proglanguage" type="webservice.proglangs" use="optional"/>
	</xsd:complexType>

	<xsd:simpleType name="webservice.restrictions">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="restricted"/>
			<xsd:enumeration value="unrestricted"/>
			<xsd:enumeration value="fulladminunrestricted"/>
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:simpleType name="webservice.progmodels">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="rpc"/>
			<xsd:enumeration value="message"/>
		</xsd:restriction>
	</xsd:simpleType>
	
	<xsd:simpleType name="webservice.soapmsgformats">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="rpcencoded"/>
			<xsd:enumeration value="rpcliteral"/>
			<xsd:enumeration value="docliteral"/>
			<xsd:enumeration value="wrapped"/>
		</xsd:restriction>
	</xsd:simpleType>
	
	<xsd:simpleType name="webservice.proglangs">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="lotusscript"/>
			<xsd:enumeration value="java"/>
		</xsd:restriction>
	</xsd:simpleType>

    <!-- **********************************************************************
     * ComplexType:  agentdata
     * Description:  An agent data note is created and obtained via the Notes
     *               backend classes and is populated by the agent code.  It
     *               can contain persistent data that is used from run to run of
     *               an agent.  Agent data notes are not imported, but they are
     *               exported for informational purposes.
     *
     * Attributes:
     * version, maintenanceversion, milestonebuild, replicaid:
     *     See comments for attributeGroup root.attrs.
     *********************************************************************** -->
	<xsd:complexType name="agentdata">
		<xsd:sequence>
			<xsd:group ref="design.note.prolog"/>
			<xsd:group ref="note.epilog"/>
		</xsd:sequence>
		<xsd:attributeGroup ref="root.attrs"/>
	</xsd:complexType>

    <!-- **********************************************************************
     * ComplexType:  scriptlibrary
     * Description:  Describes a Script Library design element.  Domino supports
     *               three kinds of script libraries: LotusScript, Javascript,
     *               and Java.  A script library only holds one kind of code.
     *               The code for Javascript and Java libraries is specified
     *               via a single <code> element.  LotusScript may have multiple
     *               <code> elements.
     *               Code Type:    Valid Events:
     *               lotusscript   options, declarations, initialize, terminate,
     *                             user-defined
     *               javascript    library
     *               javaproject   library
     *
     * Attributes:
     * version, maintenanceversion, milestonebuild, replicaid:
     *     See comments for attributeGroup root.attrs.
     * From named.design.note.attrs:
     *     name, alias, comment, fromtemplate, noreplace, propagatenoreplace,
     *     hide
     *********************************************************************** -->
	<xsd:complexType name="scriptlibrary">
		<xsd:sequence>
			<xsd:group ref="named.design.note.prolog"/>
			<xsd:element name="code" type="code" minOccurs="0" maxOccurs="unbounded"/>
			<xsd:group ref="note.epilog"/>
		</xsd:sequence>
		<xsd:attributeGroup ref="named.design.note.attrs"/>
	</xsd:complexType>

    <!-- **********************************************************************
     * ComplexType:  imageresource
     * Description:  Describes an Image Resource design element.
     *
     * Attributes:
     * version, maintenanceversion, milestonebuild, replicaid:
     *     See comments for attributeGroup root.attrs.
     * From named.design.note.attrs:
     *     name, alias, comment, readonly, fromtemplate, noreplace,
     *     propagatenoreplace, hide, language, publicaccess
     * across:
     * down:
     *     Number of images across and down, for image sets.
     * colorizegrays:
     *     Lets an image blend with the user's system colors.
     * browsercompatible:
     *     Specifies that an image set should work in a Web browser.
     * imagename:
     *     The name of the image.
     * refresh:
     *     Indicates that the resource needs to be refreshed from its source
     *     location.
     *********************************************************************** -->
	<xsd:complexType name="imageresource">
		<xsd:sequence>
			<xsd:group ref="named.design.note.prolog"/>
			<xsd:choice>
				<xsd:element name="gif" type="gif"/>
				<xsd:element name="jpeg" type="jpeg"/>
				<xsd:element name="png" type="png"/>
				<xsd:element name="notesbitmap" type="xsd:base64Binary"/>
				<xsd:element name="cgm" type="cgm"/>
			</xsd:choice>
			<xsd:group ref="note.epilog"/>
		</xsd:sequence>
		<xsd:attributeGroup ref="named.design.note.attrs"/>
		<xsd:attribute name="across" type="xsd:integer" use="optional" default="1"/>
		<xsd:attribute name="down" type="xsd:integer" use="optional" default="1"/>
		<xsd:attribute name="colorizegrays" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="browsercompatible" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="imagename" type="xsd:string" use="optional"/>
		<xsd:attribute name="refresh" type="xsd:boolean" use="optional" default="false"/>
	</xsd:complexType>

    <!-- **********************************************************************
     * ComplexType:  appletresource
     * Description:  Describes an Applet Resource design element.
     *               Contains a single code element with event='action' which
     *               contains a javaproject that holds the Java code executed
     *               by the applet resource.
     *
     * Attributes:
     * version, maintenanceversion, milestonebuild, replicaid:
     *     See comments for attributeGroup root.attrs.
     * From named.design.note.attrs:
     *     name, alias, comment, fromtemplate, noreplace, propagatenoreplace,
     *     hide, language
     *********************************************************************** -->
	<xsd:complexType name="appletresource">
		<xsd:sequence>
			<xsd:group ref="named.design.note.prolog"/>
			<xsd:element name="code" type="code"/>
			<xsd:group ref="note.epilog"/>
		</xsd:sequence>
		<xsd:attributeGroup ref="named.design.note.attrs"/>
	</xsd:complexType>

    <!-- **********************************************************************
     * ComplexType:  fileresource
     * Description:  Describes an File Resource design element.
     *
     * Attributes:
     * From namerequired.design.note.attrs:
     *     name(required attribute), alias, comment, readonly, fromtemplate, noreplace,
     *     propagatenoreplace, hide, language, publicaccess
     * charset:
     *     Specifies the character set for the resource     	 	
     * mimetype:
     *     Specifies a MIME type for the resource.
     * refresh:
     *     Indicates that the resource needs to be refreshed from its source
     *     location.
     *********************************************************************** -->
	<xsd:complexType name="fileresource">
		<xsd:sequence>
			<xsd:group ref="named.design.note.prolog"/>
			<xsd:element name="filedata" type="xsd:base64Binary" minOccurs="0" maxOccurs="1"/>
			<xsd:group ref="note.epilog"/>
		</xsd:sequence>
		<xsd:attributeGroup ref="namerequired.design.note.attrs"/>
		<xsd:attribute name="refresh" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="charset" type="xsd:string" use="optional"/>
		<xsd:attribute name="mimetype" type="xsd:string" use="optional"/>
	</xsd:complexType>

    <!-- **********************************************************************
     * ComplexType:  stylesheetresource
     * Description:  Describes an StyleSheet Resource design element.
     *
     * Attributes:
     * From namerequired.design.note.attrs:
     *     name (required attribute), alias, comment, readonly, fromtemplate, noreplace,
     *     propagatenoreplace, hide, language, publicaccess
     * charset:
     *     Specifies the character set for the resource     	 	
     * refresh:
     *     Indicates that the resource needs to be refreshed from its source
     *     location.
     *********************************************************************** -->
	<xsd:complexType name="stylesheetresource">
		<xsd:sequence>
			<xsd:group ref="named.design.note.prolog"/>
			<xsd:element name="filedata" type="xsd:base64Binary" minOccurs="0" maxOccurs="1"/>
			<xsd:group ref="note.epilog"/>
		</xsd:sequence>
		<xsd:attributeGroup ref="namerequired.design.note.attrs"/>
		<xsd:attribute name="refresh" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="charset" type="xsd:string" use="optional"/>
	</xsd:complexType>
	
	<!-- **************************************************************************
	 * ComplexType:		filedata
	 * Description:		represents filedata content
	 *********************************************************************** -->
	<xsd:complexType name="filedata">
		<xsd:simpleContent>
			<xsd:extension base="xsd:base64Binary"></xsd:extension>
		</xsd:simpleContent>
	</xsd:complexType>
	
    <!-- **********************************************************************
     * ComplexType:  frameset
     * Description:  Describes a Frameset design element, or a nested frameset
     *               pane within a larger frameset.  A frameset is a collection
     *               of panes, each containing a frame or a nested frameset,
     *               that is used to add structure to a Web site or Domino
     *               database.
     *               The optional code element with event='windowtitle'
     *               specifies a formula for the window title of a toplevel
     *               frameset.  The only valid code type is formula.
     *               Note that only a toplevel frameset has the content from the
     *               named.design.note.prolog and note.epilog elements.
     *
     * Attributes:
     * version, maintenanceversion, milestonebuild, replicaid:
     *     See comments for attributeGroup root.attrs.
     * From named.design.note.attrs:
     *     name, alias, comment, publicaccess, fromtemplate, noreplace,
     *     propagatenoreplace, hide, language
     * htmlid, htmlclass, htmlstyle, htmltitle, extrahtmlattrs:
     *     See comments for attributeGroup html.core.attrs.
     * rows:
     *     A list of values, delimited by white space or commas, one for each
     *     row in the frameset, specifying the row sizes.  Each value can be in
     *     units of pixels, units of percentages, or no units indicating
     *     relative values.  If rows is not specified a single row is implied.
     * columns:
     *     A list of values, delimited by white space or commas, one for each
     *     column in the frameset, specifying the column sizes.  Each value can
     *     be in units of pixels, units of percentages, or no units indicating
     *     relative values.  If columns is not specified a single column is
     *     implied.
     *     Only one of rows or columns should be specified, meaning that an
     *     individual frameset will consist of all rows or all columns but never
     *     both.  (Nesting of framsets provides for a mixture of rows and
     *     columns.)  The frameset should contain a number of frame and/or
     *     frameset child elements equal to the number of rows or columns.
     * spacing:
     *     Spacing between frames, in pixels.
     * borderwidth:
     *     Specified only on a top-level frameset; the implied default is "7px".
     *     Value is the border width, in pixels, for all borders in the frameset.
     * bordercolor:
     *     Specified only on a top-level frameset; the implied default is
     *     "system".  Value is the border color for all borders in the frameset.
     *********************************************************************** -->
	<xsd:complexType name="frameset">
		<xsd:sequence>
			<xsd:group ref="named.design.note.prolog"/>
			<xsd:element name="code" type="code" minOccurs="0" maxOccurs="1"/>
			<xsd:choice minOccurs="1" maxOccurs="unbounded">
				<xsd:element name="frameset" type="frameset"/>
				<xsd:element name="frame" type="frame"/>
			</xsd:choice>
			<xsd:group ref="note.epilog"/>
		</xsd:sequence>
		<xsd:attributeGroup ref="named.design.note.attrs"/>
		<xsd:attribute name="rows" type="xsd:string" use="optional"/>
		<xsd:attribute name="columns" type="xsd:string" use="optional"/>
		<xsd:attribute name="spacing" type="xsd:string" use="optional" default="1px"/>
		<xsd:attributeGroup ref="html.core.attrs"/>
		<xsd:attribute name="borderwidth" type="xsd:string" use="optional"/>
		<xsd:attribute name="bordercolor" type="xsd:string" use="optional"/>
	</xsd:complexType>

    <!-- **********************************************************************
     * ComplexType:  frame
     * Description:  A frame is one section, or pane, of a larger frameset.
     *               A frame can reference a form, folder, page, document, view,
     *               navigator, or a Web page via a specific URL.
     *               The elements that specify the contents of a frame are the
     *               same elements that specify links within <richtext>.  Within
     *               framesets, only a subset of these link elements' attributes
     *               and content is allowed:  They must not contain character
     *               data or richtext inline constructs, only an optional <code>
     *               element to specify a formula for the URL or named element
     *               links.  Also, the attributes from the attributeGroup
     *               link.attrs do not apply.
     *
     * Attributes:
     * name:
     *     The name of the frame.  Each frame should have a unique name.
     * targetframe:
     *     The name of another frame in which to display the data that is
     *     referenced via a link contained in this frame.
     * showactionbar:
     *     Valid only if frame references a view or folder, in which case it
     *     defaults to "true", meaning the frame displays the action bar of the
     *     view or folder when it is loaded into the frame.
     * showheader:
     *     Valid only if frame references a view or folder, in which case it
     *     defaults to "true", meaning the frame displays the column headings
     *     of the view or folder when it is loaded into the frame.
     * selectionfollowsmouse:
     *     Valid only if frame references a view or folder, in which case it
     *     defaults to "false".  When set to true, as you move the mouse over
     *     the view, the view selects the document the mouse is pointing to.
     * basicappearance:
     *     Valid only if frame references a view or folder, in which case it
     *     defaults to "false".  When set to true, enables several miscellaneous
     *     options, such as showing strike-through text when an item is marked
     *     for deletion, not allowing the scroll bar to be hidden, not extending
     *     selection in the selection margin when the mouse moves, using a
     *     simple grid for calendar views, and defaulting to a 1-day format for
     *     calendar views.
     * scrolling:
     *     The frame's scrolling style; one of the following:
	 *       always   Forces a scroll bar for the frame.
	 *       never    Causes no scroll bar to appear.
	 *       auto     The scroll bar appears if it is needed.
     *       default  The default is auto.
     * noresize:
     *     When false, users in the Notes client or Web browser can change the
     *     height and width of frames by dragging their borders.  When true,
     *     users cannot drag borders to re-size the frame.
     * border3d:
     *     When true, allows three-dimensional borders between the current frame
     *     and its adjacent frames.
     * marginwidth:
     * marginheight:
     *     The space between the frame border and the frame content, in pixels.
     * initialfocus:
     *     A value of 'true' causes the focus to be on this frame when the
     *     frameset is launched in the Notes client.
     * htmlid, htmlclass, htmlstyle, htmltitle, extrahtmlattrs:
     *     See comments for attributeGroup html.core.attrs.
     *********************************************************************** -->
	<xsd:complexType name="frame">
		<xsd:sequence>
			<xsd:element name="bordercaption" type="bordercaption" minOccurs="0" maxOccurs="1"/>
			<xsd:choice minOccurs="0" maxOccurs="1">
				<xsd:element name="doclink" type="doclink"/>
				<xsd:element name="viewlink" type="viewlink"/>
				<xsd:element name="namedelementlink" type="namedelementlink"/>
				<xsd:element name="urllink" type="urllink"/>
			</xsd:choice>
		</xsd:sequence>
		<xsd:attribute name="name" type="xsd:string" use="optional"/>
		<xsd:attribute name="targetframe" type="xsd:string" use="optional"/>
		<xsd:attribute name="showactionbar" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="showheader" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="selectionfollowsmouse" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="basicappearance" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="scrolling" type="frame.scrolling.values" use="optional" default="default"/>
		<xsd:attribute name="noresize" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="border3d" type="xsd:boolean" use="optional" default="true"/>
		<xsd:attribute name="marginwidth" type="xsd:string" use="optional" default="1px"/>
		<xsd:attribute name="marginheight" type="xsd:string" use="optional" default="1px"/>
		<xsd:attribute name="initialfocus" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attributeGroup ref="html.core.attrs"/>
	</xsd:complexType>
	<xsd:simpleType name="frame.scrolling.values">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="always"/>
			<xsd:enumeration value="never"/>
			<xsd:enumeration value="auto"/>
			<xsd:enumeration value="default"/>
		</xsd:restriction>
	</xsd:simpleType>

    <!-- **********************************************************************
     * ComplexType:  bordercaption
     * Description:  Specifies a text caption on a border of a frame.  The
     *               optional code element with event='value' contains a formula
     *               for the caption text.  The optional font element specifies
     *               the font and color for the caption text.
     *
     * Attributes:
     * show:
     *     A list of zero or more values, delimited by white space, that specify
     *     how to display the caption, e.g. show='caption arrows'.  By default,
     *     Notes shows default border with no captions or arrows.
     *       caption  Displays a caption in the border.
     *       arrows   Displays an arrow in the border.  This arrow lets you open
     *                and close the frame.
     * align:
     *     When applicable (depending on show attribute), it defaults to "top".
     *     Specifies how to align the caption and/or arrow.
     *       left    Arrow appears at the left border of the frame.
     *       right   Arrow appears at the right border of the frame.
     *       top     Caption/arrow appears inside the top border of frame.
     *       bottom  Caption/arrow appears inside the bottom border of frame.
     * justify:
     *     When applicable (depending on show attribute), it defaults to "left".
     *     Specifies how to justify the caption and/or arrow.
     *       left    Caption/arrow appears to the left side of the border.
     *       right   Caption/arrow appears to the right side of the border.
     *       center  Caption/arrow appears to the center of the border.
     * open:
     *     When applicable (depending on show attribute), it defaults to "0px".
     *     Specifies the size, in pixels or as a percent of the frame size,
     *     which is the default size that the frame opens to when the user
     *     clicks on the border of a closed frame.
     * bgcolor:
     *     The background color for the border.
     *********************************************************************** -->
	<xsd:complexType name="bordercaption">
		<xsd:sequence>
			<xsd:element name="code" type="code" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="font" type="font" minOccurs="0" maxOccurs="1"/>
		</xsd:sequence>
		<xsd:attribute name="show" type="xsd:token" use="optional" default=""/>
		<xsd:attribute name="align" type="edge.aligns" use="optional"/>
		<xsd:attribute name="justify" type="simple.justifys" use="optional"/>
		<xsd:attribute name="open" type="xsd:string" use="optional"/>
		<xsd:attribute name="bgcolor" type="xsd:string" use="optional"/>
	</xsd:complexType>
	<xsd:simpleType name="edge.aligns">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="left"/>
			<xsd:enumeration value="right"/>
			<xsd:enumeration value="top"/>
			<xsd:enumeration value="bottom"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="simple.justifys">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="left"/>
			<xsd:enumeration value="right"/>
			<xsd:enumeration value="center"/>
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:complexType name="viewentries">
		<xsd:sequence>
			<xsd:element name="viewentry" type="viewentry" minOccurs="0" maxOccurs="unbounded"/>
		</xsd:sequence>
		<xsd:attributeGroup ref="root.attrs"/>
		<xsd:attribute name="toplevelentries" type="xsd:integer" use="optional"/>
	</xsd:complexType>
	<xsd:complexType name="viewentry">
		<xsd:sequence>
			<xsd:element name="entrydata" type="entrydata" minOccurs="0" maxOccurs="unbounded"/>
		</xsd:sequence>
		<xsd:attribute name="position" type="xsd:string" use="optional"/>
		<xsd:attribute name="unid" type="unidhex" use="optional"/>
		<xsd:attribute name="noteid" type="noteshex" use="optional"/>
		<xsd:attribute name="children" type="xsd:integer" use="optional"/>
		<xsd:attribute name="siblings" type="xsd:integer" use="optional"/>
		<xsd:attribute name="descendants" type="xsd:integer" use="optional"/>
		<xsd:attribute name="collapsed" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="response" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="conflict" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="categorytotal" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="markedfordel" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="unread" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="unreadchildren" type="xsd:boolean" use="optional"/>
		<xsd:attribute name="relevance" type="xsd:integer" use="optional"/>
	</xsd:complexType>
	<xsd:complexType name="entrydata">
		<xsd:choice>
			<xsd:group ref="simple.types"/>
		</xsd:choice>
		<xsd:attribute name="columnnumber" type="xsd:integer" use="optional"/>
		<xsd:attribute name="indent" type="xsd:integer" use="optional"/>
		<xsd:attribute name="name" type="xsd:string" use="optional"/>
		<xsd:attribute name="category" type="xsd:boolean" use="optional"/>
	</xsd:complexType>
	<xsd:simpleType name="noteshex">
		<xsd:restriction base="xsd:string">
			<xsd:pattern value="[0-9A-Fa-f]*"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="unidhex">
		<xsd:restriction base="noteshex">
			<xsd:length value="32"/>
		</xsd:restriction>
	</xsd:simpleType>
</xsd:schema>
